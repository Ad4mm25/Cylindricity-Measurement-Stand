
S3D_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f368  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800f538  0800f538  0001f538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe5c  0800fe5c  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe5c  0800fe5c  0001fe5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe64  0800fe64  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fe64  0800fe64  0001fe64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800fe6c  0800fe6c  0001fe6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0800fe74  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200002c0  08010134  000202c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  08010134  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff21  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c4e  00000000  00000000  00040211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00043e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00045160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029364  00000000  00000000  00046310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001873b  00000000  00000000  0006f674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd2a  00000000  00000000  00087daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000771c  00000000  00000000  00177b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002c0 	.word	0x200002c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f520 	.word	0x0800f520

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002c4 	.word	0x200002c4
 800020c:	0800f520 	.word	0x0800f520

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
			     __idx, __base); }

  // NB: strtof vs strtod.
  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f00a f93e 	bl	800b2c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001048:	4602      	mov	r2, r0
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	4905      	ldr	r1, [pc, #20]	; (8001064 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x2c>)
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x30>)
 8001050:	f001 f965 	bl	800231e <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001054:	eef0 7a40 	vmov.f32	s15, s0
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	0800f538 	.word	0x0800f538
 8001068:	0800d5ed 	.word	0x0800d5ed

0800106c <_ZNSt7__cxx119to_stringEj>:
    return __str;
  }

  inline string
  to_string(unsigned __val)
  {
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    string __str(__detail::__to_chars_len(__val), '\0');
 8001076:	210a      	movs	r1, #10
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f001 f999 	bl	80023b0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 800107e:	4604      	mov	r4, r0
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4618      	mov	r0, r3
 8001086:	f009 fe85 	bl	800ad94 <_ZNSaIcEC1Ev>
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2200      	movs	r2, #0
 8001090:	4621      	mov	r1, r4
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f00a f839 	bl	800b10a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4618      	mov	r0, r3
 800109e:	f009 fe7a 	bl	800ad96 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
 80010a2:	2100      	movs	r1, #0
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f00a f86d 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80010aa:	4604      	mov	r4, r0
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f00a f865 	bl	800b17c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80010b2:	4603      	mov	r3, r0
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4620      	mov	r0, r4
 80010ba:	f001 f9b9 	bl	8002430 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 80010be:	bf00      	nop
  }
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}

080010c8 <_ZNSt7__cxx119to_stringEl>:

  inline string
  to_string(long __val)
  {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	0fdb      	lsrs	r3, r3, #31
 80010d6:	75fb      	strb	r3, [r7, #23]
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <_ZNSt7__cxx119to_stringEl+0x1c>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	425b      	negs	r3, r3
 80010e2:	e000      	b.n	80010e6 <_ZNSt7__cxx119to_stringEl+0x1e>
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 80010e8:	210a      	movs	r1, #10
 80010ea:	6938      	ldr	r0, [r7, #16]
 80010ec:	f001 f9f6 	bl	80024dc <_ZNSt8__detail14__to_chars_lenImEEjT_i>
 80010f0:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	18d4      	adds	r4, r2, r3
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f009 fe49 	bl	800ad94 <_ZNSaIcEC1Ev>
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	222d      	movs	r2, #45	; 0x2d
 8001108:	4621      	mov	r1, r4
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f009 fffd 	bl	800b10a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4618      	mov	r0, r3
 8001116:	f009 fe3e 	bl	800ad96 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f00a f830 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001124:	4603      	mov	r3, r0
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fa16 	bl	800255c <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>
    return __str;
 8001130:	bf00      	nop
  }
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}

0800113a <SendSingleChar>:
  * @param  d - znak do wysłania
  *
  * @retval Brak
  */
void SendSingleChar(char d)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
	Uart_write(d);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fe92 	bl	8004e70 <Uart_write>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_Z18SendSentenceStringNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  * @param  d - znak do wysłania
  *
  * @retval Brak
  */
void SendSentenceString(std::string a)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	for(unsigned int d = 0; d < a.length(); d++)
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f00a f80d 	bl	800b180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001166:	4602      	mov	r2, r0
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4293      	cmp	r3, r2
 800116c:	bf34      	ite	cc
 800116e:	2301      	movcc	r3, #1
 8001170:	2300      	movcs	r3, #0
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00c      	beq.n	8001192 <_Z18SendSentenceStringNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e>
	{
		SendSingleChar(a[d]);
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f00a f802 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001180:	4603      	mov	r3, r0
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ffd8 	bl	800113a <SendSingleChar>
	for(unsigned int d = 0; d < a.length(); d++)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	e7e6      	b.n	8001160 <_Z18SendSentenceStringNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc>
	}
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_Z11ReadMessageB5cxx11v>:
  * @param  Brak
  *
  * @retval s - string złożony z odebranych znaków
  */
std::string ReadMessage()
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	std::string s;
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f009 ffaa 	bl	800b0fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	while(IsDataAvailable())
 80011a8:	f003 fe96 	bl	8004ed8 <IsDataAvailable>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <_Z11ReadMessageB5cxx11v+0x34>
	{
		s += Uart_read();
 80011bc:	f003 fe30 	bl	8004e20 <Uart_read>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f009 fffe 	bl	800b1c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	while(IsDataAvailable())
 80011cc:	e7ec      	b.n	80011a8 <_Z11ReadMessageB5cxx11v+0xe>
	}
	return s;
 80011ce:	bf00      	nop
}
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_Z12StartProgramv>:
  *
  * @param  Brak
  * @retval Brak
  */
void StartProgram()
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
	SendSentenceString("OK\n");
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f009 fdd6 	bl	800ad94 <_ZNSaIcEC1Ev>
 80011e8:	f107 021c 	add.w	r2, r7, #28
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	490a      	ldr	r1, [pc, #40]	; (8001218 <_Z12StartProgramv+0x40>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a f8f9 	bl	800b3e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ffab 	bl	8001154 <_Z18SendSentenceStringNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f009 ff8b 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4618      	mov	r0, r3
 800120c:	f009 fdc3 	bl	800ad96 <_ZNSaIcED1Ev>
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800f540 	.word	0x0800f540
 800121c:	00000000 	.word	0x00000000

08001220 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  *
  * @param  s - wiadomość zawierająca pozycje osi
  * @retval Brak
  */
void GetCurrentPositions(std::string s)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b09a      	sub	sp, #104	; 0x68
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	size_t pos = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	667b      	str	r3, [r7, #100]	; 0x64
	s.erase(s.begin(), s.begin()+2);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f009 ffa3 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8001232:	4603      	mov	r3, r0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f001 f9f8 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f009 ff96 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800124c:	4603      	mov	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	2102      	movs	r1, #2
 8001256:	4618      	mov	r0, r3
 8001258:	f001 f9d6 	bl	8002608 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEplEi>
 800125c:	4603      	mov	r3, r0
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	f107 0214 	add.w	r2, r7, #20
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f001 f9e3 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f009 ffcb 	bl	800b210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>
	pos = s.find(delimeter);
 800127a:	2200      	movs	r2, #0
 800127c:	4956      	ldr	r1, [pc, #344]	; (80013d8 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f00a f853 	bl	800b32a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 8001284:	6678      	str	r0, [r7, #100]	; 0x64
	xStepper.currentPosition = std::stof(s.substr(0, pos));
 8001286:	f107 001c 	add.w	r0, r7, #28
 800128a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f00a f8e2 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fecc 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 80012a0:	ee10 3a10 	vmov	r3, s0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f96f 	bl	8000588 <__aeabi_f2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	494b      	ldr	r1, [pc, #300]	; (80013dc <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc>)
 80012b0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4618      	mov	r0, r3
 80012ba:	f009 ff2f 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	xStepper.Steps = (int32_t)(xStepper.currentPosition * 4000);
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc>)
 80012c0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c0>)
 80012ca:	f7ff f9b5 	bl	8000638 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc5f 	bl	8000b98 <__aeabi_d2iz>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc>)
 80012de:	65d3      	str	r3, [r2, #92]	; 0x5c
	s.erase(0, pos+1);
 80012e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012e2:	3301      	adds	r3, #1
 80012e4:	461a      	mov	r2, r3
 80012e6:	2100      	movs	r1, #0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f009 ff73 	bl	800b1d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>

	pos = s.find(delimeter);
 80012ee:	2200      	movs	r2, #0
 80012f0:	4939      	ldr	r1, [pc, #228]	; (80013d8 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f00a f819 	bl	800b32a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80012f8:	6678      	str	r0, [r7, #100]	; 0x64

	zStepper.currentPosition = std::stof(s.substr(0, pos));
 80012fa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80012fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f00a f8a8 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8001308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe92 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001314:	ee10 3a10 	vmov	r3, s0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f935 	bl	8000588 <__aeabi_f2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4930      	ldr	r1, [pc, #192]	; (80013e4 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c4>)
 8001324:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8001328:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800132c:	4618      	mov	r0, r3
 800132e:	f009 fef5 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	zStepper.Steps = (int32_t)(zStepper.currentPosition * 2560);
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c4>)
 8001334:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c8>)
 800133e:	f7ff f97b 	bl	8000638 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fc25 	bl	8000b98 <__aeabi_d2iz>
 800134e:	4603      	mov	r3, r0
 8001350:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c4>)
 8001352:	65d3      	str	r3, [r2, #92]	; 0x5c
	cStepper.currentPosition = std::stof(s.substr(pos+1, std::string::npos));
 8001354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	f00a f879 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8001366:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe63 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001372:	ee10 3a10 	vmov	r3, s0
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f906 	bl	8000588 <__aeabi_f2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	491a      	ldr	r1, [pc, #104]	; (80013ec <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1cc>)
 8001382:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8001386:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800138a:	4618      	mov	r0, r3
 800138c:	f009 fec6 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cStepper.Steps = (int32_t)(cStepper.currentPosition / 0.018);
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1cc>)
 8001392:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8001396:	a30e      	add	r3, pc, #56	; (adr r3, 80013d0 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b0>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff fa76 	bl	800088c <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fbf6 	bl	8000b98 <__aeabi_d2iz>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1cc>)
 80013b0:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_ADC_Start_DMA(&hadc1, &adcData, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	490e      	ldr	r1, [pc, #56]	; (80013f0 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d0>)
 80013b6:	480f      	ldr	r0, [pc, #60]	; (80013f4 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>)
 80013b8:	f005 fac4 	bl	8006944 <HAL_ADC_Start_DMA>
	wasInitialized = TRUE;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>)
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	3768      	adds	r7, #104	; 0x68
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	8d4fdf3b 	.word	0x8d4fdf3b
 80013d4:	3f926e97 	.word	0x3f926e97
 80013d8:	200002dc 	.word	0x200002dc
 80013dc:	200002f8 	.word	0x200002f8
 80013e0:	40af4000 	.word	0x40af4000
 80013e4:	20000388 	.word	0x20000388
 80013e8:	40a40000 	.word	0x40a40000
 80013ec:	20000418 	.word	0x20000418
 80013f0:	200005cc 	.word	0x200005cc
 80013f4:	20000670 	.word	0x20000670
 80013f8:	200005ca 	.word	0x200005ca

080013fc <_Z11StopProgramv>:
  *
  * @param  Brak
  * @retval Brak
  */
void StopProgram()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <_Z11StopProgramv+0x14>)
 8001402:	f005 fbaf 	bl	8006b64 <HAL_ADC_Stop_DMA>
	wasInitialized = FALSE;
 8001406:	4b03      	ldr	r3, [pc, #12]	; (8001414 <_Z11StopProgramv+0x18>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000670 	.word	0x20000670
 8001414:	200005ca 	.word	0x200005ca

08001418 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  *
  * @param  s - wiadomość zawierająca informacje o parametrach
  * @retval Brak
  */
void GetMeasurementInfo(std::string s)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	currentMeasurement.measType = (MeasurementType)(s[2]-48);
 8001420:	2102      	movs	r1, #2
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f009 feae 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001428:	4603      	mov	r3, r0
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3b30      	subs	r3, #48	; 0x30
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 8001432:	701a      	strb	r2, [r3, #0]
	switch(currentMeasurement.measType)
 8001434:	4b8b      	ldr	r3, [pc, #556]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b04      	cmp	r3, #4
 800143a:	f200 810e 	bhi.w	800165a <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x242>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001459 	.word	0x08001459
 8001448:	080014bf 	.word	0x080014bf
 800144c:	08001577 	.word	0x08001577
 8001450:	080015e1 	.word	0x080015e1
 8001454:	08001525 	.word	0x08001525
	{
	case LP:		//2|Badanie,xSpeed,Typ,zSpeed,cSpeed,zStep
		currentMeasurement.xSpeed = (MeasurementSpeed)(s[3]-48);
 8001458:	2103      	movs	r1, #3
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f009 fe92 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001460:	4603      	mov	r3, r0
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3b30      	subs	r3, #48	; 0x30
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 800146a:	705a      	strb	r2, [r3, #1]
		currentMeasurement.measuredPart = (PartType)(s[4]-48);
 800146c:	2104      	movs	r1, #4
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f009 fe88 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001474:	4603      	mov	r3, r0
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3b30      	subs	r3, #48	; 0x30
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b79      	ldr	r3, [pc, #484]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 800147e:	711a      	strb	r2, [r3, #4]
		currentMeasurement.zSpeed = (MeasurementSpeed)(s[5]-48);
 8001480:	2105      	movs	r1, #5
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f009 fe7e 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001488:	4603      	mov	r3, r0
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	3b30      	subs	r3, #48	; 0x30
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b74      	ldr	r3, [pc, #464]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 8001492:	709a      	strb	r2, [r3, #2]
		currentMeasurement.cSpeed = (MeasurementSpeed)(s[6]-48);
 8001494:	2106      	movs	r1, #6
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f009 fe74 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800149c:	4603      	mov	r3, r0
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	3b30      	subs	r3, #48	; 0x30
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 80014a6:	70da      	strb	r2, [r3, #3]
		SetStep(int(s[7]-48));
 80014a8:	2107      	movs	r1, #7
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f009 fe6a 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80014b0:	4603      	mov	r3, r0
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	3b30      	subs	r3, #48	; 0x30
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 f966 	bl	8002788 <SetStep>
		break;
 80014bc:	e0cd      	b.n	800165a <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x242>
	case GD:		//2|Badanie,xSpeed,Typ,zSpeed,cSpeed,cStep
		currentMeasurement.xSpeed = (MeasurementSpeed)(s[3]-48);
 80014be:	2103      	movs	r1, #3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f009 fe5f 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80014c6:	4603      	mov	r3, r0
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3b30      	subs	r3, #48	; 0x30
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b65      	ldr	r3, [pc, #404]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 80014d0:	705a      	strb	r2, [r3, #1]
		currentMeasurement.measuredPart = (PartType)(s[4]-48);
 80014d2:	2104      	movs	r1, #4
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f009 fe55 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80014da:	4603      	mov	r3, r0
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	3b30      	subs	r3, #48	; 0x30
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b60      	ldr	r3, [pc, #384]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 80014e4:	711a      	strb	r2, [r3, #4]
		currentMeasurement.zSpeed = (MeasurementSpeed)(s[5]-48);
 80014e6:	2105      	movs	r1, #5
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f009 fe4b 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80014ee:	4603      	mov	r3, r0
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	3b30      	subs	r3, #48	; 0x30
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 80014f8:	709a      	strb	r2, [r3, #2]
		currentMeasurement.cSpeed = (MeasurementSpeed)(s[6]-48);
 80014fa:	2106      	movs	r1, #6
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f009 fe41 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001502:	4603      	mov	r3, r0
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	3b30      	subs	r3, #48	; 0x30
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b56      	ldr	r3, [pc, #344]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 800150c:	70da      	strb	r2, [r3, #3]
		SetStep(int(s[7]-48));
 800150e:	2107      	movs	r1, #7
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f009 fe37 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001516:	4603      	mov	r3, r0
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	3b30      	subs	r3, #48	; 0x30
 800151c:	4618      	mov	r0, r3
 800151e:	f001 f933 	bl	8002788 <SetStep>
		break;
 8001522:	e09a      	b.n	800165a <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x242>
	case XY:		//2|Badanie,zSpeed,xSpeed,cSpeed,xStep
		currentMeasurement.zSpeed = (MeasurementSpeed)(s[3]-48);
 8001524:	2103      	movs	r1, #3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f009 fe2c 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800152c:	4603      	mov	r3, r0
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3b30      	subs	r3, #48	; 0x30
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b4b      	ldr	r3, [pc, #300]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 8001536:	709a      	strb	r2, [r3, #2]
		currentMeasurement.xSpeed = (MeasurementSpeed)(s[4]-48);
 8001538:	2104      	movs	r1, #4
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f009 fe22 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001540:	4603      	mov	r3, r0
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	3b30      	subs	r3, #48	; 0x30
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b46      	ldr	r3, [pc, #280]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 800154a:	705a      	strb	r2, [r3, #1]
		currentMeasurement.cSpeed = (MeasurementSpeed)(s[5]-48);
 800154c:	2105      	movs	r1, #5
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f009 fe18 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001554:	4603      	mov	r3, r0
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	3b30      	subs	r3, #48	; 0x30
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 800155e:	70da      	strb	r2, [r3, #3]
		SetStep(int(s[6]-48));
 8001560:	2106      	movs	r1, #6
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f009 fe0e 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001568:	4603      	mov	r3, r0
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3b30      	subs	r3, #48	; 0x30
 800156e:	4618      	mov	r0, r3
 8001570:	f001 f90a 	bl	8002788 <SetStep>
		break;
 8001574:	e071      	b.n	800165a <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x242>
	case Spiral:	//2|Badanie,xSpeed, Typ, cSpeed,zStep, Direction
		currentMeasurement.xSpeed = (MeasurementSpeed)(s[3]-48);
 8001576:	2103      	movs	r1, #3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f009 fe03 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800157e:	4603      	mov	r3, r0
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3b30      	subs	r3, #48	; 0x30
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b37      	ldr	r3, [pc, #220]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 8001588:	705a      	strb	r2, [r3, #1]
		currentMeasurement.measuredPart = (PartType)(s[4]-48);
 800158a:	2104      	movs	r1, #4
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f009 fdf9 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001592:	4603      	mov	r3, r0
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	3b30      	subs	r3, #48	; 0x30
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b32      	ldr	r3, [pc, #200]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 800159c:	711a      	strb	r2, [r3, #4]
		currentMeasurement.cSpeed = (MeasurementSpeed)(s[5]-48);
 800159e:	2105      	movs	r1, #5
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f009 fdef 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80015a6:	4603      	mov	r3, r0
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	3b30      	subs	r3, #48	; 0x30
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 80015b0:	70da      	strb	r2, [r3, #3]
		SetStep(int(s[6]-48));
 80015b2:	2106      	movs	r1, #6
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f009 fde5 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80015ba:	4603      	mov	r3, r0
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3b30      	subs	r3, #48	; 0x30
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 f8e1 	bl	8002788 <SetStep>
		currentMeasurement.direction = uint16_t(s[7])-48;
 80015c6:	2107      	movs	r1, #7
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f009 fddb 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80015ce:	4603      	mov	r3, r0
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b30      	subs	r3, #48	; 0x30
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 80015da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		break;
 80015de:	e03c      	b.n	800165a <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x242>
	case Cage:		//2|Badanie,xSpeed,Typ,zSpeed,cSpeed,zStep,cStep
		currentMeasurement.xSpeed = (MeasurementSpeed)(s[3]-48);
 80015e0:	2103      	movs	r1, #3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f009 fdce 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80015e8:	4603      	mov	r3, r0
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3b30      	subs	r3, #48	; 0x30
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 80015f2:	705a      	strb	r2, [r3, #1]
		currentMeasurement.measuredPart = (PartType)(s[4]-48);
 80015f4:	2104      	movs	r1, #4
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f009 fdc4 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80015fc:	4603      	mov	r3, r0
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	3b30      	subs	r3, #48	; 0x30
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 8001606:	711a      	strb	r2, [r3, #4]
		currentMeasurement.zSpeed = (MeasurementSpeed)(s[5]-48);
 8001608:	2105      	movs	r1, #5
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f009 fdba 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001610:	4603      	mov	r3, r0
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	3b30      	subs	r3, #48	; 0x30
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 800161a:	709a      	strb	r2, [r3, #2]
		currentMeasurement.cSpeed = (MeasurementSpeed)(s[6]-48);
 800161c:	2106      	movs	r1, #6
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f009 fdb0 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001624:	4603      	mov	r3, r0
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3b30      	subs	r3, #48	; 0x30
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 800162e:	70da      	strb	r2, [r3, #3]
		SetStep(int(s[7]-48));
 8001630:	2107      	movs	r1, #7
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f009 fda6 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001638:	4603      	mov	r3, r0
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	3b30      	subs	r3, #48	; 0x30
 800163e:	4618      	mov	r0, r3
 8001640:	f001 f8a2 	bl	8002788 <SetStep>
		SetStep(int(s[8]-48));
 8001644:	2108      	movs	r1, #8
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f009 fd9c 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800164c:	4603      	mov	r3, r0
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	3b30      	subs	r3, #48	; 0x30
 8001652:	4618      	mov	r0, r3
 8001654:	f001 f898 	bl	8002788 <SetStep>
		break;
 8001658:	bf00      	nop
	}
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200004e8 	.word	0x200004e8

08001668 <_Z14GetDestinationP7StepperNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  * @param  _stepper - wskaźnik do struktury silnika Stepper
  * @param  s - string zawierający oś silnika i zadaną pozycję
  * @retval Brak
  */
void GetDestination(struct Stepper* _stepper, std::string s)			//"x|double"
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	s.erase(s.begin(), s.begin()+2);
 8001672:	6838      	ldr	r0, [r7, #0]
 8001674:	f009 fd80 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8001678:	4603      	mov	r3, r0
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	f107 0210 	add.w	r2, r7, #16
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f000 ffd5 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 800168c:	6838      	ldr	r0, [r7, #0]
 800168e:	f009 fd73 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8001692:	4603      	mov	r3, r0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	2102      	movs	r1, #2
 800169c:	4618      	mov	r0, r3
 800169e:	f000 ffb3 	bl	8002608 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEplEi>
 80016a2:	4603      	mov	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	f107 0218 	add.w	r2, r7, #24
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 ffc0 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	68f9      	ldr	r1, [r7, #12]
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f009 fda8 	bl	800b210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>
	MoveStepperToPosition(_stepper, std::stof(s));
 80016c0:	2100      	movs	r1, #0
 80016c2:	6838      	ldr	r0, [r7, #0]
 80016c4:	f7ff fcb8 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 80016c8:	ee10 3a10 	vmov	r3, s0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff5b 	bl	8000588 <__aeabi_f2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	ec43 2b10 	vmov	d0, r2, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f001 fc64 	bl	8002fa8 <MoveStepperToPosition>
}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  *
  * @param  s - string informujący o blokadzie i rodzaju osi
  * @retval Brak
  */
void AxisLock(std::string s)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	switch (s[2])
 80016f0:	2102      	movs	r1, #2
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f009 fd46 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80016f8:	4603      	mov	r3, r0
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b7a      	cmp	r3, #122	; 0x7a
 80016fe:	d00a      	beq.n	8001716 <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e>
 8001700:	2b7a      	cmp	r3, #122	; 0x7a
 8001702:	dc12      	bgt.n	800172a <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
 8001704:	2b63      	cmp	r3, #99	; 0x63
 8001706:	d00b      	beq.n	8001720 <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
 8001708:	2b78      	cmp	r3, #120	; 0x78
 800170a:	d10e      	bne.n	800172a <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
	{
	case 'x':
		StepperLock(&xStepper, TRUE);
 800170c:	2101      	movs	r1, #1
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8001710:	f001 fb74 	bl	8002dfc <StepperLock>
		break;
 8001714:	e00a      	b.n	800172c <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	case 'z':
		StepperLock(&zStepper, TRUE);
 8001716:	2101      	movs	r1, #1
 8001718:	4807      	ldr	r0, [pc, #28]	; (8001738 <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 800171a:	f001 fb6f 	bl	8002dfc <StepperLock>
		break;
 800171e:	e005      	b.n	800172c <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	case 'c':
		StepperLock(&cStepper, TRUE);
 8001720:	2101      	movs	r1, #1
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>)
 8001724:	f001 fb6a 	bl	8002dfc <StepperLock>
		break;
 8001728:	e000      	b.n	800172c <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	default:
		break;
 800172a:	bf00      	nop
	}
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200002f8 	.word	0x200002f8
 8001738:	20000388 	.word	0x20000388
 800173c:	20000418 	.word	0x20000418

08001740 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  *
  * @param  s - string informujący o odblokowaniu i rodzaju osi
  * @retval Brak
  */
void AxisUnlock(std::string s)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	switch (s[2])
 8001748:	2102      	movs	r1, #2
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f009 fd1a 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001750:	4603      	mov	r3, r0
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b7a      	cmp	r3, #122	; 0x7a
 8001756:	d00a      	beq.n	800176e <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e>
 8001758:	2b7a      	cmp	r3, #122	; 0x7a
 800175a:	dc12      	bgt.n	8001782 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
 800175c:	2b63      	cmp	r3, #99	; 0x63
 800175e:	d00b      	beq.n	8001778 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
 8001760:	2b78      	cmp	r3, #120	; 0x78
 8001762:	d10e      	bne.n	8001782 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
	{
	case 'x':
		StepperLock(&xStepper, FALSE);
 8001764:	2100      	movs	r1, #0
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8001768:	f001 fb48 	bl	8002dfc <StepperLock>
		break;
 800176c:	e00a      	b.n	8001784 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	case 'z':
		StepperLock(&zStepper, FALSE);
 800176e:	2100      	movs	r1, #0
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 8001772:	f001 fb43 	bl	8002dfc <StepperLock>
		break;
 8001776:	e005      	b.n	8001784 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	case 'c':
		StepperLock(&cStepper, FALSE);
 8001778:	2100      	movs	r1, #0
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>)
 800177c:	f001 fb3e 	bl	8002dfc <StepperLock>
		break;
 8001780:	e000      	b.n	8001784 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	default:
		break;
 8001782:	bf00      	nop
	}
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200002f8 	.word	0x200002f8
 8001790:	20000388 	.word	0x20000388
 8001794:	20000418 	.word	0x20000418

08001798 <_Z20GetDoubleDestinationP7StepperS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  * @param  _stepper2 - wskaźnik do struktury drugiego silnika krokowego
  * @param  s - string zawierający osie silników i zadane pozycje
  * @retval Brak
  */
void GetDoubleDestination(struct Stepper* _stepper1, struct Stepper* _stepper2, std::string s)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b096      	sub	sp, #88	; 0x58
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	size_t pos = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	657b      	str	r3, [r7, #84]	; 0x54
	s.erase(s.begin(), s.begin()+2);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f009 fce5 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	f107 0214 	add.w	r2, r7, #20
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 ff3a 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f009 fcd8 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80017c8:	4603      	mov	r3, r0
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	2102      	movs	r1, #2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 ff18 	bl	8002608 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEplEi>
 80017d8:	4603      	mov	r3, r0
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	f107 021c 	add.w	r2, r7, #28
 80017e0:	f107 0318 	add.w	r3, r7, #24
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 ff25 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	6939      	ldr	r1, [r7, #16]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f009 fd0d 	bl	800b210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>

	pos = s.find(delimeter);
 80017f6:	2200      	movs	r2, #0
 80017f8:	4923      	ldr	r1, [pc, #140]	; (8001888 <_Z20GetDoubleDestinationP7StepperS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>)
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f009 fd95 	bl	800b32a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 8001800:	6578      	str	r0, [r7, #84]	; 0x54
	MoveStepperToPosition(_stepper1, std::stof(s.substr(0, pos)));
 8001802:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f009 fe24 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fc0e 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800181c:	ee10 3a10 	vmov	r3, s0
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe feb1 	bl	8000588 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	ec43 2b10 	vmov	d0, r2, r3
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f001 fbba 	bl	8002fa8 <MoveStepperToPosition>
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	4618      	mov	r0, r3
 800183a:	f009 fc6f 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	MoveStepperToPosition(_stepper2, std::stof(s.substr(pos+1, std::string::npos)));
 800183e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f009 fe04 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8001850:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fbee 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 800185c:	ee10 3a10 	vmov	r3, s0
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe91 	bl	8000588 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	ec43 2b10 	vmov	d0, r2, r3
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f001 fb9a 	bl	8002fa8 <MoveStepperToPosition>
 8001874:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001878:	4618      	mov	r0, r3
 800187a:	f009 fc4f 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800187e:	bf00      	nop
 8001880:	3758      	adds	r7, #88	; 0x58
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200002dc 	.word	0x200002dc

0800188c <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

  * @param  s - string pozycję końca lub początku
  * @retval Brak
  */
void GetStartEnd(std::string s)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b0a6      	sub	sp, #152	; 0x98
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	size_t pos = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	switch(s[2])
 800189a:	2102      	movs	r1, #2
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f009 fc71 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80018a2:	4603      	mov	r3, r0
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b6b      	cmp	r3, #107	; 0x6b
 80018a8:	d002      	beq.n	80018b0 <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>
 80018aa:	2b70      	cmp	r3, #112	; 0x70
 80018ac:	d06b      	beq.n	8001986 <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfa>
		currentMeasurement.zStart = std::stof(s.substr(0, pos));
		currentMeasurement.cStart = std::stof(s.substr(pos+1, std::string::npos));
		StartPreparing();
		break;
	}
}
 80018ae:	e0d7      	b.n	8001a60 <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
		s.erase(s.begin(), s.begin()+4);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f009 fc61 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	f107 0210 	add.w	r2, r7, #16
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 feb6 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f009 fc54 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80018d0:	4603      	mov	r3, r0
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	2104      	movs	r1, #4
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fe94 	bl	8002608 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEplEi>
 80018e0:	4603      	mov	r3, r0
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	f107 0218 	add.w	r2, r7, #24
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fea1 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	68f9      	ldr	r1, [r7, #12]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f009 fc89 	bl	800b210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>
		pos = s.find(delimeter);
 80018fe:	2200      	movs	r2, #0
 8001900:	4959      	ldr	r1, [pc, #356]	; (8001a68 <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dc>)
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f009 fd11 	bl	800b32a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 8001908:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		currentMeasurement.zEnd = std::stof(s.substr(0, pos));
 800190c:	f107 0020 	add.w	r0, r7, #32
 8001910:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f009 fd9e 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fb88 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001928:	ee10 3a10 	vmov	r3, s0
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe2b 	bl	8000588 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	494d      	ldr	r1, [pc, #308]	; (8001a6c <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e0>)
 8001938:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800193c:	f107 0320 	add.w	r3, r7, #32
 8001940:	4618      	mov	r0, r3
 8001942:	f009 fbeb 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		currentMeasurement.cEnd = std::stof(s.substr(pos+1, std::string::npos));
 8001946:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	f009 fd7f 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800195a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fb69 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001966:	ee10 3a10 	vmov	r3, s0
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fe0c 	bl	8000588 <__aeabi_f2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	493d      	ldr	r1, [pc, #244]	; (8001a6c <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e0>)
 8001976:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800197a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800197e:	4618      	mov	r0, r3
 8001980:	f009 fbcc 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001984:	e06c      	b.n	8001a60 <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
		s.erase(s.begin(), s.begin()+4);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f009 fbf6 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800198c:	4603      	mov	r3, r0
 800198e:	657b      	str	r3, [r7, #84]	; 0x54
 8001990:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001994:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fe4b 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f009 fbe9 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80019a6:	4603      	mov	r3, r0
 80019a8:	663b      	str	r3, [r7, #96]	; 0x60
 80019aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019ae:	2104      	movs	r1, #4
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fe29 	bl	8002608 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEplEi>
 80019b6:	4603      	mov	r3, r0
 80019b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80019be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fe36 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 80019ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f009 fc1e 	bl	800b210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>
		pos = s.find(delimeter);
 80019d4:	2200      	movs	r2, #0
 80019d6:	4924      	ldr	r1, [pc, #144]	; (8001a68 <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dc>)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f009 fca6 	bl	800b32a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80019de:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		currentMeasurement.zStart = std::stof(s.substr(0, pos));
 80019e2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80019e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019ea:	2200      	movs	r2, #0
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	f009 fd33 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80019f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb1d 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 80019fe:	ee10 3a10 	vmov	r3, s0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fdc0 	bl	8000588 <__aeabi_f2d>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4917      	ldr	r1, [pc, #92]	; (8001a6c <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e0>)
 8001a0e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001a12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a16:	4618      	mov	r0, r3
 8001a18:	f009 fb80 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		currentMeasurement.cStart = std::stof(s.substr(pos+1, std::string::npos));
 8001a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	f009 fd14 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8001a30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fafe 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001a3c:	ee10 3a10 	vmov	r3, s0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fda1 	bl	8000588 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e0>)
 8001a4c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001a50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a54:	4618      	mov	r0, r3
 8001a56:	f009 fb61 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		StartPreparing();
 8001a5a:	f001 fd47 	bl	80034ec <StartPreparing>
		break;
 8001a5e:	bf00      	nop
}
 8001a60:	bf00      	nop
 8001a62:	3798      	adds	r7, #152	; 0x98
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200002dc 	.word	0x200002dc
 8001a6c:	200004e8 	.word	0x200004e8

08001a70 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  *
  * @param  s - string zawierający informację o wyzerowaniu osi
  * @retval Brak
  */
void ZeroAxis(std::string s)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	switch(s[2])
 8001a78:	2102      	movs	r1, #2
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f009 fb82 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001a80:	4603      	mov	r3, r0
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b5a      	cmp	r3, #90	; 0x5a
 8001a86:	d014      	beq.n	8001ab2 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
 8001a88:	2b5a      	cmp	r3, #90	; 0x5a
 8001a8a:	dc30      	bgt.n	8001aee <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8001a8c:	2b43      	cmp	r3, #67	; 0x43
 8001a8e:	d01f      	beq.n	8001ad0 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>
 8001a90:	2b58      	cmp	r3, #88	; 0x58
 8001a92:	d12c      	bne.n	8001aee <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
	{
	case 'X':
		xStepper.Steps = 0;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	65da      	str	r2, [r3, #92]	; 0x5c
		xStepper.currentPosition = 0.0f;
 8001a9a:	4917      	ldr	r1, [pc, #92]	; (8001af8 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>)
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		xStepper.StepperTimer->CNT = 0;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001ab0:	e01d      	b.n	8001aee <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
	case 'Z':
		zStepper.Steps = 0;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	65da      	str	r2, [r3, #92]	; 0x5c
		zStepper.currentPosition = 0.0f;
 8001ab8:	4910      	ldr	r1, [pc, #64]	; (8001afc <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		zStepper.StepperTimer->CNT = 0;
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001ace:	e00e      	b.n	8001aee <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
	case 'C':
		cStepper.Steps = 0;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	65da      	str	r2, [r3, #92]	; 0x5c
		cStepper.currentPosition = 0.0f;
 8001ad6:	490a      	ldr	r1, [pc, #40]	; (8001b00 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>)
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		cStepper.StepperTimer->CNT = 0;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001aec:	bf00      	nop
	}
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200002f8 	.word	0x200002f8
 8001afc:	20000388 	.word	0x20000388
 8001b00:	20000418 	.word	0x20000418

08001b04 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  *
  * @param  s - string zawierający informację o kalibracji
  * @retval Brak
  */
void StartCalibration(std::string s)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b094      	sub	sp, #80	; 0x50
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	workMode = calibration;
 8001b0c:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11c>)
 8001b0e:	2203      	movs	r2, #3
 8001b10:	701a      	strb	r2, [r3, #0]
	size_t pos = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	64fb      	str	r3, [r7, #76]	; 0x4c
	switch(s[2])
 8001b16:	2102      	movs	r1, #2
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f009 fb33 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b30      	cmp	r3, #48	; 0x30
 8001b24:	d002      	beq.n	8001b2c <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
 8001b26:	2b31      	cmp	r3, #49	; 0x31
 8001b28:	d005      	beq.n	8001b36 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
 8001b2a:	e009      	b.n	8001b40 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
	{
	case '0':
		axisCalibration.partType = tuleja;
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		break;
 8001b34:	e004      	b.n	8001b40 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
	case '1':
		axisCalibration.partType = walek;
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		break;
 8001b3e:	bf00      	nop
	}

	s.erase(s.begin(), s.begin()+4);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f009 fb19 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8001b46:	4603      	mov	r3, r0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	f107 020c 	add.w	r2, r7, #12
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fd6e 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f009 fb0c 	bl	800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8001b60:	4603      	mov	r3, r0
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	f107 0318 	add.w	r3, r7, #24
 8001b68:	2104      	movs	r1, #4
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fd4c 	bl	8002608 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEplEi>
 8001b70:	4603      	mov	r3, r0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	f107 0214 	add.w	r2, r7, #20
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fd59 	bl	8002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f009 fb41 	bl	800b210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>
	pos = s.find(delimeter);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4925      	ldr	r1, [pc, #148]	; (8001c28 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x124>)
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f009 fbc9 	bl	800b32a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 8001b98:	64f8      	str	r0, [r7, #76]	; 0x4c
	axisCalibration.stage = 1;
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	axisCalibration.height = std::stof(s.substr(0, pos));
 8001ba2:	f107 001c 	add.w	r0, r7, #28
 8001ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f009 fc54 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fa3e 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001bbc:	ee10 3a10 	vmov	r3, s0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fce1 	bl	8000588 <__aeabi_f2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4916      	ldr	r1, [pc, #88]	; (8001c24 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>)
 8001bcc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f009 faa1 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	axisCalibration.diameter = std::stof(s.substr(pos+1, std::string::npos));
 8001bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f009 fc36 	bl	800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8001bec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fa20 	bl	8001038 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001bf8:	ee10 3a10 	vmov	r3, s0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fcc3 	bl	8000588 <__aeabi_f2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4907      	ldr	r1, [pc, #28]	; (8001c24 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>)
 8001c08:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8001c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c10:	4618      	mov	r0, r3
 8001c12:	f009 fa83 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001c16:	bf00      	nop
 8001c18:	3750      	adds	r7, #80	; 0x50
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200005d0 	.word	0x200005d0
 8001c24:	20000548 	.word	0x20000548
 8001c28:	200002dc 	.word	0x200002dc
 8001c2c:	00000000 	.word	0x00000000

08001c30 <SendCurrentPosition>:
  *
  * @param  s - string zawierający informację o kalibracji
  * @retval Brak
  */
void SendCurrentPosition(double x, double z, double c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0a6      	sub	sp, #152	; 0x98
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c3a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c3e:	ed87 2b00 	vstr	d2, [r7]

	std::string s = "1|";
 8001c42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c46:	4618      	mov	r0, r3
 8001c48:	f009 f8a4 	bl	800ad94 <_ZNSaIcEC1Ev>
 8001c4c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	495c      	ldr	r1, [pc, #368]	; (8001dc8 <SendCurrentPosition+0x198>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f009 fbc6 	bl	800b3e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c60:	4618      	mov	r0, r3
 8001c62:	f009 f898 	bl	800ad96 <_ZNSaIcED1Ev>
	s += std::to_string((int32_t)roundf(x * 100000));
 8001c66:	a356      	add	r3, pc, #344	; (adr r3, 8001dc0 <SendCurrentPosition+0x190>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c70:	f7fe fce2 	bl	8000638 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe ffd4 	bl	8000c28 <__aeabi_d2f>
 8001c80:	4603      	mov	r3, r0
 8001c82:	ee00 3a10 	vmov	s0, r3
 8001c86:	f009 fcc3 	bl	800b610 <roundf>
 8001c8a:	eef0 7a40 	vmov.f32	s15, s0
 8001c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c96:	ee17 1a90 	vmov	r1, s15
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fa14 	bl	80010c8 <_ZNSt7__cxx119to_stringEl>
 8001ca0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f009 faeb 	bl	800b286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8001cb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f009 fa31 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	s += "|";
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4943      	ldr	r1, [pc, #268]	; (8001dcc <SendCurrentPosition+0x19c>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f009 fafb 	bl	800b2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	s += std::to_string((int32_t)roundf(z * 100000));
 8001cc6:	a33e      	add	r3, pc, #248	; (adr r3, 8001dc0 <SendCurrentPosition+0x190>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cd0:	f7fe fcb2 	bl	8000638 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe ffa4 	bl	8000c28 <__aeabi_d2f>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	ee00 3a10 	vmov	s0, r3
 8001ce6:	f009 fc93 	bl	800b610 <roundf>
 8001cea:	eef0 7a40 	vmov.f32	s15, s0
 8001cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cf6:	ee17 1a90 	vmov	r1, s15
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f9e4 	bl	80010c8 <_ZNSt7__cxx119to_stringEl>
 8001d00:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f009 fabb 	bl	800b286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8001d10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d14:	4618      	mov	r0, r3
 8001d16:	f009 fa01 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	s+= "|";
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	492b      	ldr	r1, [pc, #172]	; (8001dcc <SendCurrentPosition+0x19c>)
 8001d20:	4618      	mov	r0, r3
 8001d22:	f009 facb 	bl	800b2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	s += std::to_string((int32_t)roundf(c * 100000));
 8001d26:	a326      	add	r3, pc, #152	; (adr r3, 8001dc0 <SendCurrentPosition+0x190>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d30:	f7fe fc82 	bl	8000638 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f7fe ff74 	bl	8000c28 <__aeabi_d2f>
 8001d40:	4603      	mov	r3, r0
 8001d42:	ee00 3a10 	vmov	s0, r3
 8001d46:	f009 fc63 	bl	800b610 <roundf>
 8001d4a:	eef0 7a40 	vmov.f32	s15, s0
 8001d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d56:	ee17 1a90 	vmov	r1, s15
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f9b4 	bl	80010c8 <_ZNSt7__cxx119to_stringEl>
 8001d60:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f009 fa8b 	bl	800b286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8001d70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d74:	4618      	mov	r0, r3
 8001d76:	f009 f9d1 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	s += "|\n";
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4914      	ldr	r1, [pc, #80]	; (8001dd0 <SendCurrentPosition+0x1a0>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f009 fa9b 	bl	800b2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	//ChangePinState(TX_FLAG_GPIO_Port, TX_FLAG_Pin, 1);
	SendSentenceString(s);
 8001d86:	f107 021c 	add.w	r2, r7, #28
 8001d8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f009 faf5 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001d96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f9da 	bl	8001154 <_Z18SendSentenceStringNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001da0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001da4:	4618      	mov	r0, r3
 8001da6:	f009 f9b9 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::string s = "1|";
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4618      	mov	r0, r3
 8001db0:	f009 f9b4 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 8001db4:	bf00      	nop
 8001db6:	3798      	adds	r7, #152	; 0x98
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40f86a00 	.word	0x40f86a00
 8001dc8:	0800f544 	.word	0x0800f544
 8001dcc:	0800f548 	.word	0x0800f548
 8001dd0:	0800f54c 	.word	0x0800f54c

08001dd4 <SendCurrentPoint>:
  *
  * @param  _currentPoint aktualny punkt ścieżki
  * @retval Brak
  */
void SendCurrentPoint(unsigned int _currentPoint)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b096      	sub	sp, #88	; 0x58
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	std::string s = "2|";
 8001ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de0:	4618      	mov	r0, r3
 8001de2:	f008 ffd7 	bl	800ad94 <_ZNSaIcEC1Ev>
 8001de6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	491e      	ldr	r1, [pc, #120]	; (8001e68 <SendCurrentPoint+0x94>)
 8001df0:	4618      	mov	r0, r3
 8001df2:	f009 faf9 	bl	800b3e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f008 ffcb 	bl	800ad96 <_ZNSaIcED1Ev>
	s += std::to_string(_currentPoint);
 8001e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f930 	bl	800106c <_ZNSt7__cxx119to_stringEj>
 8001e0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f009 fa35 	bl	800b286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8001e1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e20:	4618      	mov	r0, r3
 8001e22:	f009 f97b 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	s += "|\n";
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	4910      	ldr	r1, [pc, #64]	; (8001e6c <SendCurrentPoint+0x98>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f009 fa45 	bl	800b2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>

	SendSentenceString(s);
 8001e32:	f107 020c 	add.w	r2, r7, #12
 8001e36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f009 fa9f 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001e42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f984 	bl	8001154 <_Z18SendSentenceStringNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e50:	4618      	mov	r0, r3
 8001e52:	f009 f963 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::string s = "2|";
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f009 f95e 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 8001e60:	bf00      	nop
 8001e62:	3758      	adds	r7, #88	; 0x58
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	0800f550 	.word	0x0800f550
 8001e6c:	0800f54c 	.word	0x0800f54c

08001e70 <_Z14SendingHandlerv>:
  *
  * @param  Brak
  * @retval Brak
  */
void SendingHandler()
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	if (wasInitialized == TRUE && workMode == manual)
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <_Z14SendingHandlerv+0xc8>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d15b      	bne.n	8001f34 <_Z14SendingHandlerv+0xc4>
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <_Z14SendingHandlerv+0xcc>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d157      	bne.n	8001f34 <_Z14SendingHandlerv+0xc4>
	{
		counterSend++;
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <_Z14SendingHandlerv+0xd0>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <_Z14SendingHandlerv+0xd0>)
 8001e8e:	801a      	strh	r2, [r3, #0]
		if (counterSend > 5)
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <_Z14SendingHandlerv+0xd0>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d94d      	bls.n	8001f34 <_Z14SendingHandlerv+0xc4>
		{
			counterSend = 0;
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <_Z14SendingHandlerv+0xd0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	801a      	strh	r2, [r3, #0]
			if (xStepper.lastSentPosition != xStepper.currentPosition ||
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <_Z14SendingHandlerv+0xd4>)
 8001ea0:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <_Z14SendingHandlerv+0xd4>)
 8001ea6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001eaa:	f7fe fe2d 	bl	8000b08 <__aeabi_dcmpeq>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d016      	beq.n	8001ee2 <_Z14SendingHandlerv+0x72>
					zStepper.lastSentPosition != zStepper.currentPosition ||
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <_Z14SendingHandlerv+0xd8>)
 8001eb6:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <_Z14SendingHandlerv+0xd8>)
 8001ebc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
			if (xStepper.lastSentPosition != xStepper.currentPosition ||
 8001ec0:	f7fe fe22 	bl	8000b08 <__aeabi_dcmpeq>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <_Z14SendingHandlerv+0x72>
					cStepper.lastSentPosition != cStepper.currentPosition)
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <_Z14SendingHandlerv+0xdc>)
 8001ecc:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <_Z14SendingHandlerv+0xdc>)
 8001ed2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
					zStepper.lastSentPosition != zStepper.currentPosition ||
 8001ed6:	f7fe fe17 	bl	8000b08 <__aeabi_dcmpeq>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d000      	beq.n	8001ee2 <_Z14SendingHandlerv+0x72>

		}
	}


}
 8001ee0:	e028      	b.n	8001f34 <_Z14SendingHandlerv+0xc4>
				xStepper.lastSentPosition = xStepper.currentPosition;
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <_Z14SendingHandlerv+0xd4>)
 8001ee4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001ee8:	4916      	ldr	r1, [pc, #88]	; (8001f44 <_Z14SendingHandlerv+0xd4>)
 8001eea:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
				zStepper.lastSentPosition = zStepper.currentPosition;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <_Z14SendingHandlerv+0xd8>)
 8001ef0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001ef4:	4914      	ldr	r1, [pc, #80]	; (8001f48 <_Z14SendingHandlerv+0xd8>)
 8001ef6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
				cStepper.lastSentPosition = cStepper.currentPosition;
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <_Z14SendingHandlerv+0xdc>)
 8001efc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001f00:	4912      	ldr	r1, [pc, #72]	; (8001f4c <_Z14SendingHandlerv+0xdc>)
 8001f02:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
				SendCurrentPosition(xStepper.currentPosition, zStepper.currentPosition, cStepper.currentPosition);
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <_Z14SendingHandlerv+0xd4>)
 8001f08:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <_Z14SendingHandlerv+0xd8>)
 8001f0e:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <_Z14SendingHandlerv+0xdc>)
 8001f14:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8001f18:	eeb0 2a45 	vmov.f32	s4, s10
 8001f1c:	eef0 2a65 	vmov.f32	s5, s11
 8001f20:	eeb0 1a46 	vmov.f32	s2, s12
 8001f24:	eef0 1a66 	vmov.f32	s3, s13
 8001f28:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2c:	eef0 0a67 	vmov.f32	s1, s15
 8001f30:	f7ff fe7e 	bl	8001c30 <SendCurrentPosition>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200005ca 	.word	0x200005ca
 8001f3c:	200005d0 	.word	0x200005d0
 8001f40:	200002f4 	.word	0x200002f4
 8001f44:	200002f8 	.word	0x200002f8
 8001f48:	20000388 	.word	0x20000388
 8001f4c:	20000418 	.word	0x20000418

08001f50 <MessageHandler>:
  *
  * @param  Brak
  * @retval Brak
  */
void MessageHandler()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0c8      	sub	sp, #288	; 0x120
 8001f54:	af00      	add	r7, sp, #0
	if(rx_buffer.head == rx_buffer.tail)		//jeżeli brak wiadomosci do odebrania
 8001f56:	4bd0      	ldr	r3, [pc, #832]	; (8002298 <MessageHandler+0x348>)
 8001f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5a:	4bcf      	ldr	r3, [pc, #828]	; (8002298 <MessageHandler+0x348>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <MessageHandler+0x22>
	{
		SendingHandler();
 8001f6c:	f7ff ff80 	bl	8001e70 <_Z14SendingHandlerv>
 8001f70:	e18e      	b.n	8002290 <MessageHandler+0x340>
		return;
	}

	std::string s;
 8001f72:	463b      	mov	r3, r7
 8001f74:	4618      	mov	r0, r3
 8001f76:	f009 f8c1 	bl	800b0fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	s = ReadMessage();
 8001f7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f909 	bl	800119a <_Z11ReadMessageB5cxx11v>
 8001f88:	f107 0218 	add.w	r2, r7, #24
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f009 f8c9 	bl	800b128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001f96:	f107 0318 	add.w	r3, r7, #24
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f009 f8be 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	if (s.size() != 0)
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f009 f8ea 	bl	800b17c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8167 	beq.w	8002288 <MessageHandler+0x338>
	{
		switch (s[0])
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f009 f8e0 	bl	800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	3b30      	subs	r3, #48	; 0x30
 8001fca:	2b4a      	cmp	r3, #74	; 0x4a
 8001fcc:	f200 815b 	bhi.w	8002286 <MessageHandler+0x336>
 8001fd0:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <MessageHandler+0x88>)
 8001fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd6:	bf00      	nop
 8001fd8:	08002105 	.word	0x08002105
 8001fdc:	0800210b 	.word	0x0800210b
 8001fe0:	08002111 	.word	0x08002111
 8001fe4:	08002135 	.word	0x08002135
 8001fe8:	08002159 	.word	0x08002159
 8001fec:	0800217d 	.word	0x0800217d
 8001ff0:	080021a1 	.word	0x080021a1
 8001ff4:	08002287 	.word	0x08002287
 8001ff8:	08002287 	.word	0x08002287
 8001ffc:	0800223f 	.word	0x0800223f
 8002000:	08002287 	.word	0x08002287
 8002004:	08002287 	.word	0x08002287
 8002008:	08002287 	.word	0x08002287
 800200c:	08002287 	.word	0x08002287
 8002010:	08002287 	.word	0x08002287
 8002014:	08002287 	.word	0x08002287
 8002018:	08002287 	.word	0x08002287
 800201c:	08002287 	.word	0x08002287
 8002020:	08002287 	.word	0x08002287
 8002024:	08002287 	.word	0x08002287
 8002028:	08002287 	.word	0x08002287
 800202c:	08002287 	.word	0x08002287
 8002030:	08002287 	.word	0x08002287
 8002034:	08002287 	.word	0x08002287
 8002038:	08002287 	.word	0x08002287
 800203c:	08002287 	.word	0x08002287
 8002040:	08002287 	.word	0x08002287
 8002044:	08002287 	.word	0x08002287
 8002048:	08002287 	.word	0x08002287
 800204c:	08002287 	.word	0x08002287
 8002050:	08002287 	.word	0x08002287
 8002054:	08002287 	.word	0x08002287
 8002058:	08002263 	.word	0x08002263
 800205c:	08002287 	.word	0x08002287
 8002060:	08002287 	.word	0x08002287
 8002064:	080021c5 	.word	0x080021c5
 8002068:	08002287 	.word	0x08002287
 800206c:	08002287 	.word	0x08002287
 8002070:	08002287 	.word	0x08002287
 8002074:	08002287 	.word	0x08002287
 8002078:	08002287 	.word	0x08002287
 800207c:	08002287 	.word	0x08002287
 8002080:	08002287 	.word	0x08002287
 8002084:	08002287 	.word	0x08002287
 8002088:	08002287 	.word	0x08002287
 800208c:	08002287 	.word	0x08002287
 8002090:	08002287 	.word	0x08002287
 8002094:	08002287 	.word	0x08002287
 8002098:	08002287 	.word	0x08002287
 800209c:	08002287 	.word	0x08002287
 80020a0:	08002287 	.word	0x08002287
 80020a4:	08002287 	.word	0x08002287
 80020a8:	08002217 	.word	0x08002217
 80020ac:	08002287 	.word	0x08002287
 80020b0:	08002287 	.word	0x08002287
 80020b4:	08002287 	.word	0x08002287
 80020b8:	08002287 	.word	0x08002287
 80020bc:	08002287 	.word	0x08002287
 80020c0:	08002287 	.word	0x08002287
 80020c4:	08002287 	.word	0x08002287
 80020c8:	08002287 	.word	0x08002287
 80020cc:	08002287 	.word	0x08002287
 80020d0:	08002287 	.word	0x08002287
 80020d4:	08002287 	.word	0x08002287
 80020d8:	08002287 	.word	0x08002287
 80020dc:	08002287 	.word	0x08002287
 80020e0:	08002287 	.word	0x08002287
 80020e4:	08002287 	.word	0x08002287
 80020e8:	08002287 	.word	0x08002287
 80020ec:	08002287 	.word	0x08002287
 80020f0:	08002287 	.word	0x08002287
 80020f4:	08002287 	.word	0x08002287
 80020f8:	080021cb 	.word	0x080021cb
 80020fc:	08002287 	.word	0x08002287
 8002100:	080021f1 	.word	0x080021f1
		{
		case '0':
			StartProgram(); 		break;
 8002104:	f7ff f868 	bl	80011d8 <_Z12StartProgramv>
 8002108:	e0be      	b.n	8002288 <MessageHandler+0x338>
		case '1':
			StopMeasuring();		break;
 800210a:	f002 f9bd 	bl	8004488 <StopMeasuring>
 800210e:	e0bb      	b.n	8002288 <MessageHandler+0x338>
		case '2':
			GetMeasurementInfo(s);	break;
 8002110:	463a      	mov	r2, r7
 8002112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f009 f931 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800211e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f978 	bl	8001418 <_Z18GetMeasurementInfoNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002128:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800212c:	4618      	mov	r0, r3
 800212e:	f008 fff5 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002132:	e0a9      	b.n	8002288 <MessageHandler+0x338>
		case '3':
			AxisLock(s);			break;
 8002134:	463a      	mov	r2, r7
 8002136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f009 f91f 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff face 	bl	80016e8 <_Z8AxisLockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800214c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002150:	4618      	mov	r0, r3
 8002152:	f008 ffe3 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002156:	e097      	b.n	8002288 <MessageHandler+0x338>
		case '4':
			AxisUnlock(s);			break;
 8002158:	463a      	mov	r2, r7
 800215a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f009 f90d 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002166:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fae8 	bl	8001740 <_Z10AxisUnlockNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002170:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002174:	4618      	mov	r0, r3
 8002176:	f008 ffd1 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800217a:	e085      	b.n	8002288 <MessageHandler+0x338>
		case '5':
			GetCurrentPositions(s);	break;
 800217c:	463a      	mov	r2, r7
 800217e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f009 f8fb 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800218a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f846 	bl	8001220 <_Z19GetCurrentPositionsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002194:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002198:	4618      	mov	r0, r3
 800219a:	f008 ffbf 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800219e:	e073      	b.n	8002288 <MessageHandler+0x338>
		case '6':
			StartCalibration(s);	break;
 80021a0:	463a      	mov	r2, r7
 80021a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f009 f8e9 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80021ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fca6 	bl	8001b04 <_Z16StartCalibrationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80021b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021bc:	4618      	mov	r0, r3
 80021be:	f008 ffad 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021c2:	e061      	b.n	8002288 <MessageHandler+0x338>
		case 'S':
			StopProgram();			break;
 80021c4:	f7ff f91a 	bl	80013fc <_Z11StopProgramv>
 80021c8:	e05e      	b.n	8002288 <MessageHandler+0x338>
		case 'x':
			GetDestination(&xStepper, s);					break;
 80021ca:	463a      	mov	r2, r7
 80021cc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f009 f8d4 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80021d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80021dc:	4619      	mov	r1, r3
 80021de:	482f      	ldr	r0, [pc, #188]	; (800229c <MessageHandler+0x34c>)
 80021e0:	f7ff fa42 	bl	8001668 <_Z14GetDestinationP7StepperNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80021e4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80021e8:	4618      	mov	r0, r3
 80021ea:	f008 ff97 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021ee:	e04b      	b.n	8002288 <MessageHandler+0x338>
		case 'z':
			GetDestination(&zStepper, s);					break;
 80021f0:	463a      	mov	r2, r7
 80021f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f009 f8c1 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80021fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002202:	4619      	mov	r1, r3
 8002204:	4826      	ldr	r0, [pc, #152]	; (80022a0 <MessageHandler+0x350>)
 8002206:	f7ff fa2f 	bl	8001668 <_Z14GetDestinationP7StepperNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800220a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800220e:	4618      	mov	r0, r3
 8002210:	f008 ff84 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002214:	e038      	b.n	8002288 <MessageHandler+0x338>
		case 'd':
			GetDoubleDestination(&zStepper, &cStepper, s);	break;
 8002216:	463a      	mov	r2, r7
 8002218:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f009 f8ae 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002224:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002228:	461a      	mov	r2, r3
 800222a:	491e      	ldr	r1, [pc, #120]	; (80022a4 <MessageHandler+0x354>)
 800222c:	481c      	ldr	r0, [pc, #112]	; (80022a0 <MessageHandler+0x350>)
 800222e:	f7ff fab3 	bl	8001798 <_Z20GetDoubleDestinationP7StepperS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002232:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002236:	4618      	mov	r0, r3
 8002238:	f008 ff70 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800223c:	e024      	b.n	8002288 <MessageHandler+0x338>
		case '9':
			ZeroAxis(s);			break;
 800223e:	463a      	mov	r2, r7
 8002240:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f009 f89a 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800224c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fc0d 	bl	8001a70 <_Z8ZeroAxisNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002256:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800225a:	4618      	mov	r0, r3
 800225c:	f008 ff5e 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002260:	e012      	b.n	8002288 <MessageHandler+0x338>
		case 'P':
			GetStartEnd(s);			break;
 8002262:	463a      	mov	r2, r7
 8002264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f009 f888 	bl	800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fb09 	bl	800188c <_Z11GetStartEndNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800227a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800227e:	4618      	mov	r0, r3
 8002280:	f008 ff4c 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002284:	e000      	b.n	8002288 <MessageHandler+0x338>
		default:
			break;
 8002286:	bf00      	nop
	std::string s;
 8002288:	463b      	mov	r3, r7
 800228a:	4618      	mov	r0, r3
 800228c:	f008 ff46 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}

}
 8002290:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200005d8 	.word	0x200005d8
 800229c:	200002f8 	.word	0x200002f8
 80022a0:	20000388 	.word	0x20000388
 80022a4:	20000418 	.word	0x20000418

080022a8 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	f00a f9cc 	bl	800c64c <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f00a f9c6 	bl	800c64c <__errno>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	f00a f9b8 	bl	800c64c <__errno>
 80022dc:	4603      	mov	r3, r0
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80022ee:	f00a f9ad 	bl	800c64c <__errno>
 80022f2:	4602      	mov	r2, r0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>:
	int _M_errno;
      } const __save_errno;

      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	ed87 0a01 	vstr	s0, [r7, #4]
 800230e:	7038      	strb	r0, [r7, #0]
 8002310:	2300      	movs	r3, #0
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800231e:	b590      	push	{r4, r7, lr}
 8002320:	b08b      	sub	sp, #44	; 0x2c
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ffb9 	bl	80022a8 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8002336:	f107 0218 	add.w	r2, r7, #24
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4611      	mov	r1, r2
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
 8002342:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d102      	bne.n	8002354 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 800234e:	68b8      	ldr	r0, [r7, #8]
 8002350:	f008 fd28 	bl	800ada4 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8002354:	f00a f97a 	bl	800c64c <__errno>
 8002358:	4603      	mov	r3, r0
 800235a:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800235c:	2b22      	cmp	r3, #34	; 0x22
 800235e:	d007      	beq.n	8002370 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8002360:	4620      	mov	r0, r4
 8002362:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002366:	f7ff ffcd 	bl	8002304 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x58>
 8002374:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x62>
	std::__throw_out_of_range(__name);
 800237a:	68b8      	ldr	r0, [r7, #8]
 800237c:	f008 fd18 	bl	800adb0 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	623b      	str	r3, [r7, #32]

      if (__idx)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x78>
	*__idx = __endptr - __str;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	461a      	mov	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	601a      	str	r2, [r3, #0]

      return __ret;
 8002396:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff97 	bl	80022d0 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 80023a2:	ee07 4a90 	vmov	s15, r4
    }
 80023a6:	eeb0 0a67 	vmov.f32	s0, s15
 80023aa:	372c      	adds	r7, #44	; 0x2c
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 80023ba:	2301      	movs	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	fb03 f303 	mul.w	r3, r3, r3
 80023c4:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	fb02 f303 	mul.w	r3, r2, r3
 80023d8:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d201      	bcs.n	80023e6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	e01d      	b.n	8002422 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d202      	bcs.n	80023f4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	e016      	b.n	8002422 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d202      	bcs.n	8002402 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3302      	adds	r3, #2
 8002400:	e00f      	b.n	8002422 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	429a      	cmp	r2, r3
 8002408:	d202      	bcs.n	8002410 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3303      	adds	r3, #3
 800240e:	e008      	b.n	8002422 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3304      	adds	r3, #4
 800241e:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8002420:	e7db      	b.n	80023da <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8002422:	4618      	mov	r0, r3
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	3b01      	subs	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b63      	cmp	r3, #99	; 0x63
 8002446:	d925      	bls.n	8002494 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 800244c:	fba3 1302 	umull	r1, r3, r3, r2
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	2164      	movs	r1, #100	; 0x64
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	440b      	add	r3, r1
 8002474:	4918      	ldr	r1, [pc, #96]	; (80024d8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8002476:	5c8a      	ldrb	r2, [r1, r2]
 8002478:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3b01      	subs	r3, #1
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	4915      	ldr	r1, [pc, #84]	; (80024d8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	440a      	add	r2, r1
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3b02      	subs	r3, #2
 8002490:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8002492:	e7d6      	b.n	8002442 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b09      	cmp	r3, #9
 8002498:	d910      	bls.n	80024bc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3301      	adds	r3, #1
 80024a8:	490b      	ldr	r1, [pc, #44]	; (80024d8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80024aa:	5c8a      	ldrb	r2, [r1, r2]
 80024ac:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4413      	add	r3, r2
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 80024ba:	e005      	b.n	80024c8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3330      	adds	r3, #48	; 0x30
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	701a      	strb	r2, [r3, #0]
    }
 80024c8:	bf00      	nop
 80024ca:	3724      	adds	r7, #36	; 0x24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	51eb851f 	.word	0x51eb851f
 80024d8:	0800f554 	.word	0x0800f554

080024dc <_ZNSt8__detail14__to_chars_lenImEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
      unsigned __n = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	fb03 f303 	mul.w	r3, r3, r3
 80024f0:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	60bb      	str	r3, [r7, #8]
	  if (__value < (unsigned)__base) return __n;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d201      	bcs.n	8002512 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x36>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	e01d      	b.n	800254e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	429a      	cmp	r2, r3
 8002518:	d202      	bcs.n	8002520 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x44>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	e016      	b.n	800254e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	d202      	bcs.n	800252e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x52>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3302      	adds	r3, #2
 800252c:	e00f      	b.n	800254e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	d202      	bcs.n	800253c <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x60>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3303      	adds	r3, #3
 800253a:	e008      	b.n	800254e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  __value /= __b4;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3304      	adds	r3, #4
 800254a:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 800254c:	e7db      	b.n	8002506 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x2a>
    }
 800254e:	4618      	mov	r0, r3
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
      unsigned __pos = __len - 1;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3b01      	subs	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b63      	cmp	r3, #99	; 0x63
 8002572:	d925      	bls.n	80025c0 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x64>
	  auto const __num = (__val % 100) * 2;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa4>)
 8002578:	fba3 1302 	umull	r1, r3, r3, r2
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	2164      	movs	r1, #100	; 0x64
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa4>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	440b      	add	r3, r1
 80025a0:	4918      	ldr	r1, [pc, #96]	; (8002604 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa8>)
 80025a2:	5c8a      	ldrb	r2, [r1, r2]
 80025a4:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4413      	add	r3, r2
 80025ae:	4915      	ldr	r1, [pc, #84]	; (8002604 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa8>)
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	440a      	add	r2, r1
 80025b4:	7812      	ldrb	r2, [r2, #0]
 80025b6:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	3b02      	subs	r3, #2
 80025bc:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80025be:	e7d6      	b.n	800256e <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x12>
      if (__val >= 10)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	d910      	bls.n	80025e8 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x8c>
	  auto const __num = __val * 2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3301      	adds	r3, #1
 80025d4:	490b      	ldr	r1, [pc, #44]	; (8002604 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa8>)
 80025d6:	5c8a      	ldrb	r2, [r1, r2]
 80025d8:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa8>)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4413      	add	r3, r2
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	701a      	strb	r2, [r3, #0]
    }
 80025e6:	e005      	b.n	80025f4 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	3330      	adds	r3, #48	; 0x30
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	701a      	strb	r2, [r3, #0]
    }
 80025f4:	bf00      	nop
 80025f6:	3724      	adds	r7, #36	; 0x24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	51eb851f 	.word	0x51eb851f
 8002604:	0800f620 	.word	0x0800f620

08002608 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEplEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	f107 020c 	add.w	r2, r7, #12
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f816 	bl	8002658 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS1_>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	f000 f819 	bl	8002678 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8002646:	4603      	mov	r3, r0
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <_Z41__static_initialization_and_destruction_0ii>:
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d115      	bne.n	80026cc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d110      	bne.n	80026cc <_Z41__static_initialization_and_destruction_0ii+0x3c>
std::string delimeter = "|";
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	4618      	mov	r0, r3
 80026b0:	f008 fb70 	bl	800ad94 <_ZNSaIcEC1Ev>
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	461a      	mov	r2, r3
 80026ba:	490c      	ldr	r1, [pc, #48]	; (80026ec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80026bc:	480c      	ldr	r0, [pc, #48]	; (80026f0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80026be:	f008 fe93 	bl	800b3e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	4618      	mov	r0, r3
 80026c8:	f008 fb65 	bl	800ad96 <_ZNSaIcED1Ev>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d107      	bne.n	80026e2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d8:	4293      	cmp	r3, r2
 80026da:	d102      	bne.n	80026e2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80026dc:	4804      	ldr	r0, [pc, #16]	; (80026f0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80026de:	f008 fd1d 	bl	800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	0800f548 	.word	0x0800f548
 80026f0:	200002dc 	.word	0x200002dc

080026f4 <_GLOBAL__sub_I__Z9delimeterB5cxx11>:
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7ff ffc7 	bl	8002690 <_Z41__static_initialization_and_destruction_0ii>
 8002702:	bd80      	pop	{r7, pc}

08002704 <_GLOBAL__sub_D__Z9delimeterB5cxx11>:
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
 8002708:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff ffbf 	bl	8002690 <_Z41__static_initialization_and_destruction_0ii>
 8002712:	bd80      	pop	{r7, pc}

08002714 <ChangePinState>:
  * 			@arg 0: ustawienie stanu niskiego
  *
  * @retval Brak
  */
void ChangePinState(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int _state)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	460b      	mov	r3, r1
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	817b      	strh	r3, [r7, #10]
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if(_state == 0)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <ChangePinState+0x1c>
	{
		GPIOx->BSRR = GPIO_Pin;
 8002728:	897a      	ldrh	r2, [r7, #10]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	619a      	str	r2, [r3, #24]
	}
	else
	{
		GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
	}
}
 800272e:	e003      	b.n	8002738 <ChangePinState+0x24>
		GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	041a      	lsls	r2, r3, #16
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	619a      	str	r2, [r3, #24]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <InitializeComponents>:
 *
 * @param  Brak
 * @retval Brak
 */
void InitializeComponents()
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 8002748:	480a      	ldr	r0, [pc, #40]	; (8002774 <InitializeComponents+0x30>)
 800274a:	f004 f8c8 	bl	80068de <HAL_ADC_Stop>

	InitializeSteppers();
 800274e:	f000 f9e5 	bl	8002b1c <InitializeSteppers>

	HAL_TIM_Encoder_Start_IT(&X_ENCODER_TIMER_HANDLE, TIM_CHANNEL_ALL);
 8002752:	213c      	movs	r1, #60	; 0x3c
 8002754:	4808      	ldr	r0, [pc, #32]	; (8002778 <InitializeComponents+0x34>)
 8002756:	f006 fe19 	bl	800938c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&Z_ENCODER_TIMER_HANDLE, TIM_CHANNEL_ALL);
 800275a:	213c      	movs	r1, #60	; 0x3c
 800275c:	4807      	ldr	r0, [pc, #28]	; (800277c <InitializeComponents+0x38>)
 800275e:	f006 fe15 	bl	800938c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&C_ENCODER_TIMER_HANDLE, TIM_CHANNEL_ALL);
 8002762:	213c      	movs	r1, #60	; 0x3c
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <InitializeComponents+0x3c>)
 8002766:	f006 fe11 	bl	800938c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start_IT(&MAIN_TIMER_HANDLE);
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <InitializeComponents+0x40>)
 800276c:	f006 fa9c 	bl	8008ca8 <HAL_TIM_Base_Start_IT>

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000670 	.word	0x20000670
 8002778:	2000071c 	.word	0x2000071c
 800277c:	20000764 	.word	0x20000764
 8002780:	200007ac 	.word	0x200007ac
 8002784:	200007f4 	.word	0x200007f4

08002788 <SetStep>:
 * @param  _step indeks tablic ..Steps[]
 *
 * @retval Brak
 */
void SetStep(int _step)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	static uint8_t _count = 0;
	switch (currentMeasurement.measType)
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <SetStep+0xcc>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d856      	bhi.n	8002846 <SetStep+0xbe>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <SetStep+0x18>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b5 	.word	0x080027b5
 80027a4:	080027c9 	.word	0x080027c9
 80027a8:	080027f1 	.word	0x080027f1
 80027ac:	08002805 	.word	0x08002805
 80027b0:	080027dd 	.word	0x080027dd
	{
	case LP:
		currentMeasurement.step = zSteps[_step];
 80027b4:	4a28      	ldr	r2, [pc, #160]	; (8002858 <SetStep+0xd0>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	4924      	ldr	r1, [pc, #144]	; (8002854 <SetStep+0xcc>)
 80027c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 80027c6:	e03e      	b.n	8002846 <SetStep+0xbe>
	case GD:
		currentMeasurement.step = cSteps[_step];
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <SetStep+0xd4>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	491f      	ldr	r1, [pc, #124]	; (8002854 <SetStep+0xcc>)
 80027d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 80027da:	e034      	b.n	8002846 <SetStep+0xbe>
	case XY:
		currentMeasurement.step = xSteps[_step];
 80027dc:	4a20      	ldr	r2, [pc, #128]	; (8002860 <SetStep+0xd8>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	491a      	ldr	r1, [pc, #104]	; (8002854 <SetStep+0xcc>)
 80027ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 80027ee:	e02a      	b.n	8002846 <SetStep+0xbe>
	case Spiral:
		currentMeasurement.step = zSteps[_step];
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <SetStep+0xd0>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	4915      	ldr	r1, [pc, #84]	; (8002854 <SetStep+0xcc>)
 80027fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8002802:	e020      	b.n	8002846 <SetStep+0xbe>
	case Cage:
		if (_count == 0)
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <SetStep+0xdc>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10f      	bne.n	800282c <SetStep+0xa4>
		{
			currentMeasurement.step = zSteps[_step];
 800280c:	4a12      	ldr	r2, [pc, #72]	; (8002858 <SetStep+0xd0>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	490e      	ldr	r1, [pc, #56]	; (8002854 <SetStep+0xcc>)
 800281a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			_count++;
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <SetStep+0xdc>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <SetStep+0xdc>)
 8002828:	701a      	strb	r2, [r3, #0]
		else
		{
			currentMeasurement.step2 = cSteps[_step];
			_count = 0;
		}
		break;
 800282a:	e00b      	b.n	8002844 <SetStep+0xbc>
			currentMeasurement.step2 = cSteps[_step];
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <SetStep+0xd4>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	4906      	ldr	r1, [pc, #24]	; (8002854 <SetStep+0xcc>)
 800283a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			_count = 0;
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <SetStep+0xdc>)
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
		break;
 8002844:	bf00      	nop
	}
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	200004e8 	.word	0x200004e8
 8002858:	20000048 	.word	0x20000048
 800285c:	20000090 	.word	0x20000090
 8002860:	20000000 	.word	0x20000000
 8002864:	200005d1 	.word	0x200005d1

08002868 <SetStepDirection>:
 *
 * @param  Brak
 * @retval Brak
 */
void SetStepDirection()
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
	switch (currentMeasurement.measType)
 8002870:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <SetStepDirection+0x14c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b04      	cmp	r3, #4
 8002876:	f200 8098 	bhi.w	80029aa <SetStepDirection+0x142>
 800287a:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <SetStepDirection+0x18>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002895 	.word	0x08002895
 8002884:	080028c7 	.word	0x080028c7
 8002888:	0800297f 	.word	0x0800297f
 800288c:	0800292b 	.word	0x0800292b
 8002890:	080028f9 	.word	0x080028f9
	{
	case LP:
		if (currentMeasurement.zStart > currentMeasurement.zEnd)
 8002894:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <SetStepDirection+0x14c>)
 8002896:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800289a:	4b46      	ldr	r3, [pc, #280]	; (80029b4 <SetStepDirection+0x14c>)
 800289c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80028a0:	f7fe f95a 	bl	8000b58 <__aeabi_dcmpgt>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d100      	bne.n	80028ac <SetStepDirection+0x44>
			currentMeasurement.step = -currentMeasurement.step;
		break;
 80028aa:	e07e      	b.n	80029aa <SetStepDirection+0x142>
			currentMeasurement.step = -currentMeasurement.step;
 80028ac:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <SetStepDirection+0x14c>)
 80028ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028b2:	613a      	str	r2, [r7, #16]
 80028b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <SetStepDirection+0x14c>)
 80028bc:	ed97 7b04 	vldr	d7, [r7, #16]
 80028c0:	ed83 7b02 	vstr	d7, [r3, #8]
		break;
 80028c4:	e071      	b.n	80029aa <SetStepDirection+0x142>
	case GD:
		if (currentMeasurement.cStart > currentMeasurement.cEnd)
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <SetStepDirection+0x14c>)
 80028c8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80028cc:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <SetStepDirection+0x14c>)
 80028ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80028d2:	f7fe f941 	bl	8000b58 <__aeabi_dcmpgt>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d100      	bne.n	80028de <SetStepDirection+0x76>
			currentMeasurement.step = -currentMeasurement.step;
		break;
 80028dc:	e065      	b.n	80029aa <SetStepDirection+0x142>
			currentMeasurement.step = -currentMeasurement.step;
 80028de:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <SetStepDirection+0x14c>)
 80028e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028e4:	60ba      	str	r2, [r7, #8]
 80028e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <SetStepDirection+0x14c>)
 80028ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80028f2:	ed83 7b02 	vstr	d7, [r3, #8]
		break;
 80028f6:	e058      	b.n	80029aa <SetStepDirection+0x142>
	case XY:
		if (currentMeasurement.xStart > currentMeasurement.xEnd)
 80028f8:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <SetStepDirection+0x14c>)
 80028fa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80028fe:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <SetStepDirection+0x14c>)
 8002900:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002904:	f7fe f928 	bl	8000b58 <__aeabi_dcmpgt>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d100      	bne.n	8002910 <SetStepDirection+0xa8>
			currentMeasurement.step = -currentMeasurement.step;
		break;
 800290e:	e04c      	b.n	80029aa <SetStepDirection+0x142>
			currentMeasurement.step = -currentMeasurement.step;
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <SetStepDirection+0x14c>)
 8002912:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002916:	603a      	str	r2, [r7, #0]
 8002918:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <SetStepDirection+0x14c>)
 8002920:	ed97 7b00 	vldr	d7, [r7]
 8002924:	ed83 7b02 	vstr	d7, [r3, #8]
		break;
 8002928:	e03f      	b.n	80029aa <SetStepDirection+0x142>
	case Cage:
		if (currentMeasurement.zStart > currentMeasurement.zEnd)
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <SetStepDirection+0x14c>)
 800292c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002930:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <SetStepDirection+0x14c>)
 8002932:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002936:	f7fe f90f 	bl	8000b58 <__aeabi_dcmpgt>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <SetStepDirection+0xea>
			currentMeasurement.step = -currentMeasurement.step;
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <SetStepDirection+0x14c>)
 8002942:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002946:	4692      	mov	sl, r2
 8002948:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <SetStepDirection+0x14c>)
 800294e:	e9c3 ab02 	strd	sl, fp, [r3, #8]
		if (currentMeasurement.cStart <= currentMeasurement.cEnd)
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <SetStepDirection+0x14c>)
 8002954:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002958:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <SetStepDirection+0x14c>)
 800295a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800295e:	f7fe f8e7 	bl	8000b30 <__aeabi_dcmple>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d100      	bne.n	800296a <SetStepDirection+0x102>
			currentMeasurement.step2 = -currentMeasurement.step2;
		break;
 8002968:	e01f      	b.n	80029aa <SetStepDirection+0x142>
			currentMeasurement.step2 = -currentMeasurement.step2;
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <SetStepDirection+0x14c>)
 800296c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002970:	4690      	mov	r8, r2
 8002972:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <SetStepDirection+0x14c>)
 8002978:	e9c3 8904 	strd	r8, r9, [r3, #16]
		break;
 800297c:	e015      	b.n	80029aa <SetStepDirection+0x142>
	case Spiral:
		if (currentMeasurement.zStart > currentMeasurement.zEnd)
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <SetStepDirection+0x14c>)
 8002980:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <SetStepDirection+0x14c>)
 8002986:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800298a:	f7fe f8e5 	bl	8000b58 <__aeabi_dcmpgt>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d100      	bne.n	8002996 <SetStepDirection+0x12e>
			currentMeasurement.step = -currentMeasurement.step;
		break;
 8002994:	e008      	b.n	80029a8 <SetStepDirection+0x140>
			currentMeasurement.step = -currentMeasurement.step;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <SetStepDirection+0x14c>)
 8002998:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800299c:	4614      	mov	r4, r2
 800299e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SetStepDirection+0x14c>)
 80029a4:	e9c3 4502 	strd	r4, r5, [r3, #8]
		break;
 80029a8:	bf00      	nop
	}
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b4:	200004e8 	.word	0x200004e8

080029b8 <ADCHandler>:
 *
 * @param  Brak
 * @retval Brak
 */
void ADCHandler()
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	if (workMode == automatic && adcData >= 4094)
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <ADCHandler+0x34>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d111      	bne.n	80029e8 <ADCHandler+0x30>
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <ADCHandler+0x38>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f640 72fd 	movw	r2, #4093	; 0xffd
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d90b      	bls.n	80029e8 <ADCHandler+0x30>
	{
		HardStop(&xStepper);
 80029d0:	4808      	ldr	r0, [pc, #32]	; (80029f4 <ADCHandler+0x3c>)
 80029d2:	f000 fa23 	bl	8002e1c <HardStop>
		HardStop(&zStepper);
 80029d6:	4808      	ldr	r0, [pc, #32]	; (80029f8 <ADCHandler+0x40>)
 80029d8:	f000 fa20 	bl	8002e1c <HardStop>
		HardStop(&cStepper);
 80029dc:	4807      	ldr	r0, [pc, #28]	; (80029fc <ADCHandler+0x44>)
 80029de:	f000 fa1d 	bl	8002e1c <HardStop>
		workMode = error;
 80029e2:	4b02      	ldr	r3, [pc, #8]	; (80029ec <ADCHandler+0x34>)
 80029e4:	2204      	movs	r2, #4
 80029e6:	701a      	strb	r2, [r3, #0]
	}
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200005d0 	.word	0x200005d0
 80029f0:	200005cc 	.word	0x200005cc
 80029f4:	200002f8 	.word	0x200002f8
 80029f8:	20000388 	.word	0x20000388
 80029fc:	20000418 	.word	0x20000418

08002a00 <StepperInit>:
		uint16_t PinStep,
		GPIO_TypeDef* PortDir,
		uint16_t PinDir,
		StepperAxis Axis,
		TIM_TypeDef* Encoder)
{
 8002a00:	b082      	sub	sp, #8
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
 8002a0c:	f107 0110 	add.w	r1, r7, #16
 8002a10:	e881 000c 	stmia.w	r1, {r2, r3}
	_stepper->StepperTimer = StepperTimer;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	601a      	str	r2, [r3, #0]
	_stepper->TimerHandle = TimerHandle;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	f107 0110 	add.w	r1, r7, #16
 8002a22:	2248      	movs	r2, #72	; 0x48
 8002a24:	4618      	mov	r0, r3
 8002a26:	f009 fe5b 	bl	800c6e0 <memcpy>

	_stepper->PinStep = PinStep;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002a30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	_stepper->PortDir = PortDir;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a38:	651a      	str	r2, [r3, #80]	; 0x50
	_stepper->PinDir = PinDir;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8002a40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	_stepper->Axis = Axis;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8002a4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	_stepper->State = stopped;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	_stepper->LastState = stopped;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	//_stepper->StepperTimer->CR1 = 0;
	//HAL_TIM_PWM_Start_IT(&TimerHandle, TIM_CHANNEL_1);

	ChangeStepperSpeed(_stepper, manualSpeed);
 8002a5e:	2104      	movs	r1, #4
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f9eb 	bl	8002e3c <ChangeStepperSpeed>

	_stepper->Steps = 0;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	65da      	str	r2, [r3, #92]	; 0x5c

	_stepper->Encoder = Encoder;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a70:	661a      	str	r2, [r3, #96]	; 0x60

	_stepper->currentPosition = 0.0;
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	_stepper->targetPosition = 0.0;
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	_stepper->lastSentPosition = _stepper->currentPosition;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	_stepper->changePosition = FALSE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	_stepper->inPosition = FALSE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	_stepper->isLocked = FALSE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a

}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002abc:	b002      	add	sp, #8
 8002abe:	4770      	bx	lr

08002ac0 <StepperUVInit>:
		GPIO_TypeDef* PortStep,
		uint16_t PinStep,
		GPIO_TypeDef* PortDir,
		uint16_t PinDir,
		StepperAxis Axis)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	80fb      	strh	r3, [r7, #6]
	_stepper->PortStep = PortStep;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	601a      	str	r2, [r3, #0]
	_stepper->PinStep = PinStep;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	809a      	strh	r2, [r3, #4]

	_stepper->PortDir = PortDir;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	609a      	str	r2, [r3, #8]
	_stepper->PinDir = PinDir;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8b3a      	ldrh	r2, [r7, #24]
 8002ae6:	819a      	strh	r2, [r3, #12]

	_stepper->Axis = Axis;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	7f3a      	ldrb	r2, [r7, #28]
 8002aec:	739a      	strb	r2, [r3, #14]

	_stepper->State = stopped;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	73da      	strb	r2, [r3, #15]
	_stepper->LastState = stopped;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	741a      	strb	r2, [r3, #16]

	_stepper->Speed = speed1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b00:	825a      	strh	r2, [r3, #18]
	_stepper->Tick = 0;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	829a      	strh	r2, [r3, #20]

	_stepper->Steps = 0;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <InitializeSteppers>:
 *
 * @param  Brak
 * @retval Brak
 */
void InitializeSteppers()
{
 8002b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1e:	b097      	sub	sp, #92	; 0x5c
 8002b20:	af16      	add	r7, sp, #88	; 0x58

	StepperInit(&xStepper, X_TIMER, X_TIMER_HANDLE, X_STEP_Pin, X_DIR_GPIO_Port, X_DIR_Pin, X, X_ENCODER_TIMER);
 8002b22:	4e3c      	ldr	r6, [pc, #240]	; (8002c14 <InitializeSteppers+0xf8>)
 8002b24:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <InitializeSteppers+0xfc>)
 8002b26:	9314      	str	r3, [sp, #80]	; 0x50
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	9312      	str	r3, [sp, #72]	; 0x48
 8002b30:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <InitializeSteppers+0x100>)
 8002b32:	9311      	str	r3, [sp, #68]	; 0x44
 8002b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b38:	9310      	str	r3, [sp, #64]	; 0x40
 8002b3a:	466d      	mov	r5, sp
 8002b3c:	f106 0408 	add.w	r4, r6, #8
 8002b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b54:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002b58:	4931      	ldr	r1, [pc, #196]	; (8002c20 <InitializeSteppers+0x104>)
 8002b5a:	4832      	ldr	r0, [pc, #200]	; (8002c24 <InitializeSteppers+0x108>)
 8002b5c:	f7ff ff50 	bl	8002a00 <StepperInit>
	StepperInit(&zStepper, Z_TIMER, Z_TIMER_HANDLE, Z_STEP_Pin, Z_DIR_GPIO_Port, Z_DIR_Pin, Z, Z_ENCODER_TIMER);
 8002b60:	4e31      	ldr	r6, [pc, #196]	; (8002c28 <InitializeSteppers+0x10c>)
 8002b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b66:	9314      	str	r3, [sp, #80]	; 0x50
 8002b68:	2301      	movs	r3, #1
 8002b6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	9312      	str	r3, [sp, #72]	; 0x48
 8002b70:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <InitializeSteppers+0x100>)
 8002b72:	9311      	str	r3, [sp, #68]	; 0x44
 8002b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b78:	9310      	str	r3, [sp, #64]	; 0x40
 8002b7a:	466d      	mov	r5, sp
 8002b7c:	f106 0408 	add.w	r4, r6, #8
 8002b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b94:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002b98:	4924      	ldr	r1, [pc, #144]	; (8002c2c <InitializeSteppers+0x110>)
 8002b9a:	4825      	ldr	r0, [pc, #148]	; (8002c30 <InitializeSteppers+0x114>)
 8002b9c:	f7ff ff30 	bl	8002a00 <StepperInit>
	StepperInit(&cStepper, C_TIMER, C_TIMER_HANDLE, C_STEP_Pin, C_DIR_GPIO_Port, C_DIR_Pin, C, C_ENCODER_TIMER);
 8002ba0:	4e24      	ldr	r6, [pc, #144]	; (8002c34 <InitializeSteppers+0x118>)
 8002ba2:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <InitializeSteppers+0x11c>)
 8002ba4:	9314      	str	r3, [sp, #80]	; 0x50
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	9313      	str	r3, [sp, #76]	; 0x4c
 8002baa:	2304      	movs	r3, #4
 8002bac:	9312      	str	r3, [sp, #72]	; 0x48
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <InitializeSteppers+0x100>)
 8002bb0:	9311      	str	r3, [sp, #68]	; 0x44
 8002bb2:	2340      	movs	r3, #64	; 0x40
 8002bb4:	9310      	str	r3, [sp, #64]	; 0x40
 8002bb6:	466d      	mov	r5, sp
 8002bb8:	f106 0408 	add.w	r4, r6, #8
 8002bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bcc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002bd0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002bd4:	4919      	ldr	r1, [pc, #100]	; (8002c3c <InitializeSteppers+0x120>)
 8002bd6:	481a      	ldr	r0, [pc, #104]	; (8002c40 <InitializeSteppers+0x124>)
 8002bd8:	f7ff ff12 	bl	8002a00 <StepperInit>
	//cStepper.Steps = 10000;

	StepperUVInit(&uStepper, U_STEP_GPIO_Port, U_STEP_Pin, U_DIR_GPIO_Port, U_DIR_Pin, U);
 8002bdc:	2303      	movs	r3, #3
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <InitializeSteppers+0x100>)
 8002be8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bec:	490b      	ldr	r1, [pc, #44]	; (8002c1c <InitializeSteppers+0x100>)
 8002bee:	4815      	ldr	r0, [pc, #84]	; (8002c44 <InitializeSteppers+0x128>)
 8002bf0:	f7ff ff66 	bl	8002ac0 <StepperUVInit>
	StepperUVInit(&vStepper, V_STEP_GPIO_Port, V_STEP_Pin, V_DIR_GPIO_Port, V_DIR_Pin, V);
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <InitializeSteppers+0x100>)
 8002c00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c04:	4905      	ldr	r1, [pc, #20]	; (8002c1c <InitializeSteppers+0x100>)
 8002c06:	4810      	ldr	r0, [pc, #64]	; (8002c48 <InitializeSteppers+0x12c>)
 8002c08:	f7ff ff5a 	bl	8002ac0 <StepperUVInit>
}
 8002c0c:	bf00      	nop
 8002c0e:	3704      	adds	r7, #4
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c14:	20000884 	.word	0x20000884
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40020400 	.word	0x40020400
 8002c20:	40014400 	.word	0x40014400
 8002c24:	200002f8 	.word	0x200002f8
 8002c28:	200008cc 	.word	0x200008cc
 8002c2c:	40014800 	.word	0x40014800
 8002c30:	20000388 	.word	0x20000388
 8002c34:	20000914 	.word	0x20000914
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40001c00 	.word	0x40001c00
 8002c40:	20000418 	.word	0x20000418
 8002c44:	200004a8 	.word	0x200004a8
 8002c48:	200004c8 	.word	0x200004c8

08002c4c <ChangeStepperState>:
 * @param  _state zadany stan silnika
 *
 * @retval Brak
 */
void ChangeStepperState(struct Stepper *_stepper, StepperState _state)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
	_stepper->State = _state;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	if (_state != stopped)
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <ChangeStepperState+0x22>
		_stepper->LastState = _state;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	switch(_state)
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d002      	beq.n	8002c7a <ChangeStepperState+0x2e>
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d010      	beq.n	8002c9a <ChangeStepperState+0x4e>
 8002c78:	e01f      	b.n	8002cba <ChangeStepperState+0x6e>
	{
		case movingPlus:
			ChangePinState(_stepper->PortDir, _stepper->PinDir, 1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c84:	2201      	movs	r2, #1
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7ff fd44 	bl	8002714 <ChangePinState>
			HAL_TIM_PWM_Start_IT(&_stepper->TimerHandle, TIM_CHANNEL_1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f006 f900 	bl	8008e98 <HAL_TIM_PWM_Start_IT>
			break;
 8002c98:	e016      	b.n	8002cc8 <ChangeStepperState+0x7c>

		case movingMinus:
			ChangePinState(_stepper->PortDir, _stepper->PinDir, 0);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f7ff fd34 	bl	8002714 <ChangePinState>
			HAL_TIM_PWM_Start_IT(&_stepper->TimerHandle, TIM_CHANNEL_1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f006 f8f0 	bl	8008e98 <HAL_TIM_PWM_Start_IT>
			break;
 8002cb8:	e006      	b.n	8002cc8 <ChangeStepperState+0x7c>

		default:
			HAL_TIM_PWM_Stop_IT(&_stepper->TimerHandle, TIM_CHANNEL_1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f006 f9ff 	bl	80090c4 <HAL_TIM_PWM_Stop_IT>
			break;
 8002cc6:	bf00      	nop
	}
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <ChangeStepperUVState>:
 * @param  _state zadany stan silnika
 *
 * @retval Brak
 */
void ChangeStepperUVState(struct StepperUV *_stepper, StepperState _state)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
	_stepper->State = _state;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	73da      	strb	r2, [r3, #15]

	if (_state != stopped)
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <ChangeStepperUVState+0x1e>
		_stepper->LastState = _state;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	741a      	strb	r2, [r3, #16]

	switch(_state)
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d002      	beq.n	8002cfa <ChangeStepperUVState+0x2a>
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d00c      	beq.n	8002d12 <ChangeStepperUVState+0x42>
 8002cf8:	e017      	b.n	8002d2a <ChangeStepperUVState+0x5a>
	{
		case movingPlus:
			ChangePinState(_stepper->PortDir, _stepper->PinDir, 1);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6898      	ldr	r0, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	899b      	ldrh	r3, [r3, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	4619      	mov	r1, r3
 8002d06:	f7ff fd05 	bl	8002714 <ChangePinState>
			HAL_TIM_Base_Start_IT(&UV_TIMER_HANDLE);
 8002d0a:	480c      	ldr	r0, [pc, #48]	; (8002d3c <ChangeStepperUVState+0x6c>)
 8002d0c:	f005 ffcc 	bl	8008ca8 <HAL_TIM_Base_Start_IT>
			break;
 8002d10:	e00f      	b.n	8002d32 <ChangeStepperUVState+0x62>

		case movingMinus:
			ChangePinState(_stepper->PortDir, _stepper->PinDir, 0);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6898      	ldr	r0, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	899b      	ldrh	r3, [r3, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f7ff fcf9 	bl	8002714 <ChangePinState>
			HAL_TIM_Base_Start_IT(&UV_TIMER_HANDLE);
 8002d22:	4806      	ldr	r0, [pc, #24]	; (8002d3c <ChangeStepperUVState+0x6c>)
 8002d24:	f005 ffc0 	bl	8008ca8 <HAL_TIM_Base_Start_IT>
			break;
 8002d28:	e003      	b.n	8002d32 <ChangeStepperUVState+0x62>

		default:
			HAL_TIM_Base_Stop_IT(&UV_TIMER_HANDLE);
 8002d2a:	4804      	ldr	r0, [pc, #16]	; (8002d3c <ChangeStepperUVState+0x6c>)
 8002d2c:	f006 f82c 	bl	8008d88 <HAL_TIM_Base_Stop_IT>
			break;
 8002d30:	bf00      	nop
	}
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000083c 	.word	0x2000083c

08002d40 <MoveUVStepper>:
 * @param  _target zadana pozycja
 *
 * @retval Brak
 */
void MoveUVStepper(struct StepperUV *_stepper, double _target)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	ed87 0b00 	vstr	d0, [r7]
	_stepper->Steps = 0;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]
	_stepper->StepsToGo = (int32_t)(_target * 1000.0);
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <MoveUVStepper+0x70>)
 8002d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d5c:	f7fd fc6c 	bl	8000638 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fd ff16 	bl	8000b98 <__aeabi_d2iz>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	61da      	str	r2, [r3, #28]
	if (_stepper->StepsToGo < _stepper->Steps)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	da04      	bge.n	8002d88 <MoveUVStepper+0x48>
		ChangeStepperUVState(_stepper, movingMinus);
 8002d7e:	2102      	movs	r1, #2
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff ffa5 	bl	8002cd0 <ChangeStepperUVState>
	else if (_stepper->StepsToGo > _stepper->Steps)
		ChangeStepperUVState(_stepper, movingPlus);
	else
		ChangeStepperUVState(_stepper, stopped);
}
 8002d86:	e00e      	b.n	8002da6 <MoveUVStepper+0x66>
	else if (_stepper->StepsToGo > _stepper->Steps)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dd04      	ble.n	8002d9e <MoveUVStepper+0x5e>
		ChangeStepperUVState(_stepper, movingPlus);
 8002d94:	2101      	movs	r1, #1
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7ff ff9a 	bl	8002cd0 <ChangeStepperUVState>
}
 8002d9c:	e003      	b.n	8002da6 <MoveUVStepper+0x66>
		ChangeStepperUVState(_stepper, stopped);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff ff95 	bl	8002cd0 <ChangeStepperUVState>
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	408f4000 	.word	0x408f4000

08002db4 <StopStepper>:
 *
 * @param  _stepper wskaznik do zadeklarowanej struktury silnika głównego
 * @retval Brak
 */
void StopStepper(struct Stepper *_stepper)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	ChangeStepperState(_stepper, stopped);
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ff44 	bl	8002c4c <ChangeStepperState>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <GoPlus>:
 *
 * @param  _stepper wskaznik do zadeklarowanej struktury silnika głównego
 * @retval Brak
 */
void GoPlus(struct Stepper* _stepper)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	ChangeStepperState(_stepper, movingPlus);
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ff38 	bl	8002c4c <ChangeStepperState>
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <GoMinus>:
 *
 * @param  _stepper wskaznik do zadeklarowanej struktury silnika głównego
 * @retval Brak
 */
void GoMinus(struct Stepper* _stepper)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	ChangeStepperState(_stepper, movingMinus);
 8002dec:	2102      	movs	r1, #2
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ff2c 	bl	8002c4c <ChangeStepperState>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <StepperLock>:
 * @param  _state	zadany stan parametru isLocked - TRUE - zablokowany, FALSE - odblokowany
 *
 * @retval Brak
 */
void StepperLock(struct Stepper* _stepper, Cbool _state)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
	_stepper->isLocked = _state;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HardStop>:
 *
 * @param  _stepper wskaznik do zadeklarowanej struktury silnika głównego
 * @retval Brak
 */
void HardStop(struct Stepper* _stepper)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	_stepper->changePosition = FALSE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	StopStepper(_stepper);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ffc1 	bl	8002db4 <StopStepper>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <ChangeStepperSpeed>:
 * @param  _speed	wybrana prędkość pomiaru
 *
 * @retval Brak
 */
void ChangeStepperSpeed(struct Stepper *_stepper, MeasurementSpeed _speed)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
	switch (_stepper->Axis)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d068      	beq.n	8002f24 <ChangeStepperSpeed+0xe8>
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	f300 8093 	bgt.w	8002f7e <ChangeStepperSpeed+0x142>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <ChangeStepperSpeed+0x26>
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d02d      	beq.n	8002ebc <ChangeStepperSpeed+0x80>
			_stepper->Speed = 200;	break;
			break;
		}
		break;
	default:
		break;
 8002e60:	e08d      	b.n	8002f7e <ChangeStepperSpeed+0x142>
		switch (_speed)
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	f200 808c 	bhi.w	8002f82 <ChangeStepperSpeed+0x146>
 8002e6a:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <ChangeStepperSpeed+0x34>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002e85 	.word	0x08002e85
 8002e74:	08002e91 	.word	0x08002e91
 8002e78:	08002e9d 	.word	0x08002e9d
 8002e7c:	08002ea7 	.word	0x08002ea7
 8002e80:	08002eb1 	.word	0x08002eb1
			_stepper->Speed = 1000;	break;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002e8e:	e014      	b.n	8002eba <ChangeStepperSpeed+0x7e>
			_stepper->Speed = 500;	break;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002e9a:	e00e      	b.n	8002eba <ChangeStepperSpeed+0x7e>
			_stepper->Speed = 200;	break;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	22c8      	movs	r2, #200	; 0xc8
 8002ea0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002ea4:	e009      	b.n	8002eba <ChangeStepperSpeed+0x7e>
			_stepper->Speed = 100;	break;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2264      	movs	r2, #100	; 0x64
 8002eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002eae:	e004      	b.n	8002eba <ChangeStepperSpeed+0x7e>
			_stepper->Speed = 100;	break;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2264      	movs	r2, #100	; 0x64
 8002eb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002eb8:	bf00      	nop
		break;
 8002eba:	e062      	b.n	8002f82 <ChangeStepperSpeed+0x146>
		switch (_speed)
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d861      	bhi.n	8002f86 <ChangeStepperSpeed+0x14a>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <ChangeStepperSpeed+0x8c>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002edd 	.word	0x08002edd
 8002ecc:	08002ee9 	.word	0x08002ee9
 8002ed0:	08002ef5 	.word	0x08002ef5
 8002ed4:	08002eff 	.word	0x08002eff
 8002ed8:	08002f11 	.word	0x08002f11
			_stepper->Speed = 2000;	break;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002ee6:	e01c      	b.n	8002f22 <ChangeStepperSpeed+0xe6>
			_stepper->Speed = 1000;	break;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002eee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002ef2:	e016      	b.n	8002f22 <ChangeStepperSpeed+0xe6>
			_stepper->Speed = 130;	break;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2282      	movs	r2, #130	; 0x82
 8002ef8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002efc:	e011      	b.n	8002f22 <ChangeStepperSpeed+0xe6>
			_stepper->StepperTimer->CCR1 = 15;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	220f      	movs	r2, #15
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34
			_stepper->Speed = 32;	break;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002f0e:	e008      	b.n	8002f22 <ChangeStepperSpeed+0xe6>
			_stepper->Speed = 100;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2264      	movs	r2, #100	; 0x64
 8002f14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			_stepper->StepperTimer->CCR1 = 50;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2232      	movs	r2, #50	; 0x32
 8002f1e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002f20:	bf00      	nop
		break;
 8002f22:	e030      	b.n	8002f86 <ChangeStepperSpeed+0x14a>
		switch (_speed)
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d82f      	bhi.n	8002f8a <ChangeStepperSpeed+0x14e>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <ChangeStepperSpeed+0xf4>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f45 	.word	0x08002f45
 8002f34:	08002f51 	.word	0x08002f51
 8002f38:	08002f5d 	.word	0x08002f5d
 8002f3c:	08002f69 	.word	0x08002f69
 8002f40:	08002f73 	.word	0x08002f73
			_stepper->Speed = 3000;	break;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002f4e:	e015      	b.n	8002f7c <ChangeStepperSpeed+0x140>
			_stepper->Speed = 1000;	break;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002f5a:	e00f      	b.n	8002f7c <ChangeStepperSpeed+0x140>
			_stepper->Speed = 500;	break;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002f66:	e009      	b.n	8002f7c <ChangeStepperSpeed+0x140>
			_stepper->Speed = 250;	break;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	22fa      	movs	r2, #250	; 0xfa
 8002f6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002f70:	e004      	b.n	8002f7c <ChangeStepperSpeed+0x140>
			_stepper->Speed = 200;	break;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	22c8      	movs	r2, #200	; 0xc8
 8002f76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002f7a:	bf00      	nop
		break;
 8002f7c:	e005      	b.n	8002f8a <ChangeStepperSpeed+0x14e>
		break;
 8002f7e:	bf00      	nop
 8002f80:	e004      	b.n	8002f8c <ChangeStepperSpeed+0x150>
		break;
 8002f82:	bf00      	nop
 8002f84:	e002      	b.n	8002f8c <ChangeStepperSpeed+0x150>
		break;
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <ChangeStepperSpeed+0x150>
		break;
 8002f8a:	bf00      	nop
	}
	_stepper->StepperTimer->ARR = _stepper->Speed - 1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f92:	1e5a      	subs	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop

08002fa8 <MoveStepperToPosition>:
 * @param  _position	zadana pozycja, do której ma udać się głowica lub obrócić stół obrotowy
 *
 * @retval Brak
 */
void MoveStepperToPosition(struct Stepper* _stepper, double _position)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	ed87 0b00 	vstr	d0, [r7]
	_stepper->lastPosition = _stepper->currentPosition;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	_stepper->targetPosition = _position;
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	_stepper->changePosition = TRUE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <ReadCurrentPositions>:
 *
 * @param  Brak
 * @retval Brak
 */
void ReadCurrentPositions()
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	zStepper.currentPosition = (double)(Z_ENCODER_TIMER->CNT) / 2000.0f;		// [mm]
	cStepper.currentPosition = (double)(C_ENCODER_TIMER->CNT) * 0.018f;		// [stopnie]
	*/

	//SIMULATED
	xStepper.currentPosition = (double)(xStepper.Steps) * 0.00025f;			//mm
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <ReadCurrentPositions+0x80>)
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fabb 	bl	8000564 <__aeabi_i2d>
 8002fee:	a316      	add	r3, pc, #88	; (adr r3, 8003048 <ReadCurrentPositions+0x68>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fb20 	bl	8000638 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4918      	ldr	r1, [pc, #96]	; (8003060 <ReadCurrentPositions+0x80>)
 8002ffe:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	zStepper.currentPosition = (double)(zStepper.Steps) * 0.000390625f;		//mm
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <ReadCurrentPositions+0x84>)
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd faac 	bl	8000564 <__aeabi_i2d>
 800300c:	a310      	add	r3, pc, #64	; (adr r3, 8003050 <ReadCurrentPositions+0x70>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd fb11 	bl	8000638 <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4912      	ldr	r1, [pc, #72]	; (8003064 <ReadCurrentPositions+0x84>)
 800301c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	cStepper.currentPosition = (double)(cStepper.Steps) * 0.018f;			//STOPNIE
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <ReadCurrentPositions+0x88>)
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fa9d 	bl	8000564 <__aeabi_i2d>
 800302a:	a30b      	add	r3, pc, #44	; (adr r3, 8003058 <ReadCurrentPositions+0x78>)
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f7fd fb02 	bl	8000638 <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	490b      	ldr	r1, [pc, #44]	; (8003068 <ReadCurrentPositions+0x88>)
 800303a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	f3af 8000 	nop.w
 8003048:	e0000000 	.word	0xe0000000
 800304c:	3f30624d 	.word	0x3f30624d
 8003050:	a0000000 	.word	0xa0000000
 8003054:	3f399999 	.word	0x3f399999
 8003058:	80000000 	.word	0x80000000
 800305c:	3f926e97 	.word	0x3f926e97
 8003060:	200002f8 	.word	0x200002f8
 8003064:	20000388 	.word	0x20000388
 8003068:	20000418 	.word	0x20000418
 800306c:	00000000 	.word	0x00000000

08003070 <MovementHandler>:
 *
 * @param  _stepper 	wskaznik do zadeklarowanej struktury silnika głównego
 * @retval Brak
 */
void MovementHandler(struct Stepper *_stepper)
{
 8003070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
	switch (_stepper->Axis)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003080:	2b02      	cmp	r3, #2
 8003082:	f000 80ba 	beq.w	80031fa <MovementHandler+0x18a>
 8003086:	2b02      	cmp	r3, #2
 8003088:	f300 810b 	bgt.w	80032a2 <MovementHandler+0x232>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <MovementHandler+0x26>
 8003090:	2b01      	cmp	r3, #1
 8003092:	d055      	beq.n	8003140 <MovementHandler+0xd0>
				_stepper->changePosition = FALSE;
			}
		}
		break;
	default:
		break;
 8003094:	e105      	b.n	80032a2 <MovementHandler+0x232>
		if (_stepper->changePosition == TRUE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800309c:	2b01      	cmp	r3, #1
 800309e:	f040 8102 	bne.w	80032a6 <MovementHandler+0x236>
			delta = _stepper->currentPosition - _stepper->targetPosition;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80030ae:	f7fd f90b 	bl	80002c8 <__aeabi_dsub>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4992      	ldr	r1, [pc, #584]	; (8003300 <MovementHandler+0x290>)
 80030b8:	e9c1 2300 	strd	r2, r3, [r1]
			if (fabs(delta) < 0.01)
 80030bc:	4b90      	ldr	r3, [pc, #576]	; (8003300 <MovementHandler+0x290>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	4692      	mov	sl, r2
 80030c4:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80030c8:	a37d      	add	r3, pc, #500	; (adr r3, 80032c0 <MovementHandler+0x250>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	4650      	mov	r0, sl
 80030d0:	4659      	mov	r1, fp
 80030d2:	f7fd fd23 	bl	8000b1c <__aeabi_dcmplt>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <MovementHandler+0x76>
				_stepper->StepperTimer->ARR = 999;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
			if (delta > 0.00015) 			//jeżeli docelowa pozycja jest w minus
 80030e6:	4b86      	ldr	r3, [pc, #536]	; (8003300 <MovementHandler+0x290>)
 80030e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ec:	a376      	add	r3, pc, #472	; (adr r3, 80032c8 <MovementHandler+0x258>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f7fd fd31 	bl	8000b58 <__aeabi_dcmpgt>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <MovementHandler+0x94>
				GoMinus(_stepper);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fe71 	bl	8002de4 <GoMinus>
		break;
 8003102:	e0d0      	b.n	80032a6 <MovementHandler+0x236>
			else if (delta < -0.00015)
 8003104:	4b7e      	ldr	r3, [pc, #504]	; (8003300 <MovementHandler+0x290>)
 8003106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800310a:	a371      	add	r3, pc, #452	; (adr r3, 80032d0 <MovementHandler+0x260>)
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f7fd fd04 	bl	8000b1c <__aeabi_dcmplt>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <MovementHandler+0xb2>
				GoPlus(_stepper);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fe56 	bl	8002dcc <GoPlus>
		break;
 8003120:	e0c1      	b.n	80032a6 <MovementHandler+0x236>
				StopStepper(_stepper);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff fe46 	bl	8002db4 <StopStepper>
				_stepper->StepperTimer->ARR = _stepper->Speed - 1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800312e:	1e5a      	subs	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
				_stepper->changePosition = FALSE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		break;
 800313e:	e0b2      	b.n	80032a6 <MovementHandler+0x236>
		if (_stepper->changePosition == TRUE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003146:	2b01      	cmp	r3, #1
 8003148:	f040 80af 	bne.w	80032aa <MovementHandler+0x23a>
			delta = _stepper->currentPosition - _stepper->targetPosition;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003158:	f7fd f8b6 	bl	80002c8 <__aeabi_dsub>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4967      	ldr	r1, [pc, #412]	; (8003300 <MovementHandler+0x290>)
 8003162:	e9c1 2300 	strd	r2, r3, [r1]
			if (fabs(delta) < 0.08  && (currentMeasurement.measType != Spiral && workMode == automatic))
 8003166:	4b66      	ldr	r3, [pc, #408]	; (8003300 <MovementHandler+0x290>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	4690      	mov	r8, r2
 800316e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003172:	a359      	add	r3, pc, #356	; (adr r3, 80032d8 <MovementHandler+0x268>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	4640      	mov	r0, r8
 800317a:	4649      	mov	r1, r9
 800317c:	f7fd fcce 	bl	8000b1c <__aeabi_dcmplt>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <MovementHandler+0x130>
 8003186:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <MovementHandler+0x294>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d008      	beq.n	80031a0 <MovementHandler+0x130>
 800318e:	4b5e      	ldr	r3, [pc, #376]	; (8003308 <MovementHandler+0x298>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d104      	bne.n	80031a0 <MovementHandler+0x130>
				_stepper->StepperTimer->ARR = 1999;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c
			if (delta > 0.0002) 			//jeżeli docelowa pozycja jest w minus
 80031a0:	4b57      	ldr	r3, [pc, #348]	; (8003300 <MovementHandler+0x290>)
 80031a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031a6:	a34e      	add	r3, pc, #312	; (adr r3, 80032e0 <MovementHandler+0x270>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f7fd fcd4 	bl	8000b58 <__aeabi_dcmpgt>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <MovementHandler+0x14e>
				GoMinus(_stepper);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fe14 	bl	8002de4 <GoMinus>
		break;
 80031bc:	e075      	b.n	80032aa <MovementHandler+0x23a>
			else if (delta < -0.0002)
 80031be:	4b50      	ldr	r3, [pc, #320]	; (8003300 <MovementHandler+0x290>)
 80031c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c4:	a348      	add	r3, pc, #288	; (adr r3, 80032e8 <MovementHandler+0x278>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fd fca7 	bl	8000b1c <__aeabi_dcmplt>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <MovementHandler+0x16c>
				GoPlus(_stepper);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fdf9 	bl	8002dcc <GoPlus>
		break;
 80031da:	e066      	b.n	80032aa <MovementHandler+0x23a>
				StopStepper(_stepper);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fde9 	bl	8002db4 <StopStepper>
				_stepper->StepperTimer->ARR = _stepper->Speed - 1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031e8:	1e5a      	subs	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
				_stepper->changePosition = FALSE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		break;
 80031f8:	e057      	b.n	80032aa <MovementHandler+0x23a>
		if (_stepper->changePosition == TRUE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003200:	2b01      	cmp	r3, #1
 8003202:	d154      	bne.n	80032ae <MovementHandler+0x23e>
			delta = _stepper->currentPosition - _stepper->targetPosition;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003210:	f7fd f85a 	bl	80002c8 <__aeabi_dsub>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4939      	ldr	r1, [pc, #228]	; (8003300 <MovementHandler+0x290>)
 800321a:	e9c1 2300 	strd	r2, r3, [r1]
			if (fabs(delta) < 0.18)
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <MovementHandler+0x290>)
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	4614      	mov	r4, r2
 8003226:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800322a:	a331      	add	r3, pc, #196	; (adr r3, 80032f0 <MovementHandler+0x280>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	f7fd fc72 	bl	8000b1c <__aeabi_dcmplt>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <MovementHandler+0x1d8>
				_stepper->StepperTimer->ARR = 2999;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c
			if (delta > 0.01) 			//jeżeli docelowa pozycja jest w minus
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <MovementHandler+0x290>)
 800324a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800324e:	a31c      	add	r3, pc, #112	; (adr r3, 80032c0 <MovementHandler+0x250>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fd fc80 	bl	8000b58 <__aeabi_dcmpgt>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <MovementHandler+0x1f6>
				GoMinus(_stepper);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff fdc0 	bl	8002de4 <GoMinus>
		break;
 8003264:	e023      	b.n	80032ae <MovementHandler+0x23e>
			else if (delta < -0.01)
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <MovementHandler+0x290>)
 8003268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800326c:	a322      	add	r3, pc, #136	; (adr r3, 80032f8 <MovementHandler+0x288>)
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	f7fd fc53 	bl	8000b1c <__aeabi_dcmplt>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <MovementHandler+0x214>
				GoPlus(_stepper);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fda5 	bl	8002dcc <GoPlus>
		break;
 8003282:	e014      	b.n	80032ae <MovementHandler+0x23e>
				StopStepper(_stepper);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff fd95 	bl	8002db4 <StopStepper>
				_stepper->StepperTimer->ARR = _stepper->Speed - 1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003290:	1e5a      	subs	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
				_stepper->changePosition = FALSE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		break;
 80032a0:	e005      	b.n	80032ae <MovementHandler+0x23e>
		break;
 80032a2:	bf00      	nop
 80032a4:	e004      	b.n	80032b0 <MovementHandler+0x240>
		break;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <MovementHandler+0x240>
		break;
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <MovementHandler+0x240>
		break;
 80032ae:	bf00      	nop
	}
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ba:	bf00      	nop
 80032bc:	f3af 8000 	nop.w
 80032c0:	47ae147b 	.word	0x47ae147b
 80032c4:	3f847ae1 	.word	0x3f847ae1
 80032c8:	30553261 	.word	0x30553261
 80032cc:	3f23a92a 	.word	0x3f23a92a
 80032d0:	30553261 	.word	0x30553261
 80032d4:	bf23a92a 	.word	0xbf23a92a
 80032d8:	47ae147b 	.word	0x47ae147b
 80032dc:	3fb47ae1 	.word	0x3fb47ae1
 80032e0:	eb1c432d 	.word	0xeb1c432d
 80032e4:	3f2a36e2 	.word	0x3f2a36e2
 80032e8:	eb1c432d 	.word	0xeb1c432d
 80032ec:	bf2a36e2 	.word	0xbf2a36e2
 80032f0:	70a3d70a 	.word	0x70a3d70a
 80032f4:	3fc70a3d 	.word	0x3fc70a3d
 80032f8:	47ae147b 	.word	0x47ae147b
 80032fc:	bf847ae1 	.word	0xbf847ae1
 8003300:	200005c0 	.word	0x200005c0
 8003304:	200004e8 	.word	0x200004e8
 8003308:	200005d0 	.word	0x200005d0
 800330c:	00000000 	.word	0x00000000

08003310 <CheckPosition>:
 * @param  _position	zadana pozycja porównywana z aktualną
 *
 * @retval TRUE jeżeli pozycje zadana i rzeczywista pokrywają się, FALSE, gdy nie pokrywają się
 */
Cbool CheckPosition(struct Stepper* _stepper, double _targetPosition)
{
 8003310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	ed87 0b00 	vstr	d0, [r7]
	delta = _stepper->currentPosition - _targetPosition;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003328:	f7fc ffce 	bl	80002c8 <__aeabi_dsub>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	493b      	ldr	r1, [pc, #236]	; (8003420 <CheckPosition+0x110>)
 8003332:	e9c1 2300 	strd	r2, r3, [r1]
	switch (_stepper->Axis)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800333c:	2b02      	cmp	r3, #2
 800333e:	d03e      	beq.n	80033be <CheckPosition+0xae>
 8003340:	2b02      	cmp	r3, #2
 8003342:	dc58      	bgt.n	80033f6 <CheckPosition+0xe6>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <CheckPosition+0x3e>
 8003348:	2b01      	cmp	r3, #1
 800334a:	d01c      	beq.n	8003386 <CheckPosition+0x76>
			_stepper->inPosition = FALSE;
			return FALSE;
		}
		break;
	default:
		break;
 800334c:	e053      	b.n	80033f6 <CheckPosition+0xe6>
		if (fabs(delta) < 0.00015)
 800334e:	4b34      	ldr	r3, [pc, #208]	; (8003420 <CheckPosition+0x110>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	4692      	mov	sl, r2
 8003356:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800335a:	a32b      	add	r3, pc, #172	; (adr r3, 8003408 <CheckPosition+0xf8>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	4650      	mov	r0, sl
 8003362:	4659      	mov	r1, fp
 8003364:	f7fd fbda 	bl	8000b1c <__aeabi_dcmplt>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <CheckPosition+0x6a>
			_stepper->inPosition = TRUE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			return TRUE;
 8003376:	2301      	movs	r3, #1
 8003378:	e03f      	b.n	80033fa <CheckPosition+0xea>
			_stepper->inPosition = FALSE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			return FALSE;
 8003382:	2300      	movs	r3, #0
 8003384:	e039      	b.n	80033fa <CheckPosition+0xea>
		if (fabs(delta) < 0.0002)
 8003386:	4b26      	ldr	r3, [pc, #152]	; (8003420 <CheckPosition+0x110>)
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	4690      	mov	r8, r2
 800338e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003392:	a31f      	add	r3, pc, #124	; (adr r3, 8003410 <CheckPosition+0x100>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	4640      	mov	r0, r8
 800339a:	4649      	mov	r1, r9
 800339c:	f7fd fbbe 	bl	8000b1c <__aeabi_dcmplt>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <CheckPosition+0xa2>
			_stepper->inPosition = TRUE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			return TRUE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e023      	b.n	80033fa <CheckPosition+0xea>
			_stepper->inPosition = FALSE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			return FALSE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e01d      	b.n	80033fa <CheckPosition+0xea>
		if (fabs(delta) < 0.01)
 80033be:	4b18      	ldr	r3, [pc, #96]	; (8003420 <CheckPosition+0x110>)
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	4614      	mov	r4, r2
 80033c6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80033ca:	a313      	add	r3, pc, #76	; (adr r3, 8003418 <CheckPosition+0x108>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	4620      	mov	r0, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	f7fd fba2 	bl	8000b1c <__aeabi_dcmplt>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <CheckPosition+0xda>
			_stepper->inPosition = TRUE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			return TRUE;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e007      	b.n	80033fa <CheckPosition+0xea>
			_stepper->inPosition = FALSE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			return FALSE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e001      	b.n	80033fa <CheckPosition+0xea>
		break;
 80033f6:	bf00      	nop
	}
	return FALSE;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003404:	f3af 8000 	nop.w
 8003408:	30553261 	.word	0x30553261
 800340c:	3f23a92a 	.word	0x3f23a92a
 8003410:	eb1c432d 	.word	0xeb1c432d
 8003414:	3f2a36e2 	.word	0x3f2a36e2
 8003418:	47ae147b 	.word	0x47ae147b
 800341c:	3f847ae1 	.word	0x3f847ae1
 8003420:	200005c0 	.word	0x200005c0

08003424 <StepperHandler>:
 *
 * @param  _stepper 	wskaznik do zadeklarowanej struktury silnika głównego
 * @retval Brak
 */
void StepperHandler(struct Stepper* _stepper)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	if (_stepper->State == movingPlus)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <StepperHandler+0x1e>
		_stepper->Steps++;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	65da      	str	r2, [r3, #92]	; 0x5c
	else
		_stepper->Steps--;
}
 8003440:	e004      	b.n	800344c <StepperHandler+0x28>
		_stepper->Steps--;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	1e5a      	subs	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <UVCheckSteps>:
 *
 * @param  _stepper 	wskaznik do zadeklarowanej struktury silnika pomocniczego
 * @retval Brak
 */
void UVCheckSteps(struct StepperUV *_stepper)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	_stepper->Steps++;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	619a      	str	r2, [r3, #24]
	if (_stepper->Steps == _stepper->StepsToGo)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	429a      	cmp	r2, r3
 8003474:	d103      	bne.n	800347e <UVCheckSteps+0x26>
		ChangeStepperUVState(_stepper, stopped);
 8003476:	2100      	movs	r1, #0
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fc29 	bl	8002cd0 <ChangeStepperUVState>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <UVStepperHandler>:
 *
 * @param  _stepper 	wskaznik do zadeklarowanej struktury silnika pomocniczego
 * @retval Brak
 */
void UVStepperHandler(struct StepperUV *_stepper)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
	if (_stepper->State != stopped)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7bdb      	ldrb	r3, [r3, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d026      	beq.n	80034e4 <UVStepperHandler+0x5e>
	{
		_stepper->Tick++;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8a9b      	ldrh	r3, [r3, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	829a      	strh	r2, [r3, #20]
		if (_stepper->Tick >= _stepper->Speed)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8a9a      	ldrh	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8a5b      	ldrh	r3, [r3, #18]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d30e      	bcc.n	80034cc <UVStepperHandler+0x46>
		{
			ChangePinState(_stepper->PortStep, _stepper->PinStep, 1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	889b      	ldrh	r3, [r3, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	4619      	mov	r1, r3
 80034ba:	f7ff f92b 	bl	8002714 <ChangePinState>
			_stepper->Tick = 0;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	829a      	strh	r2, [r3, #20]
			UVCheckSteps(_stepper);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ffc7 	bl	8003458 <UVCheckSteps>
			return;
 80034ca:	e00b      	b.n	80034e4 <UVStepperHandler+0x5e>
		}

		if (_stepper->Tick == 1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8a9b      	ldrh	r3, [r3, #20]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <UVStepperHandler+0x5e>
		{
			ChangePinState(_stepper->PortStep, _stepper->PinStep, 0);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	889b      	ldrh	r3, [r3, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	4619      	mov	r1, r3
 80034e0:	f7ff f918 	bl	8002714 <ChangePinState>
		}
	}
}
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <StartPreparing>:
 *
 * @param  Brak
 * @retval Brak
 */
void StartPreparing()
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
	currentMeasurement.stage = 0;
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <StartPreparing+0x1c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	workMode = preparing;
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <StartPreparing+0x20>)
 80034fa:	2202      	movs	r2, #2
 80034fc:	701a      	strb	r2, [r3, #0]
}
 80034fe:	bf00      	nop
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	200004e8 	.word	0x200004e8
 800350c:	200005d0 	.word	0x200005d0

08003510 <PreparingHandler>:
 *
 * @param  Brak
 * @retval Brak
 */
void PreparingHandler()
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
	switch (currentMeasurement.measType)
 8003514:	4bb6      	ldr	r3, [pc, #728]	; (80037f0 <PreparingHandler+0x2e0>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b03      	cmp	r3, #3
 800351a:	dc02      	bgt.n	8003522 <PreparingHandler+0x12>
 800351c:	2b00      	cmp	r3, #0
 800351e:	da04      	bge.n	800352a <PreparingHandler+0x1a>
			break;
		}

		break;
	}
}
 8003520:	e241      	b.n	80039a6 <PreparingHandler+0x496>
	switch (currentMeasurement.measType)
 8003522:	2b04      	cmp	r3, #4
 8003524:	f000 816e 	beq.w	8003804 <PreparingHandler+0x2f4>
}
 8003528:	e23d      	b.n	80039a6 <PreparingHandler+0x496>
		switch (currentMeasurement.stage)
 800352a:	4bb1      	ldr	r3, [pc, #708]	; (80037f0 <PreparingHandler+0x2e0>)
 800352c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003530:	2b06      	cmp	r3, #6
 8003532:	f200 8235 	bhi.w	80039a0 <PreparingHandler+0x490>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <PreparingHandler+0x2c>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	08003559 	.word	0x08003559
 8003540:	080035d3 	.word	0x080035d3
 8003544:	08003643 	.word	0x08003643
 8003548:	08003695 	.word	0x08003695
 800354c:	080036cf 	.word	0x080036cf
 8003550:	08003731 	.word	0x08003731
 8003554:	080037a1 	.word	0x080037a1
			SendCurrentPosition(xStepper.currentPosition, zStepper.currentPosition, cStepper.currentPosition);
 8003558:	4ba6      	ldr	r3, [pc, #664]	; (80037f4 <PreparingHandler+0x2e4>)
 800355a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800355e:	4ba6      	ldr	r3, [pc, #664]	; (80037f8 <PreparingHandler+0x2e8>)
 8003560:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8003564:	4ba5      	ldr	r3, [pc, #660]	; (80037fc <PreparingHandler+0x2ec>)
 8003566:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800356a:	eeb0 2a45 	vmov.f32	s4, s10
 800356e:	eef0 2a65 	vmov.f32	s5, s11
 8003572:	eeb0 1a46 	vmov.f32	s2, s12
 8003576:	eef0 1a66 	vmov.f32	s3, s13
 800357a:	eeb0 0a47 	vmov.f32	s0, s14
 800357e:	eef0 0a67 	vmov.f32	s1, s15
 8003582:	f7fe fb55 	bl	8001c30 <SendCurrentPosition>
			if (CheckPosition(&cStepper, currentMeasurement.cStart) && CheckPosition(&zStepper, currentMeasurement.zStart))
 8003586:	4b9a      	ldr	r3, [pc, #616]	; (80037f0 <PreparingHandler+0x2e0>)
 8003588:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800358c:	eeb0 0a47 	vmov.f32	s0, s14
 8003590:	eef0 0a67 	vmov.f32	s1, s15
 8003594:	4899      	ldr	r0, [pc, #612]	; (80037fc <PreparingHandler+0x2ec>)
 8003596:	f7ff febb 	bl	8003310 <CheckPosition>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00f      	beq.n	80035c0 <PreparingHandler+0xb0>
 80035a0:	4b93      	ldr	r3, [pc, #588]	; (80037f0 <PreparingHandler+0x2e0>)
 80035a2:	ed93 7b08 	vldr	d7, [r3, #32]
 80035a6:	eeb0 0a47 	vmov.f32	s0, s14
 80035aa:	eef0 0a67 	vmov.f32	s1, s15
 80035ae:	4892      	ldr	r0, [pc, #584]	; (80037f8 <PreparingHandler+0x2e8>)
 80035b0:	f7ff feae 	bl	8003310 <CheckPosition>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <PreparingHandler+0xb0>
				GeneratePath();
 80035ba:	f000 fa01 	bl	80039c0 <GeneratePath>
			break;
 80035be:	e116      	b.n	80037ee <PreparingHandler+0x2de>
				currentMeasurement.stage++;
 80035c0:	4b8b      	ldr	r3, [pc, #556]	; (80037f0 <PreparingHandler+0x2e0>)
 80035c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80035c6:	3301      	adds	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	4b89      	ldr	r3, [pc, #548]	; (80037f0 <PreparingHandler+0x2e0>)
 80035cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 80035d0:	e10d      	b.n	80037ee <PreparingHandler+0x2de>
			switch (currentMeasurement.measuredPart)
 80035d2:	4b87      	ldr	r3, [pc, #540]	; (80037f0 <PreparingHandler+0x2e0>)
 80035d4:	791b      	ldrb	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <PreparingHandler+0xd0>
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d014      	beq.n	8003608 <PreparingHandler+0xf8>
				break;
 80035de:	e027      	b.n	8003630 <PreparingHandler+0x120>
				MoveStepperToPosition(&xStepper, xStepper.currentPosition - hop);
 80035e0:	4b84      	ldr	r3, [pc, #528]	; (80037f4 <PreparingHandler+0x2e4>)
 80035e2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	4b85      	ldr	r3, [pc, #532]	; (8003800 <PreparingHandler+0x2f0>)
 80035ec:	f7fc fe6c 	bl	80002c8 <__aeabi_dsub>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	ec43 2b17 	vmov	d7, r2, r3
 80035f8:	eeb0 0a47 	vmov.f32	s0, s14
 80035fc:	eef0 0a67 	vmov.f32	s1, s15
 8003600:	487c      	ldr	r0, [pc, #496]	; (80037f4 <PreparingHandler+0x2e4>)
 8003602:	f7ff fcd1 	bl	8002fa8 <MoveStepperToPosition>
				break;
 8003606:	e013      	b.n	8003630 <PreparingHandler+0x120>
				MoveStepperToPosition(&xStepper, xStepper.currentPosition + hop);
 8003608:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <PreparingHandler+0x2e4>)
 800360a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	4b7b      	ldr	r3, [pc, #492]	; (8003800 <PreparingHandler+0x2f0>)
 8003614:	f7fc fe5a 	bl	80002cc <__adddf3>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	ec43 2b17 	vmov	d7, r2, r3
 8003620:	eeb0 0a47 	vmov.f32	s0, s14
 8003624:	eef0 0a67 	vmov.f32	s1, s15
 8003628:	4872      	ldr	r0, [pc, #456]	; (80037f4 <PreparingHandler+0x2e4>)
 800362a:	f7ff fcbd 	bl	8002fa8 <MoveStepperToPosition>
				break;
 800362e:	bf00      	nop
			currentMeasurement.stage++;
 8003630:	4b6f      	ldr	r3, [pc, #444]	; (80037f0 <PreparingHandler+0x2e0>)
 8003632:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003636:	3301      	adds	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <PreparingHandler+0x2e0>)
 800363c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8003640:	e0d5      	b.n	80037ee <PreparingHandler+0x2de>
			MovementHandler(&xStepper);
 8003642:	486c      	ldr	r0, [pc, #432]	; (80037f4 <PreparingHandler+0x2e4>)
 8003644:	f7ff fd14 	bl	8003070 <MovementHandler>
			if (xStepper.changePosition == FALSE)
 8003648:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <PreparingHandler+0x2e4>)
 800364a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 80c8 	bne.w	80037e4 <PreparingHandler+0x2d4>
				SendCurrentPosition(xStepper.currentPosition, zStepper.currentPosition, cStepper.currentPosition);
 8003654:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <PreparingHandler+0x2e4>)
 8003656:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800365a:	4b67      	ldr	r3, [pc, #412]	; (80037f8 <PreparingHandler+0x2e8>)
 800365c:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8003660:	4b66      	ldr	r3, [pc, #408]	; (80037fc <PreparingHandler+0x2ec>)
 8003662:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8003666:	eeb0 2a45 	vmov.f32	s4, s10
 800366a:	eef0 2a65 	vmov.f32	s5, s11
 800366e:	eeb0 1a46 	vmov.f32	s2, s12
 8003672:	eef0 1a66 	vmov.f32	s3, s13
 8003676:	eeb0 0a47 	vmov.f32	s0, s14
 800367a:	eef0 0a67 	vmov.f32	s1, s15
 800367e:	f7fe fad7 	bl	8001c30 <SendCurrentPosition>
				currentMeasurement.stage++;
 8003682:	4b5b      	ldr	r3, [pc, #364]	; (80037f0 <PreparingHandler+0x2e0>)
 8003684:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003688:	3301      	adds	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	4b58      	ldr	r3, [pc, #352]	; (80037f0 <PreparingHandler+0x2e0>)
 800368e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8003692:	e0a7      	b.n	80037e4 <PreparingHandler+0x2d4>
			MoveStepperToPosition(&zStepper, currentMeasurement.zStart);
 8003694:	4b56      	ldr	r3, [pc, #344]	; (80037f0 <PreparingHandler+0x2e0>)
 8003696:	ed93 7b08 	vldr	d7, [r3, #32]
 800369a:	eeb0 0a47 	vmov.f32	s0, s14
 800369e:	eef0 0a67 	vmov.f32	s1, s15
 80036a2:	4855      	ldr	r0, [pc, #340]	; (80037f8 <PreparingHandler+0x2e8>)
 80036a4:	f7ff fc80 	bl	8002fa8 <MoveStepperToPosition>
			MoveStepperToPosition(&cStepper, currentMeasurement.cStart);
 80036a8:	4b51      	ldr	r3, [pc, #324]	; (80037f0 <PreparingHandler+0x2e0>)
 80036aa:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80036ae:	eeb0 0a47 	vmov.f32	s0, s14
 80036b2:	eef0 0a67 	vmov.f32	s1, s15
 80036b6:	4851      	ldr	r0, [pc, #324]	; (80037fc <PreparingHandler+0x2ec>)
 80036b8:	f7ff fc76 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage++;
 80036bc:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <PreparingHandler+0x2e0>)
 80036be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80036c2:	3301      	adds	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <PreparingHandler+0x2e0>)
 80036c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 80036cc:	e08f      	b.n	80037ee <PreparingHandler+0x2de>
			MovementHandler(&zStepper);
 80036ce:	484a      	ldr	r0, [pc, #296]	; (80037f8 <PreparingHandler+0x2e8>)
 80036d0:	f7ff fcce 	bl	8003070 <MovementHandler>
			MovementHandler(&cStepper);
 80036d4:	4849      	ldr	r0, [pc, #292]	; (80037fc <PreparingHandler+0x2ec>)
 80036d6:	f7ff fccb 	bl	8003070 <MovementHandler>
			if (zStepper.changePosition == FALSE && cStepper.changePosition == FALSE)
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <PreparingHandler+0x2e8>)
 80036dc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 8081 	bne.w	80037e8 <PreparingHandler+0x2d8>
 80036e6:	4b45      	ldr	r3, [pc, #276]	; (80037fc <PreparingHandler+0x2ec>)
 80036e8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d17b      	bne.n	80037e8 <PreparingHandler+0x2d8>
				SendCurrentPosition(xStepper.currentPosition, zStepper.currentPosition, cStepper.currentPosition);
 80036f0:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <PreparingHandler+0x2e4>)
 80036f2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80036f6:	4b40      	ldr	r3, [pc, #256]	; (80037f8 <PreparingHandler+0x2e8>)
 80036f8:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 80036fc:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <PreparingHandler+0x2ec>)
 80036fe:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8003702:	eeb0 2a45 	vmov.f32	s4, s10
 8003706:	eef0 2a65 	vmov.f32	s5, s11
 800370a:	eeb0 1a46 	vmov.f32	s2, s12
 800370e:	eef0 1a66 	vmov.f32	s3, s13
 8003712:	eeb0 0a47 	vmov.f32	s0, s14
 8003716:	eef0 0a67 	vmov.f32	s1, s15
 800371a:	f7fe fa89 	bl	8001c30 <SendCurrentPosition>
				currentMeasurement.stage++;
 800371e:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <PreparingHandler+0x2e0>)
 8003720:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003724:	3301      	adds	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <PreparingHandler+0x2e0>)
 800372a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 800372e:	e05b      	b.n	80037e8 <PreparingHandler+0x2d8>
			switch (currentMeasurement.measuredPart)
 8003730:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <PreparingHandler+0x2e0>)
 8003732:	791b      	ldrb	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <PreparingHandler+0x22e>
 8003738:	2b01      	cmp	r3, #1
 800373a:	d014      	beq.n	8003766 <PreparingHandler+0x256>
				break;
 800373c:	e027      	b.n	800378e <PreparingHandler+0x27e>
				MoveStepperToPosition(&xStepper, xStepper.currentPosition + hop);
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <PreparingHandler+0x2e4>)
 8003740:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <PreparingHandler+0x2f0>)
 800374a:	f7fc fdbf 	bl	80002cc <__adddf3>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	ec43 2b17 	vmov	d7, r2, r3
 8003756:	eeb0 0a47 	vmov.f32	s0, s14
 800375a:	eef0 0a67 	vmov.f32	s1, s15
 800375e:	4825      	ldr	r0, [pc, #148]	; (80037f4 <PreparingHandler+0x2e4>)
 8003760:	f7ff fc22 	bl	8002fa8 <MoveStepperToPosition>
				break;
 8003764:	e013      	b.n	800378e <PreparingHandler+0x27e>
				MoveStepperToPosition(&xStepper, xStepper.currentPosition - hop);
 8003766:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <PreparingHandler+0x2e4>)
 8003768:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	4b23      	ldr	r3, [pc, #140]	; (8003800 <PreparingHandler+0x2f0>)
 8003772:	f7fc fda9 	bl	80002c8 <__aeabi_dsub>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	ec43 2b17 	vmov	d7, r2, r3
 800377e:	eeb0 0a47 	vmov.f32	s0, s14
 8003782:	eef0 0a67 	vmov.f32	s1, s15
 8003786:	481b      	ldr	r0, [pc, #108]	; (80037f4 <PreparingHandler+0x2e4>)
 8003788:	f7ff fc0e 	bl	8002fa8 <MoveStepperToPosition>
				break;
 800378c:	bf00      	nop
			currentMeasurement.stage++;
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <PreparingHandler+0x2e0>)
 8003790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003794:	3301      	adds	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <PreparingHandler+0x2e0>)
 800379a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 800379e:	e026      	b.n	80037ee <PreparingHandler+0x2de>
			MovementHandler(&xStepper);
 80037a0:	4814      	ldr	r0, [pc, #80]	; (80037f4 <PreparingHandler+0x2e4>)
 80037a2:	f7ff fc65 	bl	8003070 <MovementHandler>
			if (xStepper.changePosition == FALSE)
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <PreparingHandler+0x2e4>)
 80037a8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d11d      	bne.n	80037ec <PreparingHandler+0x2dc>
				SendCurrentPosition(xStepper.currentPosition, zStepper.currentPosition, cStepper.currentPosition);
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <PreparingHandler+0x2e4>)
 80037b2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <PreparingHandler+0x2e8>)
 80037b8:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <PreparingHandler+0x2ec>)
 80037be:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80037c2:	eeb0 2a45 	vmov.f32	s4, s10
 80037c6:	eef0 2a65 	vmov.f32	s5, s11
 80037ca:	eeb0 1a46 	vmov.f32	s2, s12
 80037ce:	eef0 1a66 	vmov.f32	s3, s13
 80037d2:	eeb0 0a47 	vmov.f32	s0, s14
 80037d6:	eef0 0a67 	vmov.f32	s1, s15
 80037da:	f7fe fa29 	bl	8001c30 <SendCurrentPosition>
				GeneratePath();
 80037de:	f000 f8ef 	bl	80039c0 <GeneratePath>
			break;
 80037e2:	e003      	b.n	80037ec <PreparingHandler+0x2dc>
			break;
 80037e4:	bf00      	nop
 80037e6:	e0db      	b.n	80039a0 <PreparingHandler+0x490>
			break;
 80037e8:	bf00      	nop
 80037ea:	e0d9      	b.n	80039a0 <PreparingHandler+0x490>
			break;
 80037ec:	bf00      	nop
		break;
 80037ee:	e0d7      	b.n	80039a0 <PreparingHandler+0x490>
 80037f0:	200004e8 	.word	0x200004e8
 80037f4:	200002f8 	.word	0x200002f8
 80037f8:	20000388 	.word	0x20000388
 80037fc:	20000418 	.word	0x20000418
 8003800:	40140000 	.word	0x40140000
		switch (currentMeasurement.stage)
 8003804:	4b69      	ldr	r3, [pc, #420]	; (80039ac <PreparingHandler+0x49c>)
 8003806:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800380a:	2b06      	cmp	r3, #6
 800380c:	f200 80ca 	bhi.w	80039a4 <PreparingHandler+0x494>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <PreparingHandler+0x308>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	08003835 	.word	0x08003835
 800381c:	08003881 	.word	0x08003881
 8003820:	080038b9 	.word	0x080038b9
 8003824:	080038db 	.word	0x080038db
 8003828:	08003915 	.word	0x08003915
 800382c:	08003947 	.word	0x08003947
 8003830:	0800397f 	.word	0x0800397f
			if (CheckPosition(&cStepper, currentMeasurement.cStart) && CheckPosition(&xStepper, currentMeasurement.xStart))
 8003834:	4b5d      	ldr	r3, [pc, #372]	; (80039ac <PreparingHandler+0x49c>)
 8003836:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800383a:	eeb0 0a47 	vmov.f32	s0, s14
 800383e:	eef0 0a67 	vmov.f32	s1, s15
 8003842:	485b      	ldr	r0, [pc, #364]	; (80039b0 <PreparingHandler+0x4a0>)
 8003844:	f7ff fd64 	bl	8003310 <CheckPosition>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00f      	beq.n	800386e <PreparingHandler+0x35e>
 800384e:	4b57      	ldr	r3, [pc, #348]	; (80039ac <PreparingHandler+0x49c>)
 8003850:	ed93 7b06 	vldr	d7, [r3, #24]
 8003854:	eeb0 0a47 	vmov.f32	s0, s14
 8003858:	eef0 0a67 	vmov.f32	s1, s15
 800385c:	4855      	ldr	r0, [pc, #340]	; (80039b4 <PreparingHandler+0x4a4>)
 800385e:	f7ff fd57 	bl	8003310 <CheckPosition>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <PreparingHandler+0x35e>
				GeneratePath();
 8003868:	f000 f8aa 	bl	80039c0 <GeneratePath>
			break;
 800386c:	e097      	b.n	800399e <PreparingHandler+0x48e>
				currentMeasurement.stage++;
 800386e:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <PreparingHandler+0x49c>)
 8003870:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003874:	3301      	adds	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <PreparingHandler+0x49c>)
 800387a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 800387e:	e08e      	b.n	800399e <PreparingHandler+0x48e>
			MoveStepperToPosition(&zStepper, zStepper.currentPosition + hop);
 8003880:	4b4d      	ldr	r3, [pc, #308]	; (80039b8 <PreparingHandler+0x4a8>)
 8003882:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	4b4c      	ldr	r3, [pc, #304]	; (80039bc <PreparingHandler+0x4ac>)
 800388c:	f7fc fd1e 	bl	80002cc <__adddf3>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	ec43 2b17 	vmov	d7, r2, r3
 8003898:	eeb0 0a47 	vmov.f32	s0, s14
 800389c:	eef0 0a67 	vmov.f32	s1, s15
 80038a0:	4845      	ldr	r0, [pc, #276]	; (80039b8 <PreparingHandler+0x4a8>)
 80038a2:	f7ff fb81 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage++;
 80038a6:	4b41      	ldr	r3, [pc, #260]	; (80039ac <PreparingHandler+0x49c>)
 80038a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80038ac:	3301      	adds	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <PreparingHandler+0x49c>)
 80038b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 80038b6:	e072      	b.n	800399e <PreparingHandler+0x48e>
			MovementHandler(&zStepper);
 80038b8:	483f      	ldr	r0, [pc, #252]	; (80039b8 <PreparingHandler+0x4a8>)
 80038ba:	f7ff fbd9 	bl	8003070 <MovementHandler>
			if (zStepper.changePosition == FALSE)
 80038be:	4b3e      	ldr	r3, [pc, #248]	; (80039b8 <PreparingHandler+0x4a8>)
 80038c0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d165      	bne.n	8003994 <PreparingHandler+0x484>
				currentMeasurement.stage++;
 80038c8:	4b38      	ldr	r3, [pc, #224]	; (80039ac <PreparingHandler+0x49c>)
 80038ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80038ce:	3301      	adds	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <PreparingHandler+0x49c>)
 80038d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 80038d8:	e05c      	b.n	8003994 <PreparingHandler+0x484>
			MoveStepperToPosition(&xStepper, currentMeasurement.xStart);
 80038da:	4b34      	ldr	r3, [pc, #208]	; (80039ac <PreparingHandler+0x49c>)
 80038dc:	ed93 7b06 	vldr	d7, [r3, #24]
 80038e0:	eeb0 0a47 	vmov.f32	s0, s14
 80038e4:	eef0 0a67 	vmov.f32	s1, s15
 80038e8:	4832      	ldr	r0, [pc, #200]	; (80039b4 <PreparingHandler+0x4a4>)
 80038ea:	f7ff fb5d 	bl	8002fa8 <MoveStepperToPosition>
			MoveStepperToPosition(&cStepper, currentMeasurement.cStart);
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <PreparingHandler+0x49c>)
 80038f0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80038f4:	eeb0 0a47 	vmov.f32	s0, s14
 80038f8:	eef0 0a67 	vmov.f32	s1, s15
 80038fc:	482c      	ldr	r0, [pc, #176]	; (80039b0 <PreparingHandler+0x4a0>)
 80038fe:	f7ff fb53 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage++;
 8003902:	4b2a      	ldr	r3, [pc, #168]	; (80039ac <PreparingHandler+0x49c>)
 8003904:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003908:	3301      	adds	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	4b27      	ldr	r3, [pc, #156]	; (80039ac <PreparingHandler+0x49c>)
 800390e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8003912:	e044      	b.n	800399e <PreparingHandler+0x48e>
			MovementHandler(&xStepper);
 8003914:	4827      	ldr	r0, [pc, #156]	; (80039b4 <PreparingHandler+0x4a4>)
 8003916:	f7ff fbab 	bl	8003070 <MovementHandler>
			MovementHandler(&cStepper);
 800391a:	4825      	ldr	r0, [pc, #148]	; (80039b0 <PreparingHandler+0x4a0>)
 800391c:	f7ff fba8 	bl	8003070 <MovementHandler>
			if (zStepper.changePosition == FALSE && cStepper.changePosition == FALSE)
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <PreparingHandler+0x4a8>)
 8003922:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003926:	2b00      	cmp	r3, #0
 8003928:	d136      	bne.n	8003998 <PreparingHandler+0x488>
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <PreparingHandler+0x4a0>)
 800392c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003930:	2b00      	cmp	r3, #0
 8003932:	d131      	bne.n	8003998 <PreparingHandler+0x488>
				currentMeasurement.stage++;
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <PreparingHandler+0x49c>)
 8003936:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800393a:	3301      	adds	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <PreparingHandler+0x49c>)
 8003940:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8003944:	e028      	b.n	8003998 <PreparingHandler+0x488>
			MoveStepperToPosition(&zStepper, zStepper.currentPosition - hop);
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <PreparingHandler+0x4a8>)
 8003948:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <PreparingHandler+0x4ac>)
 8003952:	f7fc fcb9 	bl	80002c8 <__aeabi_dsub>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	ec43 2b17 	vmov	d7, r2, r3
 800395e:	eeb0 0a47 	vmov.f32	s0, s14
 8003962:	eef0 0a67 	vmov.f32	s1, s15
 8003966:	4814      	ldr	r0, [pc, #80]	; (80039b8 <PreparingHandler+0x4a8>)
 8003968:	f7ff fb1e 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage++;
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <PreparingHandler+0x49c>)
 800396e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003972:	3301      	adds	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <PreparingHandler+0x49c>)
 8003978:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 800397c:	e00f      	b.n	800399e <PreparingHandler+0x48e>
			MovementHandler(&zStepper);
 800397e:	480e      	ldr	r0, [pc, #56]	; (80039b8 <PreparingHandler+0x4a8>)
 8003980:	f7ff fb76 	bl	8003070 <MovementHandler>
			if (xStepper.changePosition == FALSE)
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <PreparingHandler+0x4a4>)
 8003986:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <PreparingHandler+0x48c>
				GeneratePath();
 800398e:	f000 f817 	bl	80039c0 <GeneratePath>
			break;
 8003992:	e003      	b.n	800399c <PreparingHandler+0x48c>
			break;
 8003994:	bf00      	nop
 8003996:	e005      	b.n	80039a4 <PreparingHandler+0x494>
			break;
 8003998:	bf00      	nop
 800399a:	e003      	b.n	80039a4 <PreparingHandler+0x494>
			break;
 800399c:	bf00      	nop
		break;
 800399e:	e001      	b.n	80039a4 <PreparingHandler+0x494>
		break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <PreparingHandler+0x496>
		break;
 80039a4:	bf00      	nop
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200004e8 	.word	0x200004e8
 80039b0:	20000418 	.word	0x20000418
 80039b4:	200002f8 	.word	0x200002f8
 80039b8:	20000388 	.word	0x20000388
 80039bc:	40140000 	.word	0x40140000

080039c0 <GeneratePath>:
 *
 * @param  Brak
 * @retval Brak
 */
void GeneratePath()
{
 80039c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
	switch (currentMeasurement.measType)
 80039c8:	4b62      	ldr	r3, [pc, #392]	; (8003b54 <GeneratePath+0x194>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	f200 80ae 	bhi.w	8003b2e <GeneratePath+0x16e>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <GeneratePath+0x18>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	080039ed 	.word	0x080039ed
 80039dc:	08003a2f 	.word	0x08003a2f
 80039e0:	08003b2f 	.word	0x08003b2f
 80039e4:	08003ab1 	.word	0x08003ab1
 80039e8:	08003a71 	.word	0x08003a71
	{
	case LP:
		currentMeasurement.pathPoints = ((uint32_t)(fabs(currentMeasurement.zEnd - currentMeasurement.zStart) / currentMeasurement.step) + 1) * 2;
 80039ec:	4b59      	ldr	r3, [pc, #356]	; (8003b54 <GeneratePath+0x194>)
 80039ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80039f2:	4b58      	ldr	r3, [pc, #352]	; (8003b54 <GeneratePath+0x194>)
 80039f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039f8:	f7fc fc66 	bl	80002c8 <__aeabi_dsub>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	60ba      	str	r2, [r7, #8]
 8003a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	4b52      	ldr	r3, [pc, #328]	; (8003b54 <GeneratePath+0x194>)
 8003a0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a12:	f7fc ff3b 	bl	800088c <__aeabi_ddiv>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f7fd f8e3 	bl	8000be8 <__aeabi_d2uiz>
 8003a22:	4603      	mov	r3, r0
 8003a24:	3301      	adds	r3, #1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4a4a      	ldr	r2, [pc, #296]	; (8003b54 <GeneratePath+0x194>)
 8003a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
		break;
 8003a2c:	e07f      	b.n	8003b2e <GeneratePath+0x16e>
	case GD:
		currentMeasurement.pathPoints = ((uint32_t)(fabs(currentMeasurement.cEnd - currentMeasurement.cStart) / currentMeasurement.step) + 1) * 2;
 8003a2e:	4b49      	ldr	r3, [pc, #292]	; (8003b54 <GeneratePath+0x194>)
 8003a30:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003a34:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <GeneratePath+0x194>)
 8003a36:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003a3a:	f7fc fc45 	bl	80002c8 <__aeabi_dsub>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	603a      	str	r2, [r7, #0]
 8003a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	4b42      	ldr	r3, [pc, #264]	; (8003b54 <GeneratePath+0x194>)
 8003a4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a54:	f7fc ff1a 	bl	800088c <__aeabi_ddiv>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f7fd f8c2 	bl	8000be8 <__aeabi_d2uiz>
 8003a64:	4603      	mov	r3, r0
 8003a66:	3301      	adds	r3, #1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4a3a      	ldr	r2, [pc, #232]	; (8003b54 <GeneratePath+0x194>)
 8003a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
		break;
 8003a6e:	e05e      	b.n	8003b2e <GeneratePath+0x16e>
	case XY:
		currentMeasurement.pathPoints = ((uint32_t)(fabs(currentMeasurement.xEnd - currentMeasurement.xStart) / currentMeasurement.step) + 1) * 2;
 8003a70:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <GeneratePath+0x194>)
 8003a72:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003a76:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <GeneratePath+0x194>)
 8003a78:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a7c:	f7fc fc24 	bl	80002c8 <__aeabi_dsub>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4692      	mov	sl, r2
 8003a86:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8003a8a:	4b32      	ldr	r3, [pc, #200]	; (8003b54 <GeneratePath+0x194>)
 8003a8c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a90:	4650      	mov	r0, sl
 8003a92:	4659      	mov	r1, fp
 8003a94:	f7fc fefa 	bl	800088c <__aeabi_ddiv>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fd f8a2 	bl	8000be8 <__aeabi_d2uiz>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4a2a      	ldr	r2, [pc, #168]	; (8003b54 <GeneratePath+0x194>)
 8003aac:	64d3      	str	r3, [r2, #76]	; 0x4c
		break;
 8003aae:	e03e      	b.n	8003b2e <GeneratePath+0x16e>
	case Cage:
		currentMeasurement.pathPoints = ((uint32_t)(fabs(currentMeasurement.zEnd - currentMeasurement.zStart) / currentMeasurement.step) + 1) * 2;
 8003ab0:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <GeneratePath+0x194>)
 8003ab2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003ab6:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <GeneratePath+0x194>)
 8003ab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003abc:	f7fc fc04 	bl	80002c8 <__aeabi_dsub>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4690      	mov	r8, r2
 8003ac6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003aca:	4b22      	ldr	r3, [pc, #136]	; (8003b54 <GeneratePath+0x194>)
 8003acc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	f7fc feda 	bl	800088c <__aeabi_ddiv>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f7fd f882 	bl	8000be8 <__aeabi_d2uiz>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <GeneratePath+0x194>)
 8003aec:	64d3      	str	r3, [r2, #76]	; 0x4c
		currentMeasurement.pathPoints2 = ((uint32_t)(fabs(currentMeasurement.cEnd - currentMeasurement.cStart) / currentMeasurement.step2) + 1) * 2;
 8003aee:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <GeneratePath+0x194>)
 8003af0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003af4:	4b17      	ldr	r3, [pc, #92]	; (8003b54 <GeneratePath+0x194>)
 8003af6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003afa:	f7fc fbe5 	bl	80002c8 <__aeabi_dsub>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4614      	mov	r4, r2
 8003b04:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <GeneratePath+0x194>)
 8003b0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b0e:	4620      	mov	r0, r4
 8003b10:	4629      	mov	r1, r5
 8003b12:	f7fc febb 	bl	800088c <__aeabi_ddiv>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f7fd f863 	bl	8000be8 <__aeabi_d2uiz>
 8003b22:	4603      	mov	r3, r0
 8003b24:	3301      	adds	r3, #1
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <GeneratePath+0x194>)
 8003b2a:	6513      	str	r3, [r2, #80]	; 0x50
		break;
 8003b2c:	bf00      	nop
	case Spiral:
		// nie dotyczy
		break;
	}
	currentMeasurement.stage = 7;
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <GeneratePath+0x194>)
 8003b30:	2207      	movs	r2, #7
 8003b32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	currentMeasurement.currentPoint = 0;
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <GeneratePath+0x194>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
	SetStepDirection();
 8003b3c:	f7fe fe94 	bl	8002868 <SetStepDirection>
	SetStepperSpeeds();
 8003b40:	f000 f80a 	bl	8003b58 <SetStepperSpeeds>
	StartMeasuring();
 8003b44:	f000 f8d8 	bl	8003cf8 <StartMeasuring>
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b52:	bf00      	nop
 8003b54:	200004e8 	.word	0x200004e8

08003b58 <SetStepperSpeeds>:
 *
 * @param  Brak
 * @retval Brak
 */
void SetStepperSpeeds()
{
 8003b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
	// Tryb linii śrubowej - obliczenie prędkości Z w zależności od skoku i prędkości C
	if (currentMeasurement.measType == Spiral)
 8003b60:	4b5f      	ldr	r3, [pc, #380]	; (8003ce0 <SetStepperSpeeds+0x188>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	f040 8098 	bne.w	8003c9a <SetStepperSpeeds+0x142>
	{
		ChangeStepperSpeed(&xStepper, currentMeasurement.xSpeed);
 8003b6a:	4b5d      	ldr	r3, [pc, #372]	; (8003ce0 <SetStepperSpeeds+0x188>)
 8003b6c:	785b      	ldrb	r3, [r3, #1]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	485c      	ldr	r0, [pc, #368]	; (8003ce4 <SetStepperSpeeds+0x18c>)
 8003b72:	f7ff f963 	bl	8002e3c <ChangeStepperSpeed>
		ChangeStepperSpeed(&cStepper, currentMeasurement.cSpeed);
 8003b76:	4b5a      	ldr	r3, [pc, #360]	; (8003ce0 <SetStepperSpeeds+0x188>)
 8003b78:	78db      	ldrb	r3, [r3, #3]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	485a      	ldr	r0, [pc, #360]	; (8003ce8 <SetStepperSpeeds+0x190>)
 8003b7e:	f7ff f95d 	bl	8002e3c <ChangeStepperSpeed>
		//uint16_t zSpiralSpeed = (uint16_t)(((double)cStepper.Speed*7.8125)/(currentMeasurement.step));
		double zSpiralSpeed = ((double)cStepper.Speed*7.8125)/(currentMeasurement.step);
 8003b82:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <SetStepperSpeeds+0x190>)
 8003b84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc fcdb 	bl	8000544 <__aeabi_ui2d>
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	4b56      	ldr	r3, [pc, #344]	; (8003cec <SetStepperSpeeds+0x194>)
 8003b94:	f7fc fd50 	bl	8000638 <__aeabi_dmul>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <SetStepperSpeeds+0x188>)
 8003ba2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003ba6:	f7fc fe71 	bl	800088c <__aeabi_ddiv>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	e9c7 2300 	strd	r2, r3, [r7]

		if (((cStepper.Speed == 250) && fabs(currentMeasurement.step - 0.2f) < 0.001)
 8003bb2:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <SetStepperSpeeds+0x190>)
 8003bb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bb8:	2bfa      	cmp	r3, #250	; 0xfa
 8003bba:	d116      	bne.n	8003bea <SetStepperSpeeds+0x92>
 8003bbc:	4b48      	ldr	r3, [pc, #288]	; (8003ce0 <SetStepperSpeeds+0x188>)
 8003bbe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003bc2:	a341      	add	r3, pc, #260	; (adr r3, 8003cc8 <SetStepperSpeeds+0x170>)
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f7fc fb7e 	bl	80002c8 <__aeabi_dsub>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4690      	mov	r8, r2
 8003bd2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003bd6:	a33e      	add	r3, pc, #248	; (adr r3, 8003cd0 <SetStepperSpeeds+0x178>)
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	4640      	mov	r0, r8
 8003bde:	4649      	mov	r1, r9
 8003be0:	f7fc ff9c 	bl	8000b1c <__aeabi_dcmplt>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d11b      	bne.n	8003c22 <SetStepperSpeeds+0xca>
				|| ((cStepper.Speed == 250) && fabs(currentMeasurement.step - 1.0f) < 0.001))
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <SetStepperSpeeds+0x190>)
 8003bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bf0:	2bfa      	cmp	r3, #250	; 0xfa
 8003bf2:	d133      	bne.n	8003c5c <SetStepperSpeeds+0x104>
 8003bf4:	4b3a      	ldr	r3, [pc, #232]	; (8003ce0 <SetStepperSpeeds+0x188>)
 8003bf6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	4b3c      	ldr	r3, [pc, #240]	; (8003cf0 <SetStepperSpeeds+0x198>)
 8003c00:	f7fc fb62 	bl	80002c8 <__aeabi_dsub>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4614      	mov	r4, r2
 8003c0a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003c0e:	a330      	add	r3, pc, #192	; (adr r3, 8003cd0 <SetStepperSpeeds+0x178>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	4620      	mov	r0, r4
 8003c16:	4629      	mov	r1, r5
 8003c18:	f7fc ff80 	bl	8000b1c <__aeabi_dcmplt>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01c      	beq.n	8003c5c <SetStepperSpeeds+0x104>
		{
			zStepper.StepperTimer->PSC = 179;
 8003c22:	4b34      	ldr	r3, [pc, #208]	; (8003cf4 <SetStepperSpeeds+0x19c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	22b3      	movs	r2, #179	; 0xb3
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
			zStepper.Speed = (uint16_t)(zSpiralSpeed * 2);
 8003c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	f7fc fb4b 	bl	80002cc <__adddf3>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f7fc ffd3 	bl	8000be8 <__aeabi_d2uiz>
 8003c42:	4603      	mov	r3, r0
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <SetStepperSpeeds+0x19c>)
 8003c48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			zStepper.StepperTimer->ARR = zStepper.Speed - 1;
 8003c4c:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <SetStepperSpeeds+0x19c>)
 8003c4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <SetStepperSpeeds+0x19c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c
			zStepper.StepperTimer->PSC = 56249;
			zStepper.Speed = (uint16_t)(zSpiralSpeed / 156.25);
			zStepper.StepperTimer->ARR = zStepper.Speed - 1;
		}

		return;
 8003c5a:	e030      	b.n	8003cbe <SetStepperSpeeds+0x166>
			zStepper.StepperTimer->PSC = 56249;
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <SetStepperSpeeds+0x19c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f64d 32b9 	movw	r2, #56249	; 0xdbb9
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
			zStepper.Speed = (uint16_t)(zSpiralSpeed / 156.25);
 8003c66:	a31c      	add	r3, pc, #112	; (adr r3, 8003cd8 <SetStepperSpeeds+0x180>)
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c70:	f7fc fe0c 	bl	800088c <__aeabi_ddiv>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f7fc ffb4 	bl	8000be8 <__aeabi_d2uiz>
 8003c80:	4603      	mov	r3, r0
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <SetStepperSpeeds+0x19c>)
 8003c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			zStepper.StepperTimer->ARR = zStepper.Speed - 1;
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <SetStepperSpeeds+0x19c>)
 8003c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c90:	1e5a      	subs	r2, r3, #1
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <SetStepperSpeeds+0x19c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c
		return;
 8003c98:	e011      	b.n	8003cbe <SetStepperSpeeds+0x166>
	}

	ChangeStepperSpeed(&xStepper, currentMeasurement.xSpeed);
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <SetStepperSpeeds+0x188>)
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4810      	ldr	r0, [pc, #64]	; (8003ce4 <SetStepperSpeeds+0x18c>)
 8003ca2:	f7ff f8cb 	bl	8002e3c <ChangeStepperSpeed>
	ChangeStepperSpeed(&zStepper, currentMeasurement.zSpeed);
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <SetStepperSpeeds+0x188>)
 8003ca8:	789b      	ldrb	r3, [r3, #2]
 8003caa:	4619      	mov	r1, r3
 8003cac:	4811      	ldr	r0, [pc, #68]	; (8003cf4 <SetStepperSpeeds+0x19c>)
 8003cae:	f7ff f8c5 	bl	8002e3c <ChangeStepperSpeed>
	ChangeStepperSpeed(&cStepper, currentMeasurement.cSpeed);
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <SetStepperSpeeds+0x188>)
 8003cb4:	78db      	ldrb	r3, [r3, #3]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	480b      	ldr	r0, [pc, #44]	; (8003ce8 <SetStepperSpeeds+0x190>)
 8003cba:	f7ff f8bf 	bl	8002e3c <ChangeStepperSpeed>
}
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cc6:	bf00      	nop
 8003cc8:	a0000000 	.word	0xa0000000
 8003ccc:	3fc99999 	.word	0x3fc99999
 8003cd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003cd4:	3f50624d 	.word	0x3f50624d
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	40638800 	.word	0x40638800
 8003ce0:	200004e8 	.word	0x200004e8
 8003ce4:	200002f8 	.word	0x200002f8
 8003ce8:	20000418 	.word	0x20000418
 8003cec:	401f4000 	.word	0x401f4000
 8003cf0:	3ff00000 	.word	0x3ff00000
 8003cf4:	20000388 	.word	0x20000388

08003cf8 <StartMeasuring>:
 *
 * @param  Brak
 * @retval Brak
 */
void StartMeasuring()
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	workMode = automatic;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <StartMeasuring+0x14>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
	SendCurrentPoint(1);
 8003d02:	2001      	movs	r0, #1
 8003d04:	f7fe f866 	bl	8001dd4 <SendCurrentPoint>
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	200005d0 	.word	0x200005d0

08003d10 <AutomaticHandlerLP>:
 *
 * @param  Brak
 * @retval Brak
 */
void AutomaticHandlerLP()
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
	switch (currentMeasurement.stage)
 8003d14:	4b4c      	ldr	r3, [pc, #304]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003d1a:	2b09      	cmp	r3, #9
 8003d1c:	d06d      	beq.n	8003dfa <AutomaticHandlerLP+0xea>
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	f300 8090 	bgt.w	8003e44 <AutomaticHandlerLP+0x134>
 8003d24:	2b07      	cmp	r3, #7
 8003d26:	d002      	beq.n	8003d2e <AutomaticHandlerLP+0x1e>
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d020      	beq.n	8003d6e <AutomaticHandlerLP+0x5e>
			MoveStepperToPosition(&cStepper, currentMeasurement.cStart);
			currentMeasurement.stage--;
		}
		break;
	}
}
 8003d2c:	e08a      	b.n	8003e44 <AutomaticHandlerLP+0x134>
		MovementHandler(&zStepper);
 8003d2e:	4847      	ldr	r0, [pc, #284]	; (8003e4c <AutomaticHandlerLP+0x13c>)
 8003d30:	f7ff f99e 	bl	8003070 <MovementHandler>
		if (zStepper.changePosition == FALSE)		//Glowica w cStart, skonczyla jazde w Z
 8003d34:	4b45      	ldr	r3, [pc, #276]	; (8003e4c <AutomaticHandlerLP+0x13c>)
 8003d36:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d17d      	bne.n	8003e3a <AutomaticHandlerLP+0x12a>
			currentMeasurement.currentPoint++;
 8003d3e:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a40      	ldr	r2, [pc, #256]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d46:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&cStepper, currentMeasurement.cEnd);
 8003d48:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d4a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8003d4e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d52:	eef0 0a67 	vmov.f32	s1, s15
 8003d56:	483e      	ldr	r0, [pc, #248]	; (8003e50 <AutomaticHandlerLP+0x140>)
 8003d58:	f7ff f926 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage++;
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003d62:	3301      	adds	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8003d6c:	e065      	b.n	8003e3a <AutomaticHandlerLP+0x12a>
		MovementHandler(&cStepper);
 8003d6e:	4838      	ldr	r0, [pc, #224]	; (8003e50 <AutomaticHandlerLP+0x140>)
 8003d70:	f7ff f97e 	bl	8003070 <MovementHandler>
		if (cStepper.changePosition == FALSE)		//Glowica w cStart lub cEnd, skonczyla jazde w C
 8003d74:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <AutomaticHandlerLP+0x140>)
 8003d76:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d15f      	bne.n	8003e3e <AutomaticHandlerLP+0x12e>
			currentMeasurement.currentPoint++;
 8003d7e:	4b32      	ldr	r3, [pc, #200]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	3301      	adds	r3, #1
 8003d84:	4a30      	ldr	r2, [pc, #192]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d86:	6553      	str	r3, [r2, #84]	; 0x54
			if (currentMeasurement.currentPoint >= currentMeasurement.pathPoints)
 8003d88:	4b2f      	ldr	r3, [pc, #188]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d8c:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <AutomaticHandlerLP+0x8a>
				StopMeasuring();
 8003d94:	f000 fb78 	bl	8004488 <StopMeasuring>
		break;
 8003d98:	e051      	b.n	8003e3e <AutomaticHandlerLP+0x12e>
				SendCurrentPoint(currentMeasurement.currentPoint);
 8003d9a:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe f818 	bl	8001dd4 <SendCurrentPoint>
				MoveStepperToPosition(&zStepper, zStepper.currentPosition + currentMeasurement.step);
 8003da4:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <AutomaticHandlerLP+0x13c>)
 8003da6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003daa:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003dac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003db0:	f7fc fa8c 	bl	80002cc <__adddf3>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	ec43 2b17 	vmov	d7, r2, r3
 8003dbc:	eeb0 0a47 	vmov.f32	s0, s14
 8003dc0:	eef0 0a67 	vmov.f32	s1, s15
 8003dc4:	4821      	ldr	r0, [pc, #132]	; (8003e4c <AutomaticHandlerLP+0x13c>)
 8003dc6:	f7ff f8ef 	bl	8002fa8 <MoveStepperToPosition>
				if (currentMeasurement.currentPoint % 4 == 0)
 8003dca:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d108      	bne.n	8003de8 <AutomaticHandlerLP+0xd8>
					currentMeasurement.stage--;
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003dd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003de2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8003de6:	e02a      	b.n	8003e3e <AutomaticHandlerLP+0x12e>
					currentMeasurement.stage++;
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003dea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003dee:	3301      	adds	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003df4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8003df8:	e021      	b.n	8003e3e <AutomaticHandlerLP+0x12e>
		MovementHandler(&zStepper);
 8003dfa:	4814      	ldr	r0, [pc, #80]	; (8003e4c <AutomaticHandlerLP+0x13c>)
 8003dfc:	f7ff f938 	bl	8003070 <MovementHandler>
		if (zStepper.changePosition == FALSE)		//Glowica w cEnd, skonczyla jazde w Z
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <AutomaticHandlerLP+0x13c>)
 8003e02:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11b      	bne.n	8003e42 <AutomaticHandlerLP+0x132>
			currentMeasurement.currentPoint++;
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0e:	3301      	adds	r3, #1
 8003e10:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003e12:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&cStepper, currentMeasurement.cStart);
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003e16:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8003e1e:	eef0 0a67 	vmov.f32	s1, s15
 8003e22:	480b      	ldr	r0, [pc, #44]	; (8003e50 <AutomaticHandlerLP+0x140>)
 8003e24:	f7ff f8c0 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage--;
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003e2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <AutomaticHandlerLP+0x138>)
 8003e34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8003e38:	e003      	b.n	8003e42 <AutomaticHandlerLP+0x132>
		break;
 8003e3a:	bf00      	nop
 8003e3c:	e002      	b.n	8003e44 <AutomaticHandlerLP+0x134>
		break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <AutomaticHandlerLP+0x134>
		break;
 8003e42:	bf00      	nop
}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	200004e8 	.word	0x200004e8
 8003e4c:	20000388 	.word	0x20000388
 8003e50:	20000418 	.word	0x20000418

08003e54 <AutomaticHandlerGD>:
 *
 * @param  Brak
 * @retval Brak
 */
void AutomaticHandlerGD()
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	switch (currentMeasurement.stage)
 8003e58:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003e5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003e5e:	2b09      	cmp	r3, #9
 8003e60:	d06d      	beq.n	8003f3e <AutomaticHandlerGD+0xea>
 8003e62:	2b09      	cmp	r3, #9
 8003e64:	f300 8090 	bgt.w	8003f88 <AutomaticHandlerGD+0x134>
 8003e68:	2b07      	cmp	r3, #7
 8003e6a:	d002      	beq.n	8003e72 <AutomaticHandlerGD+0x1e>
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d020      	beq.n	8003eb2 <AutomaticHandlerGD+0x5e>
			MoveStepperToPosition(&zStepper, currentMeasurement.zStart);
			currentMeasurement.stage--;
		}
		break;
	}
}
 8003e70:	e08a      	b.n	8003f88 <AutomaticHandlerGD+0x134>
		MovementHandler(&cStepper);
 8003e72:	4847      	ldr	r0, [pc, #284]	; (8003f90 <AutomaticHandlerGD+0x13c>)
 8003e74:	f7ff f8fc 	bl	8003070 <MovementHandler>
		if (cStepper.changePosition == FALSE)		//Glowica w zStart, skonczyla jazde w C
 8003e78:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <AutomaticHandlerGD+0x13c>)
 8003e7a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d17d      	bne.n	8003f7e <AutomaticHandlerGD+0x12a>
			currentMeasurement.currentPoint++;
 8003e82:	4b42      	ldr	r3, [pc, #264]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	3301      	adds	r3, #1
 8003e88:	4a40      	ldr	r2, [pc, #256]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003e8a:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&zStepper, currentMeasurement.zEnd);
 8003e8c:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003e8e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003e92:	eeb0 0a47 	vmov.f32	s0, s14
 8003e96:	eef0 0a67 	vmov.f32	s1, s15
 8003e9a:	483e      	ldr	r0, [pc, #248]	; (8003f94 <AutomaticHandlerGD+0x140>)
 8003e9c:	f7ff f884 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage++;
 8003ea0:	4b3a      	ldr	r3, [pc, #232]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003ea2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003eac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8003eb0:	e065      	b.n	8003f7e <AutomaticHandlerGD+0x12a>
		MovementHandler(&zStepper);
 8003eb2:	4838      	ldr	r0, [pc, #224]	; (8003f94 <AutomaticHandlerGD+0x140>)
 8003eb4:	f7ff f8dc 	bl	8003070 <MovementHandler>
		if (zStepper.changePosition == FALSE)		//Glowica w zStart lub zEnd, skonczyla jazde w Z
 8003eb8:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <AutomaticHandlerGD+0x140>)
 8003eba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d15f      	bne.n	8003f82 <AutomaticHandlerGD+0x12e>
			currentMeasurement.currentPoint++;
 8003ec2:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	4a30      	ldr	r2, [pc, #192]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003eca:	6553      	str	r3, [r2, #84]	; 0x54
			if (currentMeasurement.currentPoint >= currentMeasurement.pathPoints)
 8003ecc:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003ece:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ed0:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d302      	bcc.n	8003ede <AutomaticHandlerGD+0x8a>
				StopMeasuring();
 8003ed8:	f000 fad6 	bl	8004488 <StopMeasuring>
		break;
 8003edc:	e051      	b.n	8003f82 <AutomaticHandlerGD+0x12e>
				SendCurrentPoint(currentMeasurement.currentPoint);
 8003ede:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd ff76 	bl	8001dd4 <SendCurrentPoint>
				MoveStepperToPosition(&cStepper, cStepper.currentPosition + currentMeasurement.step);
 8003ee8:	4b29      	ldr	r3, [pc, #164]	; (8003f90 <AutomaticHandlerGD+0x13c>)
 8003eea:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003eee:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003ef0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003ef4:	f7fc f9ea 	bl	80002cc <__adddf3>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	ec43 2b17 	vmov	d7, r2, r3
 8003f00:	eeb0 0a47 	vmov.f32	s0, s14
 8003f04:	eef0 0a67 	vmov.f32	s1, s15
 8003f08:	4821      	ldr	r0, [pc, #132]	; (8003f90 <AutomaticHandlerGD+0x13c>)
 8003f0a:	f7ff f84d 	bl	8002fa8 <MoveStepperToPosition>
				if (currentMeasurement.currentPoint % 4 == 0)
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d108      	bne.n	8003f2c <AutomaticHandlerGD+0xd8>
					currentMeasurement.stage--;
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8003f2a:	e02a      	b.n	8003f82 <AutomaticHandlerGD+0x12e>
					currentMeasurement.stage++;
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003f32:	3301      	adds	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8003f3c:	e021      	b.n	8003f82 <AutomaticHandlerGD+0x12e>
		MovementHandler(&cStepper);
 8003f3e:	4814      	ldr	r0, [pc, #80]	; (8003f90 <AutomaticHandlerGD+0x13c>)
 8003f40:	f7ff f896 	bl	8003070 <MovementHandler>
		if (cStepper.changePosition == FALSE)		//Glowica w zEnd, skonczyla jazde w C
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <AutomaticHandlerGD+0x13c>)
 8003f46:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11b      	bne.n	8003f86 <AutomaticHandlerGD+0x132>
			currentMeasurement.currentPoint++;
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	3301      	adds	r3, #1
 8003f54:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f56:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&zStepper, currentMeasurement.zStart);
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f5a:	ed93 7b08 	vldr	d7, [r3, #32]
 8003f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f62:	eef0 0a67 	vmov.f32	s1, s15
 8003f66:	480b      	ldr	r0, [pc, #44]	; (8003f94 <AutomaticHandlerGD+0x140>)
 8003f68:	f7ff f81e 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage--;
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <AutomaticHandlerGD+0x138>)
 8003f78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8003f7c:	e003      	b.n	8003f86 <AutomaticHandlerGD+0x132>
		break;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <AutomaticHandlerGD+0x134>
		break;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <AutomaticHandlerGD+0x134>
		break;
 8003f86:	bf00      	nop
}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200004e8 	.word	0x200004e8
 8003f90:	20000418 	.word	0x20000418
 8003f94:	20000388 	.word	0x20000388

08003f98 <AutomaticHandlerSpiral>:
 *
 * @param  Brak
 * @retval Brak
 */
void AutomaticHandlerSpiral()
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
	switch (currentMeasurement.stage)
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <AutomaticHandlerSpiral+0x6c>)
 8003f9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003fa2:	2b07      	cmp	r3, #7
 8003fa4:	d002      	beq.n	8003fac <AutomaticHandlerSpiral+0x14>
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d01f      	beq.n	8003fea <AutomaticHandlerSpiral+0x52>
		{
			StopMeasuring();
		}
		break;
	}
}
 8003faa:	e029      	b.n	8004000 <AutomaticHandlerSpiral+0x68>
		if (currentMeasurement.direction == 1)
 8003fac:	4b15      	ldr	r3, [pc, #84]	; (8004004 <AutomaticHandlerSpiral+0x6c>)
 8003fae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d103      	bne.n	8003fbe <AutomaticHandlerSpiral+0x26>
			GoPlus(&cStepper);
 8003fb6:	4814      	ldr	r0, [pc, #80]	; (8004008 <AutomaticHandlerSpiral+0x70>)
 8003fb8:	f7fe ff08 	bl	8002dcc <GoPlus>
 8003fbc:	e002      	b.n	8003fc4 <AutomaticHandlerSpiral+0x2c>
			GoMinus(&cStepper);
 8003fbe:	4812      	ldr	r0, [pc, #72]	; (8004008 <AutomaticHandlerSpiral+0x70>)
 8003fc0:	f7fe ff10 	bl	8002de4 <GoMinus>
		MoveStepperToPosition(&zStepper, currentMeasurement.zEnd);
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <AutomaticHandlerSpiral+0x6c>)
 8003fc6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003fca:	eeb0 0a47 	vmov.f32	s0, s14
 8003fce:	eef0 0a67 	vmov.f32	s1, s15
 8003fd2:	480e      	ldr	r0, [pc, #56]	; (800400c <AutomaticHandlerSpiral+0x74>)
 8003fd4:	f7fe ffe8 	bl	8002fa8 <MoveStepperToPosition>
		currentMeasurement.stage++;
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <AutomaticHandlerSpiral+0x6c>)
 8003fda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <AutomaticHandlerSpiral+0x6c>)
 8003fe4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8003fe8:	e00a      	b.n	8004000 <AutomaticHandlerSpiral+0x68>
		MovementHandler(&zStepper);
 8003fea:	4808      	ldr	r0, [pc, #32]	; (800400c <AutomaticHandlerSpiral+0x74>)
 8003fec:	f7ff f840 	bl	8003070 <MovementHandler>
		if (zStepper.changePosition == FALSE)
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <AutomaticHandlerSpiral+0x74>)
 8003ff2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <AutomaticHandlerSpiral+0x66>
			StopMeasuring();
 8003ffa:	f000 fa45 	bl	8004488 <StopMeasuring>
		break;
 8003ffe:	bf00      	nop
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}
 8004004:	200004e8 	.word	0x200004e8
 8004008:	20000418 	.word	0x20000418
 800400c:	20000388 	.word	0x20000388

08004010 <AutomaticHandlerCage>:
 *
 * @param  Brak
 * @retval Brak
 */
void AutomaticHandlerCage()
{
 8004010:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004014:	af00      	add	r7, sp, #0
	switch (currentMeasurement.stage)
 8004016:	4ba4      	ldr	r3, [pc, #656]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004018:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800401c:	3b07      	subs	r3, #7
 800401e:	2b0c      	cmp	r3, #12
 8004020:	f200 8173 	bhi.w	800430a <AutomaticHandlerCage+0x2fa>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <AutomaticHandlerCage+0x1c>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004061 	.word	0x08004061
 8004030:	080040a3 	.word	0x080040a3
 8004034:	08004185 	.word	0x08004185
 8004038:	0800430b 	.word	0x0800430b
 800403c:	0800430b 	.word	0x0800430b
 8004040:	0800430b 	.word	0x0800430b
 8004044:	0800430b 	.word	0x0800430b
 8004048:	0800430b 	.word	0x0800430b
 800404c:	0800430b 	.word	0x0800430b
 8004050:	0800430b 	.word	0x0800430b
 8004054:	080041c7 	.word	0x080041c7
 8004058:	08004209 	.word	0x08004209
 800405c:	080042b5 	.word	0x080042b5
	{
	// najpierw LP
	// Glowica w punkcie poczatkowym Z i C
	case 7:
		MovementHandler(&zStepper);
 8004060:	4892      	ldr	r0, [pc, #584]	; (80042ac <AutomaticHandlerCage+0x29c>)
 8004062:	f7ff f805 	bl	8003070 <MovementHandler>
		if (zStepper.changePosition == FALSE)		//Glowica w cStart, skonczyla jazde w Z
 8004066:	4b91      	ldr	r3, [pc, #580]	; (80042ac <AutomaticHandlerCage+0x29c>)
 8004068:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 8141 	bne.w	80042f4 <AutomaticHandlerCage+0x2e4>
		{
			currentMeasurement.currentPoint++;
 8004072:	4b8d      	ldr	r3, [pc, #564]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	3301      	adds	r3, #1
 8004078:	4a8b      	ldr	r2, [pc, #556]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800407a:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&cStepper, currentMeasurement.cEnd);
 800407c:	4b8a      	ldr	r3, [pc, #552]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800407e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004082:	eeb0 0a47 	vmov.f32	s0, s14
 8004086:	eef0 0a67 	vmov.f32	s1, s15
 800408a:	4889      	ldr	r0, [pc, #548]	; (80042b0 <AutomaticHandlerCage+0x2a0>)
 800408c:	f7fe ff8c 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage++;
 8004090:	4b85      	ldr	r3, [pc, #532]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004092:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004096:	3301      	adds	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	4b83      	ldr	r3, [pc, #524]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800409c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		}
		break;
 80040a0:	e128      	b.n	80042f4 <AutomaticHandlerCage+0x2e4>

	case 8:
		MovementHandler(&cStepper);
 80040a2:	4883      	ldr	r0, [pc, #524]	; (80042b0 <AutomaticHandlerCage+0x2a0>)
 80040a4:	f7fe ffe4 	bl	8003070 <MovementHandler>
		if (cStepper.changePosition == FALSE)		//Glowica w cStart lub cEnd, skonczyla jazde w C
 80040a8:	4b81      	ldr	r3, [pc, #516]	; (80042b0 <AutomaticHandlerCage+0x2a0>)
 80040aa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 8122 	bne.w	80042f8 <AutomaticHandlerCage+0x2e8>
		{
			currentMeasurement.currentPoint++;
 80040b4:	4b7c      	ldr	r3, [pc, #496]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	3301      	adds	r3, #1
 80040ba:	4a7b      	ldr	r2, [pc, #492]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80040bc:	6553      	str	r3, [r2, #84]	; 0x54
			if (currentMeasurement.currentPoint >= currentMeasurement.pathPoints)
 80040be:	4b7a      	ldr	r3, [pc, #488]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80040c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c2:	4b79      	ldr	r3, [pc, #484]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d32c      	bcc.n	8004124 <AutomaticHandlerCage+0x114>
			{
				currentMeasurement.currentPoint = 0;
 80040ca:	4b77      	ldr	r3, [pc, #476]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54
				if (fabs(cStepper.currentPosition - currentMeasurement.cEnd) < 0.001)		//głowica kończy w cEnd
 80040d0:	4b77      	ldr	r3, [pc, #476]	; (80042b0 <AutomaticHandlerCage+0x2a0>)
 80040d2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80040d6:	4b74      	ldr	r3, [pc, #464]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80040d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80040dc:	f7fc f8f4 	bl	80002c8 <__aeabi_dsub>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4690      	mov	r8, r2
 80040e6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80040ea:	a36d      	add	r3, pc, #436	; (adr r3, 80042a0 <AutomaticHandlerCage+0x290>)
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	4640      	mov	r0, r8
 80040f2:	4649      	mov	r1, r9
 80040f4:	f7fc fd12 	bl	8000b1c <__aeabi_dcmplt>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d004      	beq.n	8004108 <AutomaticHandlerCage+0xf8>
					currentMeasurement.stage = 17;
 80040fe:	4b6a      	ldr	r3, [pc, #424]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004100:	2211      	movs	r2, #17
 8004102:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				else
					currentMeasurement.stage++;
			}

		}
		break;
 8004106:	e0f7      	b.n	80042f8 <AutomaticHandlerCage+0x2e8>
					currentMeasurement.step2 = -currentMeasurement.step2;
 8004108:	4b67      	ldr	r3, [pc, #412]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800410a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800410e:	4614      	mov	r4, r2
 8004110:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004114:	4b64      	ldr	r3, [pc, #400]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004116:	e9c3 4504 	strd	r4, r5, [r3, #16]
					currentMeasurement.stage = 19;
 800411a:	4b63      	ldr	r3, [pc, #396]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800411c:	2213      	movs	r2, #19
 800411e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8004122:	e0e9      	b.n	80042f8 <AutomaticHandlerCage+0x2e8>
				SendCurrentPoint(currentMeasurement.currentPoint);
 8004124:	4b60      	ldr	r3, [pc, #384]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	4618      	mov	r0, r3
 800412a:	f7fd fe53 	bl	8001dd4 <SendCurrentPoint>
				MoveStepperToPosition(&zStepper, zStepper.currentPosition + currentMeasurement.step);
 800412e:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <AutomaticHandlerCage+0x29c>)
 8004130:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004134:	4b5c      	ldr	r3, [pc, #368]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004136:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800413a:	f7fc f8c7 	bl	80002cc <__adddf3>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	ec43 2b17 	vmov	d7, r2, r3
 8004146:	eeb0 0a47 	vmov.f32	s0, s14
 800414a:	eef0 0a67 	vmov.f32	s1, s15
 800414e:	4857      	ldr	r0, [pc, #348]	; (80042ac <AutomaticHandlerCage+0x29c>)
 8004150:	f7fe ff2a 	bl	8002fa8 <MoveStepperToPosition>
				if (currentMeasurement.currentPoint % 4 == 0)
 8004154:	4b54      	ldr	r3, [pc, #336]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d108      	bne.n	8004172 <AutomaticHandlerCage+0x162>
					currentMeasurement.stage--;
 8004160:	4b51      	ldr	r3, [pc, #324]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004162:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	4b4f      	ldr	r3, [pc, #316]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800416c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8004170:	e0c2      	b.n	80042f8 <AutomaticHandlerCage+0x2e8>
					currentMeasurement.stage++;
 8004172:	4b4d      	ldr	r3, [pc, #308]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004174:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004178:	3301      	adds	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800417e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8004182:	e0b9      	b.n	80042f8 <AutomaticHandlerCage+0x2e8>
	case 9:
		MovementHandler(&zStepper);
 8004184:	4849      	ldr	r0, [pc, #292]	; (80042ac <AutomaticHandlerCage+0x29c>)
 8004186:	f7fe ff73 	bl	8003070 <MovementHandler>
		if (zStepper.changePosition == FALSE)		//Glowica w cEnd, skonczyla jazde w Z
 800418a:	4b48      	ldr	r3, [pc, #288]	; (80042ac <AutomaticHandlerCage+0x29c>)
 800418c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 80b3 	bne.w	80042fc <AutomaticHandlerCage+0x2ec>
		{
			currentMeasurement.currentPoint++;
 8004196:	4b44      	ldr	r3, [pc, #272]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	3301      	adds	r3, #1
 800419c:	4a42      	ldr	r2, [pc, #264]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800419e:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&cStepper, currentMeasurement.cStart);
 80041a0:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80041a2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80041a6:	eeb0 0a47 	vmov.f32	s0, s14
 80041aa:	eef0 0a67 	vmov.f32	s1, s15
 80041ae:	4840      	ldr	r0, [pc, #256]	; (80042b0 <AutomaticHandlerCage+0x2a0>)
 80041b0:	f7fe fefa 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage--;
 80041b4:	4b3c      	ldr	r3, [pc, #240]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80041b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	4b3a      	ldr	r3, [pc, #232]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80041c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		}
		break;
 80041c4:	e09a      	b.n	80042fc <AutomaticHandlerCage+0x2ec>

	// Po zakonczeniu LP - GD od konca
	case 17:
		MovementHandler(&cStepper);
 80041c6:	483a      	ldr	r0, [pc, #232]	; (80042b0 <AutomaticHandlerCage+0x2a0>)
 80041c8:	f7fe ff52 	bl	8003070 <MovementHandler>
		if (cStepper.changePosition == FALSE)		//Glowica w zEnd, skonczyla jazde w C
 80041cc:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <AutomaticHandlerCage+0x2a0>)
 80041ce:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f040 8094 	bne.w	8004300 <AutomaticHandlerCage+0x2f0>
		{
			currentMeasurement.currentPoint++;
 80041d8:	4b33      	ldr	r3, [pc, #204]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	3301      	adds	r3, #1
 80041de:	4a32      	ldr	r2, [pc, #200]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80041e0:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&zStepper, currentMeasurement.zStart);
 80041e2:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80041e4:	ed93 7b08 	vldr	d7, [r3, #32]
 80041e8:	eeb0 0a47 	vmov.f32	s0, s14
 80041ec:	eef0 0a67 	vmov.f32	s1, s15
 80041f0:	482e      	ldr	r0, [pc, #184]	; (80042ac <AutomaticHandlerCage+0x29c>)
 80041f2:	f7fe fed9 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage++;
 80041f6:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <AutomaticHandlerCage+0x298>)
 80041f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80041fc:	3301      	adds	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004202:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		}
		break;
 8004206:	e07b      	b.n	8004300 <AutomaticHandlerCage+0x2f0>

	case 18:
		MovementHandler(&zStepper);
 8004208:	4828      	ldr	r0, [pc, #160]	; (80042ac <AutomaticHandlerCage+0x29c>)
 800420a:	f7fe ff31 	bl	8003070 <MovementHandler>
		if (zStepper.changePosition == FALSE)		//Glowica w zStart lub zEnd, skonczyla jazde w Z
 800420e:	4b27      	ldr	r3, [pc, #156]	; (80042ac <AutomaticHandlerCage+0x29c>)
 8004210:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004214:	2b00      	cmp	r3, #0
 8004216:	d175      	bne.n	8004304 <AutomaticHandlerCage+0x2f4>
		{
			currentMeasurement.currentPoint++;
 8004218:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	3301      	adds	r3, #1
 800421e:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004220:	6553      	str	r3, [r2, #84]	; 0x54
			if (currentMeasurement.currentPoint >= currentMeasurement.pathPoints2)
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <AutomaticHandlerCage+0x224>
			{
				StopMeasuring();
 800422e:	f000 f92b 	bl	8004488 <StopMeasuring>
				else
					currentMeasurement.stage++;
			}

		}
		break;
 8004232:	e067      	b.n	8004304 <AutomaticHandlerCage+0x2f4>
				SendCurrentPoint(currentMeasurement.currentPoint + currentMeasurement.pathPoints);
 8004234:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004238:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	4413      	add	r3, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f7fd fdc8 	bl	8001dd4 <SendCurrentPoint>
				MoveStepperToPosition(&cStepper, cStepper.currentPosition + currentMeasurement.step2);
 8004244:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <AutomaticHandlerCage+0x2a0>)
 8004246:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800424a:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800424c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004250:	f7fc f83c 	bl	80002cc <__adddf3>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	ec43 2b17 	vmov	d7, r2, r3
 800425c:	eeb0 0a47 	vmov.f32	s0, s14
 8004260:	eef0 0a67 	vmov.f32	s1, s15
 8004264:	4812      	ldr	r0, [pc, #72]	; (80042b0 <AutomaticHandlerCage+0x2a0>)
 8004266:	f7fe fe9f 	bl	8002fa8 <MoveStepperToPosition>
				if (currentMeasurement.currentPoint % 4 == 0)
 800426a:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d108      	bne.n	8004288 <AutomaticHandlerCage+0x278>
					currentMeasurement.stage--;
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004278:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004282:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8004286:	e03d      	b.n	8004304 <AutomaticHandlerCage+0x2f4>
					currentMeasurement.stage++;
 8004288:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <AutomaticHandlerCage+0x298>)
 800428a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800428e:	3301      	adds	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <AutomaticHandlerCage+0x298>)
 8004294:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8004298:	e034      	b.n	8004304 <AutomaticHandlerCage+0x2f4>
 800429a:	bf00      	nop
 800429c:	f3af 8000 	nop.w
 80042a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80042a4:	3f50624d 	.word	0x3f50624d
 80042a8:	200004e8 	.word	0x200004e8
 80042ac:	20000388 	.word	0x20000388
 80042b0:	20000418 	.word	0x20000418
	case 19:
		MovementHandler(&cStepper);
 80042b4:	4816      	ldr	r0, [pc, #88]	; (8004310 <AutomaticHandlerCage+0x300>)
 80042b6:	f7fe fedb 	bl	8003070 <MovementHandler>
		if (cStepper.changePosition == FALSE)		//Glowica w zStart, skonczyla jazde w C
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <AutomaticHandlerCage+0x300>)
 80042bc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d121      	bne.n	8004308 <AutomaticHandlerCage+0x2f8>
		{
			currentMeasurement.currentPoint++;
 80042c4:	4b13      	ldr	r3, [pc, #76]	; (8004314 <AutomaticHandlerCage+0x304>)
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	3301      	adds	r3, #1
 80042ca:	4a12      	ldr	r2, [pc, #72]	; (8004314 <AutomaticHandlerCage+0x304>)
 80042cc:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&zStepper, currentMeasurement.zEnd);
 80042ce:	4b11      	ldr	r3, [pc, #68]	; (8004314 <AutomaticHandlerCage+0x304>)
 80042d0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80042d4:	eeb0 0a47 	vmov.f32	s0, s14
 80042d8:	eef0 0a67 	vmov.f32	s1, s15
 80042dc:	480e      	ldr	r0, [pc, #56]	; (8004318 <AutomaticHandlerCage+0x308>)
 80042de:	f7fe fe63 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage--;
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <AutomaticHandlerCage+0x304>)
 80042e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <AutomaticHandlerCage+0x304>)
 80042ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		}
		break;
 80042f2:	e009      	b.n	8004308 <AutomaticHandlerCage+0x2f8>
		break;
 80042f4:	bf00      	nop
 80042f6:	e008      	b.n	800430a <AutomaticHandlerCage+0x2fa>
		break;
 80042f8:	bf00      	nop
 80042fa:	e006      	b.n	800430a <AutomaticHandlerCage+0x2fa>
		break;
 80042fc:	bf00      	nop
 80042fe:	e004      	b.n	800430a <AutomaticHandlerCage+0x2fa>
		break;
 8004300:	bf00      	nop
 8004302:	e002      	b.n	800430a <AutomaticHandlerCage+0x2fa>
		break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <AutomaticHandlerCage+0x2fa>
		break;
 8004308:	bf00      	nop
	}
}
 800430a:	bf00      	nop
 800430c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004310:	20000418 	.word	0x20000418
 8004314:	200004e8 	.word	0x200004e8
 8004318:	20000388 	.word	0x20000388

0800431c <AutomaticHandlerXY>:
 *
 * @param  Brak
 * @retval Brak
 */
void AutomaticHandlerXY()
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
	switch (currentMeasurement.stage)
 8004320:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004326:	2b09      	cmp	r3, #9
 8004328:	d06d      	beq.n	8004406 <AutomaticHandlerXY+0xea>
 800432a:	2b09      	cmp	r3, #9
 800432c:	f300 8090 	bgt.w	8004450 <AutomaticHandlerXY+0x134>
 8004330:	2b07      	cmp	r3, #7
 8004332:	d002      	beq.n	800433a <AutomaticHandlerXY+0x1e>
 8004334:	2b08      	cmp	r3, #8
 8004336:	d020      	beq.n	800437a <AutomaticHandlerXY+0x5e>
			currentMeasurement.stage--;
		}
		break;

	}
}
 8004338:	e08a      	b.n	8004450 <AutomaticHandlerXY+0x134>
		MovementHandler(&cStepper);
 800433a:	4847      	ldr	r0, [pc, #284]	; (8004458 <AutomaticHandlerXY+0x13c>)
 800433c:	f7fe fe98 	bl	8003070 <MovementHandler>
		if (cStepper.changePosition == FALSE)		//Glowica w xStart, skonczyla jazde w C
 8004340:	4b45      	ldr	r3, [pc, #276]	; (8004458 <AutomaticHandlerXY+0x13c>)
 8004342:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004346:	2b00      	cmp	r3, #0
 8004348:	d17d      	bne.n	8004446 <AutomaticHandlerXY+0x12a>
			currentMeasurement.currentPoint++;
 800434a:	4b42      	ldr	r3, [pc, #264]	; (8004454 <AutomaticHandlerXY+0x138>)
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	3301      	adds	r3, #1
 8004350:	4a40      	ldr	r2, [pc, #256]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004352:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&xStepper, currentMeasurement.xEnd);
 8004354:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004356:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800435a:	eeb0 0a47 	vmov.f32	s0, s14
 800435e:	eef0 0a67 	vmov.f32	s1, s15
 8004362:	483e      	ldr	r0, [pc, #248]	; (800445c <AutomaticHandlerXY+0x140>)
 8004364:	f7fe fe20 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage++;
 8004368:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <AutomaticHandlerXY+0x138>)
 800436a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800436e:	3301      	adds	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004374:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8004378:	e065      	b.n	8004446 <AutomaticHandlerXY+0x12a>
		MovementHandler(&xStepper);
 800437a:	4838      	ldr	r0, [pc, #224]	; (800445c <AutomaticHandlerXY+0x140>)
 800437c:	f7fe fe78 	bl	8003070 <MovementHandler>
		if (xStepper.changePosition == FALSE)		//Glowica w xStart lub xEnd, skonczyla jazde w Z
 8004380:	4b36      	ldr	r3, [pc, #216]	; (800445c <AutomaticHandlerXY+0x140>)
 8004382:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004386:	2b00      	cmp	r3, #0
 8004388:	d15f      	bne.n	800444a <AutomaticHandlerXY+0x12e>
			currentMeasurement.currentPoint++;
 800438a:	4b32      	ldr	r3, [pc, #200]	; (8004454 <AutomaticHandlerXY+0x138>)
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	3301      	adds	r3, #1
 8004390:	4a30      	ldr	r2, [pc, #192]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004392:	6553      	str	r3, [r2, #84]	; 0x54
			if (currentMeasurement.currentPoint >= currentMeasurement.pathPoints)
 8004394:	4b2f      	ldr	r3, [pc, #188]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004396:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004398:	4b2e      	ldr	r3, [pc, #184]	; (8004454 <AutomaticHandlerXY+0x138>)
 800439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439c:	429a      	cmp	r2, r3
 800439e:	d302      	bcc.n	80043a6 <AutomaticHandlerXY+0x8a>
				StopMeasuring();
 80043a0:	f000 f872 	bl	8004488 <StopMeasuring>
		break;
 80043a4:	e051      	b.n	800444a <AutomaticHandlerXY+0x12e>
				SendCurrentPoint(currentMeasurement.currentPoint);
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <AutomaticHandlerXY+0x138>)
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd fd12 	bl	8001dd4 <SendCurrentPoint>
				MoveStepperToPosition(&cStepper, cStepper.currentPosition + currentMeasurement.step);
 80043b0:	4b29      	ldr	r3, [pc, #164]	; (8004458 <AutomaticHandlerXY+0x13c>)
 80043b2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80043b6:	4b27      	ldr	r3, [pc, #156]	; (8004454 <AutomaticHandlerXY+0x138>)
 80043b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043bc:	f7fb ff86 	bl	80002cc <__adddf3>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	ec43 2b17 	vmov	d7, r2, r3
 80043c8:	eeb0 0a47 	vmov.f32	s0, s14
 80043cc:	eef0 0a67 	vmov.f32	s1, s15
 80043d0:	4821      	ldr	r0, [pc, #132]	; (8004458 <AutomaticHandlerXY+0x13c>)
 80043d2:	f7fe fde9 	bl	8002fa8 <MoveStepperToPosition>
				if (currentMeasurement.currentPoint % 4 == 0)
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <AutomaticHandlerXY+0x138>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d108      	bne.n	80043f4 <AutomaticHandlerXY+0xd8>
					currentMeasurement.stage--;
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <AutomaticHandlerXY+0x138>)
 80043e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <AutomaticHandlerXY+0x138>)
 80043ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 80043f2:	e02a      	b.n	800444a <AutomaticHandlerXY+0x12e>
					currentMeasurement.stage++;
 80043f4:	4b17      	ldr	r3, [pc, #92]	; (8004454 <AutomaticHandlerXY+0x138>)
 80043f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80043fa:	3301      	adds	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004400:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8004404:	e021      	b.n	800444a <AutomaticHandlerXY+0x12e>
		MovementHandler(&cStepper);
 8004406:	4814      	ldr	r0, [pc, #80]	; (8004458 <AutomaticHandlerXY+0x13c>)
 8004408:	f7fe fe32 	bl	8003070 <MovementHandler>
		if (cStepper.changePosition == FALSE)		//Glowica w xEnd, skonczyla jazde w C
 800440c:	4b12      	ldr	r3, [pc, #72]	; (8004458 <AutomaticHandlerXY+0x13c>)
 800440e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004412:	2b00      	cmp	r3, #0
 8004414:	d11b      	bne.n	800444e <AutomaticHandlerXY+0x132>
			currentMeasurement.currentPoint++;
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	3301      	adds	r3, #1
 800441c:	4a0d      	ldr	r2, [pc, #52]	; (8004454 <AutomaticHandlerXY+0x138>)
 800441e:	6553      	str	r3, [r2, #84]	; 0x54
			MoveStepperToPosition(&xStepper, currentMeasurement.xStart);
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004422:	ed93 7b06 	vldr	d7, [r3, #24]
 8004426:	eeb0 0a47 	vmov.f32	s0, s14
 800442a:	eef0 0a67 	vmov.f32	s1, s15
 800442e:	480b      	ldr	r0, [pc, #44]	; (800445c <AutomaticHandlerXY+0x140>)
 8004430:	f7fe fdba 	bl	8002fa8 <MoveStepperToPosition>
			currentMeasurement.stage--;
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004436:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <AutomaticHandlerXY+0x138>)
 8004440:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		break;
 8004444:	e003      	b.n	800444e <AutomaticHandlerXY+0x132>
		break;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <AutomaticHandlerXY+0x134>
		break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <AutomaticHandlerXY+0x134>
		break;
 800444e:	bf00      	nop
}
 8004450:	bf00      	nop
 8004452:	bd80      	pop	{r7, pc}
 8004454:	200004e8 	.word	0x200004e8
 8004458:	20000418 	.word	0x20000418
 800445c:	200002f8 	.word	0x200002f8

08004460 <ResetTargetPositions>:
 *
 * @param  _stepper 	wskaznik do zadeklarowanej struktury silnika głównego
 * @retval Brak
 */
void ResetTargetPositions(struct Stepper* _stepper)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	_stepper->changePosition = FALSE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	_stepper->targetPosition = _stepper->currentPosition;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <StopMeasuring>:
 *
 * @param  Brak
 * @retval Brak
 */
void StopMeasuring()
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0

	ChangeStepperState(&xStepper, stopped);
 800448c:	2100      	movs	r1, #0
 800448e:	4821      	ldr	r0, [pc, #132]	; (8004514 <StopMeasuring+0x8c>)
 8004490:	f7fe fbdc 	bl	8002c4c <ChangeStepperState>
	ChangeStepperState(&zStepper, stopped);
 8004494:	2100      	movs	r1, #0
 8004496:	4820      	ldr	r0, [pc, #128]	; (8004518 <StopMeasuring+0x90>)
 8004498:	f7fe fbd8 	bl	8002c4c <ChangeStepperState>
	ChangeStepperState(&cStepper, stopped);
 800449c:	2100      	movs	r1, #0
 800449e:	481f      	ldr	r0, [pc, #124]	; (800451c <StopMeasuring+0x94>)
 80044a0:	f7fe fbd4 	bl	8002c4c <ChangeStepperState>

	SendCurrentPoint(currentMeasurement.currentPoint);
 80044a4:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <StopMeasuring+0x98>)
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fd fc93 	bl	8001dd4 <SendCurrentPoint>

	ResetTargetPositions(&xStepper);
 80044ae:	4819      	ldr	r0, [pc, #100]	; (8004514 <StopMeasuring+0x8c>)
 80044b0:	f7ff ffd6 	bl	8004460 <ResetTargetPositions>
	ResetTargetPositions(&zStepper);
 80044b4:	4818      	ldr	r0, [pc, #96]	; (8004518 <StopMeasuring+0x90>)
 80044b6:	f7ff ffd3 	bl	8004460 <ResetTargetPositions>
	ResetTargetPositions(&cStepper);
 80044ba:	4818      	ldr	r0, [pc, #96]	; (800451c <StopMeasuring+0x94>)
 80044bc:	f7ff ffd0 	bl	8004460 <ResetTargetPositions>

	ChangeStepperUVState(&uStepper, stopped);
 80044c0:	2100      	movs	r1, #0
 80044c2:	4818      	ldr	r0, [pc, #96]	; (8004524 <StopMeasuring+0x9c>)
 80044c4:	f7fe fc04 	bl	8002cd0 <ChangeStepperUVState>
	ChangeStepperUVState(&vStepper, stopped);
 80044c8:	2100      	movs	r1, #0
 80044ca:	4817      	ldr	r0, [pc, #92]	; (8004528 <StopMeasuring+0xa0>)
 80044cc:	f7fe fc00 	bl	8002cd0 <ChangeStepperUVState>

	ChangeStepperSpeed(&xStepper, manualSpeed);
 80044d0:	2104      	movs	r1, #4
 80044d2:	4810      	ldr	r0, [pc, #64]	; (8004514 <StopMeasuring+0x8c>)
 80044d4:	f7fe fcb2 	bl	8002e3c <ChangeStepperSpeed>
	ChangeStepperSpeed(&zStepper, manualSpeed);
 80044d8:	2104      	movs	r1, #4
 80044da:	480f      	ldr	r0, [pc, #60]	; (8004518 <StopMeasuring+0x90>)
 80044dc:	f7fe fcae 	bl	8002e3c <ChangeStepperSpeed>
	ChangeStepperSpeed(&cStepper, manualSpeed);
 80044e0:	2104      	movs	r1, #4
 80044e2:	480e      	ldr	r0, [pc, #56]	; (800451c <StopMeasuring+0x94>)
 80044e4:	f7fe fcaa 	bl	8002e3c <ChangeStepperSpeed>


	currentMeasurement.pathPoints = 0;
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <StopMeasuring+0x98>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	64da      	str	r2, [r3, #76]	; 0x4c
	currentMeasurement.pathPoints2 = 0;
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <StopMeasuring+0x98>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	651a      	str	r2, [r3, #80]	; 0x50
	currentMeasurement.currentPoint = 0;
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <StopMeasuring+0x98>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54

	xStepper.isLocked = FALSE;
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <StopMeasuring+0x8c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	zStepper.StepperTimer->PSC = 179;
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <StopMeasuring+0x90>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	22b3      	movs	r2, #179	; 0xb3
 8004508:	629a      	str	r2, [r3, #40]	; 0x28


	workMode = manual;
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <StopMeasuring+0xa4>)
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
	//SendCurrentPosition(xStepper.currentPosition, zStepper.currentPosition, cStepper.currentPosition);
}
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}
 8004514:	200002f8 	.word	0x200002f8
 8004518:	20000388 	.word	0x20000388
 800451c:	20000418 	.word	0x20000418
 8004520:	200004e8 	.word	0x200004e8
 8004524:	200004a8 	.word	0x200004a8
 8004528:	200004c8 	.word	0x200004c8
 800452c:	200005d0 	.word	0x200005d0

08004530 <AlignAxis>:
 *
 * @param  _cal		wskaźnik do struktury Calibration zawierającej dane zebrane podczas pomiaru
 * @retval Brak
 */
void AlignAxis(struct Calibration *_cal)
{
 8004530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004534:	b0a4      	sub	sp, #144	; 0x90
 8004536:	af00      	add	r7, sp, #0
 8004538:	6178      	str	r0, [r7, #20]
	double u[3];
	double v[3];
	for (int i = 0; i < 3; i++)
 800453a:	2300      	movs	r3, #0
 800453c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004540:	e0c4      	b.n	80046cc <AlignAxis+0x19c>
	{
		u[i] = (_cal->xData[i] + ((double)_cal->adcRead[i]/4096.0) - 1.0) * cos(_cal->cData[i]*PI/180.0);
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004556:	3212      	adds	r2, #18
 8004558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fb fff1 	bl	8000544 <__aeabi_ui2d>
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <AlignAxis+0x190>)
 8004568:	f7fc f990 	bl	800088c <__aeabi_ddiv>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4620      	mov	r0, r4
 8004572:	4629      	mov	r1, r5
 8004574:	f7fb feaa 	bl	80002cc <__adddf3>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <AlignAxis+0x194>)
 8004586:	f7fb fe9f 	bl	80002c8 <__aeabi_dsub>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4614      	mov	r4, r2
 8004590:	461d      	mov	r5, r3
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004598:	3306      	adds	r3, #6
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045a2:	a345      	add	r3, pc, #276	; (adr r3, 80046b8 <AlignAxis+0x188>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f7fc f846 	bl	8000638 <__aeabi_dmul>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4610      	mov	r0, r2
 80045b2:	4619      	mov	r1, r3
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	4b43      	ldr	r3, [pc, #268]	; (80046c8 <AlignAxis+0x198>)
 80045ba:	f7fc f967 	bl	800088c <__aeabi_ddiv>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	ec43 2b17 	vmov	d7, r2, r3
 80045c6:	eeb0 0a47 	vmov.f32	s0, s14
 80045ca:	eef0 0a67 	vmov.f32	s1, s15
 80045ce:	f006 ff73 	bl	800b4b8 <cos>
 80045d2:	ec53 2b10 	vmov	r2, r3, d0
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fc f82d 	bl	8000638 <__aeabi_dmul>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80045e6:	00c9      	lsls	r1, r1, #3
 80045e8:	3180      	adds	r1, #128	; 0x80
 80045ea:	f107 0010 	add.w	r0, r7, #16
 80045ee:	4401      	add	r1, r0
 80045f0:	3960      	subs	r1, #96	; 0x60
 80045f2:	e9c1 2300 	strd	r2, r3, [r1]
		v[i] = (_cal->xData[i] + ((double)_cal->adcRead[i]/4096.0) - 1.0) * sin(_cal->cData[i]*PI/180.0);
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4413      	add	r3, r2
 8004600:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800460a:	3212      	adds	r2, #18
 800460c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb ff97 	bl	8000544 <__aeabi_ui2d>
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <AlignAxis+0x190>)
 800461c:	f7fc f936 	bl	800088c <__aeabi_ddiv>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4620      	mov	r0, r4
 8004626:	4629      	mov	r1, r5
 8004628:	f7fb fe50 	bl	80002cc <__adddf3>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <AlignAxis+0x194>)
 800463a:	f7fb fe45 	bl	80002c8 <__aeabi_dsub>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4614      	mov	r4, r2
 8004644:	461d      	mov	r5, r3
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800464c:	3306      	adds	r3, #6
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004656:	a318      	add	r3, pc, #96	; (adr r3, 80046b8 <AlignAxis+0x188>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f7fb ffec 	bl	8000638 <__aeabi_dmul>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4610      	mov	r0, r2
 8004666:	4619      	mov	r1, r3
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <AlignAxis+0x198>)
 800466e:	f7fc f90d 	bl	800088c <__aeabi_ddiv>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	ec43 2b17 	vmov	d7, r2, r3
 800467a:	eeb0 0a47 	vmov.f32	s0, s14
 800467e:	eef0 0a67 	vmov.f32	s1, s15
 8004682:	f006 ff6d 	bl	800b560 <sin>
 8004686:	ec53 2b10 	vmov	r2, r3, d0
 800468a:	4620      	mov	r0, r4
 800468c:	4629      	mov	r1, r5
 800468e:	f7fb ffd3 	bl	8000638 <__aeabi_dmul>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800469a:	00c9      	lsls	r1, r1, #3
 800469c:	3180      	adds	r1, #128	; 0x80
 800469e:	f107 0010 	add.w	r0, r7, #16
 80046a2:	4401      	add	r1, r0
 80046a4:	3978      	subs	r1, #120	; 0x78
 80046a6:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; i++)
 80046aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ae:	3301      	adds	r3, #1
 80046b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80046b4:	e00a      	b.n	80046cc <AlignAxis+0x19c>
 80046b6:	bf00      	nop
 80046b8:	53c8d4f1 	.word	0x53c8d4f1
 80046bc:	400921fb 	.word	0x400921fb
 80046c0:	40b00000 	.word	0x40b00000
 80046c4:	3ff00000 	.word	0x3ff00000
 80046c8:	40668000 	.word	0x40668000
 80046cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	f77f af36 	ble.w	8004542 <AlignAxis+0x12>
	}
	double u01 = u[0] - u[1];
 80046d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80046da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046de:	f7fb fdf3 	bl	80002c8 <__aeabi_dsub>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double u02 = u[0] - u[2];
 80046ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80046ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046f2:	f7fb fde9 	bl	80002c8 <__aeabi_dsub>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double v01 = v[0] - v[1];
 80046fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004706:	f7fb fddf 	bl	80002c8 <__aeabi_dsub>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double v02 = v[0] - v[2];
 8004712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800471a:	f7fb fdd5 	bl	80002c8 <__aeabi_dsub>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double su02 = u[0]*u[0] - u[2]*u[2];
 8004726:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800472a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800472e:	f7fb ff83 	bl	8000638 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4614      	mov	r4, r2
 8004738:	461d      	mov	r5, r3
 800473a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800473e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004742:	f7fb ff79 	bl	8000638 <__aeabi_dmul>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4620      	mov	r0, r4
 800474c:	4629      	mov	r1, r5
 800474e:	f7fb fdbb 	bl	80002c8 <__aeabi_dsub>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double sv02 = v[0]*v[0] - v[2]*v[2];
 800475a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800475e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004762:	f7fb ff69 	bl	8000638 <__aeabi_dmul>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4614      	mov	r4, r2
 800476c:	461d      	mov	r5, r3
 800476e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004776:	f7fb ff5f 	bl	8000638 <__aeabi_dmul>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4620      	mov	r0, r4
 8004780:	4629      	mov	r1, r5
 8004782:	f7fb fda1 	bl	80002c8 <__aeabi_dsub>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double su10 = u[1]*u[1] - u[0]*u[0];
 800478e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004792:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004796:	f7fb ff4f 	bl	8000638 <__aeabi_dmul>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4614      	mov	r4, r2
 80047a0:	461d      	mov	r5, r3
 80047a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80047a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047aa:	f7fb ff45 	bl	8000638 <__aeabi_dmul>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4620      	mov	r0, r4
 80047b4:	4629      	mov	r1, r5
 80047b6:	f7fb fd87 	bl	80002c8 <__aeabi_dsub>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double sv10 = v[1]*u[1] - v[0]*u[0];
 80047c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047ca:	f7fb ff35 	bl	8000638 <__aeabi_dmul>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4614      	mov	r4, r2
 80047d4:	461d      	mov	r5, r3
 80047d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047de:	f7fb ff2b 	bl	8000638 <__aeabi_dmul>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4620      	mov	r0, r4
 80047e8:	4629      	mov	r1, r5
 80047ea:	f7fb fd6d 	bl	80002c8 <__aeabi_dsub>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	_cal->offsetU = -(su02*u01 + sv02*u01 + su10*u02 + sv10*u02) / (2* (-v02)*u01 - (-v01)*u02);
 80047f6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80047fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80047fe:	f7fb ff1b 	bl	8000638 <__aeabi_dmul>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4614      	mov	r4, r2
 8004808:	461d      	mov	r5, r3
 800480a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800480e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004812:	f7fb ff11 	bl	8000638 <__aeabi_dmul>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4620      	mov	r0, r4
 800481c:	4629      	mov	r1, r5
 800481e:	f7fb fd55 	bl	80002cc <__adddf3>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4614      	mov	r4, r2
 8004828:	461d      	mov	r5, r3
 800482a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800482e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004832:	f7fb ff01 	bl	8000638 <__aeabi_dmul>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4620      	mov	r0, r4
 800483c:	4629      	mov	r1, r5
 800483e:	f7fb fd45 	bl	80002cc <__adddf3>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4614      	mov	r4, r2
 8004848:	461d      	mov	r5, r3
 800484a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800484e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004852:	f7fb fef1 	bl	8000638 <__aeabi_dmul>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4620      	mov	r0, r4
 800485c:	4629      	mov	r1, r5
 800485e:	f7fb fd35 	bl	80002cc <__adddf3>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4692      	mov	sl, r2
 8004868:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800486c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004872:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	f7fb fd24 	bl	80002cc <__adddf3>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004890:	f7fb fed2 	bl	8000638 <__aeabi_dmul>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4614      	mov	r4, r2
 800489a:	461d      	mov	r5, r3
 800489c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80048a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80048a4:	f7fb fec8 	bl	8000638 <__aeabi_dmul>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4620      	mov	r0, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	f7fb fd0c 	bl	80002cc <__adddf3>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4650      	mov	r0, sl
 80048ba:	4659      	mov	r1, fp
 80048bc:	f7fb ffe6 	bl	800088c <__aeabi_ddiv>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	_cal->offsetV = -(su02*v01 + sv02*v01 + su10*v02 + sv10*v02) / (2* (-u02)*v01 - (-u01)*v02);
 80048ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80048ce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80048d2:	f7fb feb1 	bl	8000638 <__aeabi_dmul>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4614      	mov	r4, r2
 80048dc:	461d      	mov	r5, r3
 80048de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80048e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80048e6:	f7fb fea7 	bl	8000638 <__aeabi_dmul>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4620      	mov	r0, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	f7fb fceb 	bl	80002cc <__adddf3>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4614      	mov	r4, r2
 80048fc:	461d      	mov	r5, r3
 80048fe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004902:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004906:	f7fb fe97 	bl	8000638 <__aeabi_dmul>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4620      	mov	r0, r4
 8004910:	4629      	mov	r1, r5
 8004912:	f7fb fcdb 	bl	80002cc <__adddf3>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4614      	mov	r4, r2
 800491c:	461d      	mov	r5, r3
 800491e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004922:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004926:	f7fb fe87 	bl	8000638 <__aeabi_dmul>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	f7fb fccb 	bl	80002cc <__adddf3>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4690      	mov	r8, r2
 800493c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004946:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	f7fb fcba 	bl	80002cc <__adddf3>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004964:	f7fb fe68 	bl	8000638 <__aeabi_dmul>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4614      	mov	r4, r2
 800496e:	461d      	mov	r5, r3
 8004970:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004974:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004978:	f7fb fe5e 	bl	8000638 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4620      	mov	r0, r4
 8004982:	4629      	mov	r1, r5
 8004984:	f7fb fca2 	bl	80002cc <__adddf3>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4640      	mov	r0, r8
 800498e:	4649      	mov	r1, r9
 8004990:	f7fb ff7c 	bl	800088c <__aeabi_ddiv>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	6979      	ldr	r1, [r7, #20]
 800499a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	MoveUVStepper(&uStepper, _cal->offsetU);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80049a4:	eeb0 0a47 	vmov.f32	s0, s14
 80049a8:	eef0 0a67 	vmov.f32	s1, s15
 80049ac:	4808      	ldr	r0, [pc, #32]	; (80049d0 <AlignAxis+0x4a0>)
 80049ae:	f7fe f9c7 	bl	8002d40 <MoveUVStepper>
	MoveUVStepper(&vStepper, _cal->offsetV);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80049b8:	eeb0 0a47 	vmov.f32	s0, s14
 80049bc:	eef0 0a67 	vmov.f32	s1, s15
 80049c0:	4804      	ldr	r0, [pc, #16]	; (80049d4 <AlignAxis+0x4a4>)
 80049c2:	f7fe f9bd 	bl	8002d40 <MoveUVStepper>
}
 80049c6:	bf00      	nop
 80049c8:	3790      	adds	r7, #144	; 0x90
 80049ca:	46bd      	mov	sp, r7
 80049cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d0:	200004a8 	.word	0x200004a8
 80049d4:	200004c8 	.word	0x200004c8

080049d8 <AxisPositionCalibrationHandler>:
 *
 * @param  _cal		wskaźnik do struktury Calibration zawierającej dane zebrane podczas pomiaru
 * @retval Brak
 */
void AxisPositionCalibrationHandler()
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
	static uint16_t calPoint = 0;
	switch (axisCalibration.stage)
 80049dc:	4ba3      	ldr	r3, [pc, #652]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 80049de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80049e2:	3b01      	subs	r3, #1
 80049e4:	2b06      	cmp	r3, #6
 80049e6:	f200 813e 	bhi.w	8004c66 <AxisPositionCalibrationHandler+0x28e>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <AxisPositionCalibrationHandler+0x18>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	08004a33 	.word	0x08004a33
 80049f8:	08004a6b 	.word	0x08004a6b
 80049fc:	08004bc7 	.word	0x08004bc7
 8004a00:	08004c0f 	.word	0x08004c0f
 8004a04:	08004c3d 	.word	0x08004c3d
 8004a08:	08004c55 	.word	0x08004c55
	{
	case 1:
		MoveStepperToPosition(&zStepper, axisCalibration.height);
 8004a0c:	4b97      	ldr	r3, [pc, #604]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004a0e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004a12:	eeb0 0a47 	vmov.f32	s0, s14
 8004a16:	eef0 0a67 	vmov.f32	s1, s15
 8004a1a:	4895      	ldr	r0, [pc, #596]	; (8004c70 <AxisPositionCalibrationHandler+0x298>)
 8004a1c:	f7fe fac4 	bl	8002fa8 <MoveStepperToPosition>
		axisCalibration.stage++;
 8004a20:	4b92      	ldr	r3, [pc, #584]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004a22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004a26:	3301      	adds	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	4b90      	ldr	r3, [pc, #576]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004a2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		break;
 8004a30:	e119      	b.n	8004c66 <AxisPositionCalibrationHandler+0x28e>
	case 2:
		MovementHandler(&zStepper);
 8004a32:	488f      	ldr	r0, [pc, #572]	; (8004c70 <AxisPositionCalibrationHandler+0x298>)
 8004a34:	f7fe fb1c 	bl	8003070 <MovementHandler>
		if (zStepper.changePosition == FALSE)
 8004a38:	4b8d      	ldr	r3, [pc, #564]	; (8004c70 <AxisPositionCalibrationHandler+0x298>)
 8004a3a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 810a 	bne.w	8004c58 <AxisPositionCalibrationHandler+0x280>
		{
			MoveStepperToPosition(&xStepper, axisCalibration.diameter);
 8004a44:	4b89      	ldr	r3, [pc, #548]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004a46:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8004a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8004a4e:	eef0 0a67 	vmov.f32	s1, s15
 8004a52:	4888      	ldr	r0, [pc, #544]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004a54:	f7fe faa8 	bl	8002fa8 <MoveStepperToPosition>
			axisCalibration.stage++;
 8004a58:	4b84      	ldr	r3, [pc, #528]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004a5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004a5e:	3301      	adds	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	4b82      	ldr	r3, [pc, #520]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004a64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}
		break;
 8004a68:	e0f6      	b.n	8004c58 <AxisPositionCalibrationHandler+0x280>
	case 3:
		MovementHandler(&xStepper);
 8004a6a:	4882      	ldr	r0, [pc, #520]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004a6c:	f7fe fb00 	bl	8003070 <MovementHandler>
		if (xStepper.changePosition == FALSE)
 8004a70:	4b80      	ldr	r3, [pc, #512]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004a72:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 80f0 	bne.w	8004c5c <AxisPositionCalibrationHandler+0x284>
		{
			axisCalibration.xData[calPoint] = xStepper.currentPosition;
 8004a7c:	4b7e      	ldr	r3, [pc, #504]	; (8004c78 <AxisPositionCalibrationHandler+0x2a0>)
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	4b7c      	ldr	r3, [pc, #496]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004a84:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004a88:	4878      	ldr	r0, [pc, #480]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004a8a:	00c9      	lsls	r1, r1, #3
 8004a8c:	4401      	add	r1, r0
 8004a8e:	e9c1 2300 	strd	r2, r3, [r1]
			axisCalibration.zData[calPoint] = zStepper.currentPosition;
 8004a92:	4b79      	ldr	r3, [pc, #484]	; (8004c78 <AxisPositionCalibrationHandler+0x2a0>)
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	4619      	mov	r1, r3
 8004a98:	4b75      	ldr	r3, [pc, #468]	; (8004c70 <AxisPositionCalibrationHandler+0x298>)
 8004a9a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004a9e:	4873      	ldr	r0, [pc, #460]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004aa0:	3103      	adds	r1, #3
 8004aa2:	00c9      	lsls	r1, r1, #3
 8004aa4:	4401      	add	r1, r0
 8004aa6:	e9c1 2300 	strd	r2, r3, [r1]
			axisCalibration.cData[calPoint] = cStepper.currentPosition;
 8004aaa:	4b73      	ldr	r3, [pc, #460]	; (8004c78 <AxisPositionCalibrationHandler+0x2a0>)
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4b72      	ldr	r3, [pc, #456]	; (8004c7c <AxisPositionCalibrationHandler+0x2a4>)
 8004ab2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004ab6:	486d      	ldr	r0, [pc, #436]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004ab8:	3106      	adds	r1, #6
 8004aba:	00c9      	lsls	r1, r1, #3
 8004abc:	4401      	add	r1, r0
 8004abe:	e9c1 2300 	strd	r2, r3, [r1]
			axisCalibration.adcRead[calPoint] = adcData;
 8004ac2:	4b6d      	ldr	r3, [pc, #436]	; (8004c78 <AxisPositionCalibrationHandler+0x2a0>)
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	4b6d      	ldr	r3, [pc, #436]	; (8004c80 <AxisPositionCalibrationHandler+0x2a8>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4967      	ldr	r1, [pc, #412]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004ace:	f100 0312 	add.w	r3, r0, #18
 8004ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			calPoint++;
 8004ad6:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <AxisPositionCalibrationHandler+0x2a0>)
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	4b66      	ldr	r3, [pc, #408]	; (8004c78 <AxisPositionCalibrationHandler+0x2a0>)
 8004ae0:	801a      	strh	r2, [r3, #0]
			if (calPoint >= 3)
 8004ae2:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <AxisPositionCalibrationHandler+0x2a0>)
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d934      	bls.n	8004b54 <AxisPositionCalibrationHandler+0x17c>
			{
				switch (axisCalibration.partType)
 8004aea:	4b60      	ldr	r3, [pc, #384]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004aec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <AxisPositionCalibrationHandler+0x122>
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d014      	beq.n	8004b22 <AxisPositionCalibrationHandler+0x14a>
					break;
				case walek:
					MoveStepperToPosition(&xStepper, xStepper.currentPosition + 4*hop);
					break;
				default:
					break;
 8004af8:	e027      	b.n	8004b4a <AxisPositionCalibrationHandler+0x172>
					MoveStepperToPosition(&xStepper, xStepper.currentPosition - 4*hop);
 8004afa:	4b5e      	ldr	r3, [pc, #376]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004afc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	4b5f      	ldr	r3, [pc, #380]	; (8004c84 <AxisPositionCalibrationHandler+0x2ac>)
 8004b06:	f7fb fbdf 	bl	80002c8 <__aeabi_dsub>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	ec43 2b17 	vmov	d7, r2, r3
 8004b12:	eeb0 0a47 	vmov.f32	s0, s14
 8004b16:	eef0 0a67 	vmov.f32	s1, s15
 8004b1a:	4856      	ldr	r0, [pc, #344]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004b1c:	f7fe fa44 	bl	8002fa8 <MoveStepperToPosition>
					break;
 8004b20:	e013      	b.n	8004b4a <AxisPositionCalibrationHandler+0x172>
					MoveStepperToPosition(&xStepper, xStepper.currentPosition + 4*hop);
 8004b22:	4b54      	ldr	r3, [pc, #336]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004b24:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	4b55      	ldr	r3, [pc, #340]	; (8004c84 <AxisPositionCalibrationHandler+0x2ac>)
 8004b2e:	f7fb fbcd 	bl	80002cc <__adddf3>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	ec43 2b17 	vmov	d7, r2, r3
 8004b3a:	eeb0 0a47 	vmov.f32	s0, s14
 8004b3e:	eef0 0a67 	vmov.f32	s1, s15
 8004b42:	484c      	ldr	r0, [pc, #304]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004b44:	f7fe fa30 	bl	8002fa8 <MoveStepperToPosition>
					break;
 8004b48:	bf00      	nop
				}
				axisCalibration.stage = 6;
 8004b4a:	4b48      	ldr	r3, [pc, #288]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004b4c:	2206      	movs	r2, #6
 8004b4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				}
				axisCalibration.stage++;
			}

		}
		break;
 8004b52:	e083      	b.n	8004c5c <AxisPositionCalibrationHandler+0x284>
				switch (axisCalibration.partType)
 8004b54:	4b45      	ldr	r3, [pc, #276]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004b56:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <AxisPositionCalibrationHandler+0x18c>
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d014      	beq.n	8004b8c <AxisPositionCalibrationHandler+0x1b4>
					break;
 8004b62:	e027      	b.n	8004bb4 <AxisPositionCalibrationHandler+0x1dc>
					MoveStepperToPosition(&xStepper, xStepper.currentPosition - 2*hop);
 8004b64:	4b43      	ldr	r3, [pc, #268]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004b66:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	4b46      	ldr	r3, [pc, #280]	; (8004c88 <AxisPositionCalibrationHandler+0x2b0>)
 8004b70:	f7fb fbaa 	bl	80002c8 <__aeabi_dsub>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	ec43 2b17 	vmov	d7, r2, r3
 8004b7c:	eeb0 0a47 	vmov.f32	s0, s14
 8004b80:	eef0 0a67 	vmov.f32	s1, s15
 8004b84:	483b      	ldr	r0, [pc, #236]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004b86:	f7fe fa0f 	bl	8002fa8 <MoveStepperToPosition>
					break;
 8004b8a:	e013      	b.n	8004bb4 <AxisPositionCalibrationHandler+0x1dc>
					MoveStepperToPosition(&xStepper, xStepper.currentPosition + 2*hop);
 8004b8c:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004b8e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	4b3c      	ldr	r3, [pc, #240]	; (8004c88 <AxisPositionCalibrationHandler+0x2b0>)
 8004b98:	f7fb fb98 	bl	80002cc <__adddf3>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	ec43 2b17 	vmov	d7, r2, r3
 8004ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ba8:	eef0 0a67 	vmov.f32	s1, s15
 8004bac:	4831      	ldr	r0, [pc, #196]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004bae:	f7fe f9fb 	bl	8002fa8 <MoveStepperToPosition>
					break;
 8004bb2:	bf00      	nop
				axisCalibration.stage++;
 8004bb4:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004bb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004bba:	3301      	adds	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004bc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		break;
 8004bc4:	e04a      	b.n	8004c5c <AxisPositionCalibrationHandler+0x284>
	case 4:
		MovementHandler(&xStepper);
 8004bc6:	482b      	ldr	r0, [pc, #172]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004bc8:	f7fe fa52 	bl	8003070 <MovementHandler>
		if (xStepper.changePosition == FALSE)
 8004bcc:	4b29      	ldr	r3, [pc, #164]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004bce:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d144      	bne.n	8004c60 <AxisPositionCalibrationHandler+0x288>
		{
			MoveStepperToPosition(&cStepper, cStepper.currentPosition + 120.0);
 8004bd6:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <AxisPositionCalibrationHandler+0x2a4>)
 8004bd8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <AxisPositionCalibrationHandler+0x2b4>)
 8004be2:	f7fb fb73 	bl	80002cc <__adddf3>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	ec43 2b17 	vmov	d7, r2, r3
 8004bee:	eeb0 0a47 	vmov.f32	s0, s14
 8004bf2:	eef0 0a67 	vmov.f32	s1, s15
 8004bf6:	4821      	ldr	r0, [pc, #132]	; (8004c7c <AxisPositionCalibrationHandler+0x2a4>)
 8004bf8:	f7fe f9d6 	bl	8002fa8 <MoveStepperToPosition>
			axisCalibration.stage++;
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004bfe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004c02:	3301      	adds	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004c08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}
		break;
 8004c0c:	e028      	b.n	8004c60 <AxisPositionCalibrationHandler+0x288>
	case 5:
		MovementHandler(&cStepper);
 8004c0e:	481b      	ldr	r0, [pc, #108]	; (8004c7c <AxisPositionCalibrationHandler+0x2a4>)
 8004c10:	f7fe fa2e 	bl	8003070 <MovementHandler>
		if (cStepper.changePosition == FALSE)
 8004c14:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <AxisPositionCalibrationHandler+0x2a4>)
 8004c16:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d122      	bne.n	8004c64 <AxisPositionCalibrationHandler+0x28c>
		{
			MoveStepperToPosition(&xStepper, axisCalibration.diameter);
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004c20:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8004c24:	eeb0 0a47 	vmov.f32	s0, s14
 8004c28:	eef0 0a67 	vmov.f32	s1, s15
 8004c2c:	4811      	ldr	r0, [pc, #68]	; (8004c74 <AxisPositionCalibrationHandler+0x29c>)
 8004c2e:	f7fe f9bb 	bl	8002fa8 <MoveStepperToPosition>
			axisCalibration.stage = 3;
 8004c32:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004c34:	2203      	movs	r2, #3
 8004c36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}
		break;
 8004c3a:	e013      	b.n	8004c64 <AxisPositionCalibrationHandler+0x28c>
	case 6:
		AlignAxis(&axisCalibration);
 8004c3c:	480b      	ldr	r0, [pc, #44]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004c3e:	f7ff fc77 	bl	8004530 <AlignAxis>
		axisCalibration.stage++;
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004c44:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004c48:	3301      	adds	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <AxisPositionCalibrationHandler+0x294>)
 8004c4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		break;
 8004c52:	e008      	b.n	8004c66 <AxisPositionCalibrationHandler+0x28e>
	case 7:

		break;
 8004c54:	bf00      	nop
 8004c56:	e006      	b.n	8004c66 <AxisPositionCalibrationHandler+0x28e>
		break;
 8004c58:	bf00      	nop
 8004c5a:	e004      	b.n	8004c66 <AxisPositionCalibrationHandler+0x28e>
		break;
 8004c5c:	bf00      	nop
 8004c5e:	e002      	b.n	8004c66 <AxisPositionCalibrationHandler+0x28e>
		break;
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <AxisPositionCalibrationHandler+0x28e>
		break;
 8004c64:	bf00      	nop
	}
}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000548 	.word	0x20000548
 8004c70:	20000388 	.word	0x20000388
 8004c74:	200002f8 	.word	0x200002f8
 8004c78:	200005d2 	.word	0x200005d2
 8004c7c:	20000418 	.word	0x20000418
 8004c80:	200005cc 	.word	0x200005cc
 8004c84:	40340000 	.word	0x40340000
 8004c88:	40240000 	.word	0x40240000
 8004c8c:	405e0000 	.word	0x405e0000

08004c90 <MainFunction>:
 *
 * @param  Brak
 * @retval Brak
 */
void MainFunction()
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
	counterMsg++;
 8004c94:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <MainFunction+0xe0>)
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <MainFunction+0xe0>)
 8004c9e:	801a      	strh	r2, [r3, #0]
	if (counterMsg >= 100)
 8004ca0:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <MainFunction+0xe0>)
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	2b63      	cmp	r3, #99	; 0x63
 8004ca6:	d90a      	bls.n	8004cbe <MainFunction+0x2e>
	{
		ChangePinState(TX_FLAG_GPIO_Port, TX_FLAG_Pin, 1);
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cae:	4831      	ldr	r0, [pc, #196]	; (8004d74 <MainFunction+0xe4>)
 8004cb0:	f7fd fd30 	bl	8002714 <ChangePinState>
		MessageHandler();
 8004cb4:	f7fd f94c 	bl	8001f50 <MessageHandler>
		counterMsg = 0;
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <MainFunction+0xe0>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	801a      	strh	r2, [r3, #0]
	}
	if (counterMsg == 50)
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <MainFunction+0xe0>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	2b32      	cmp	r3, #50	; 0x32
 8004cc4:	d105      	bne.n	8004cd2 <MainFunction+0x42>
		ChangePinState(TX_FLAG_GPIO_Port, TX_FLAG_Pin, 0);
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ccc:	4829      	ldr	r0, [pc, #164]	; (8004d74 <MainFunction+0xe4>)
 8004cce:	f7fd fd21 	bl	8002714 <ChangePinState>

	if (wasInitialized == TRUE)
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <MainFunction+0xe8>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d143      	bne.n	8004d62 <MainFunction+0xd2>
	{
		ReadCurrentPositions();
 8004cda:	f7fe f981 	bl	8002fe0 <ReadCurrentPositions>
		ADCHandler();
 8004cde:	f7fd fe6b 	bl	80029b8 <ADCHandler>

		switch (workMode)
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <MainFunction+0xec>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d83d      	bhi.n	8004d66 <MainFunction+0xd6>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <MainFunction+0x60>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d1b 	.word	0x08004d1b
 8004cf8:	08004d15 	.word	0x08004d15
 8004cfc:	08004d5d 	.word	0x08004d5d
		{
		case manual:
			MovementHandler(&xStepper);
 8004d00:	481f      	ldr	r0, [pc, #124]	; (8004d80 <MainFunction+0xf0>)
 8004d02:	f7fe f9b5 	bl	8003070 <MovementHandler>
			MovementHandler(&zStepper);
 8004d06:	481f      	ldr	r0, [pc, #124]	; (8004d84 <MainFunction+0xf4>)
 8004d08:	f7fe f9b2 	bl	8003070 <MovementHandler>
			MovementHandler(&cStepper);
 8004d0c:	481e      	ldr	r0, [pc, #120]	; (8004d88 <MainFunction+0xf8>)
 8004d0e:	f7fe f9af 	bl	8003070 <MovementHandler>
			break;
 8004d12:	e02b      	b.n	8004d6c <MainFunction+0xdc>

		case preparing:
			PreparingHandler();
 8004d14:	f7fe fbfc 	bl	8003510 <PreparingHandler>
			break;
 8004d18:	e028      	b.n	8004d6c <MainFunction+0xdc>

		case automatic:
			switch (currentMeasurement.measType)
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <MainFunction+0xfc>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d823      	bhi.n	8004d6a <MainFunction+0xda>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <MainFunction+0x98>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d3d 	.word	0x08004d3d
 8004d2c:	08004d43 	.word	0x08004d43
 8004d30:	08004d4f 	.word	0x08004d4f
 8004d34:	08004d55 	.word	0x08004d55
 8004d38:	08004d49 	.word	0x08004d49
			{
			case LP:
				AutomaticHandlerLP();
 8004d3c:	f7fe ffe8 	bl	8003d10 <AutomaticHandlerLP>
				break;
 8004d40:	e00b      	b.n	8004d5a <MainFunction+0xca>
			case GD:
				AutomaticHandlerGD();
 8004d42:	f7ff f887 	bl	8003e54 <AutomaticHandlerGD>
				break;
 8004d46:	e008      	b.n	8004d5a <MainFunction+0xca>
			case XY:
				AutomaticHandlerXY();
 8004d48:	f7ff fae8 	bl	800431c <AutomaticHandlerXY>
				break;
 8004d4c:	e005      	b.n	8004d5a <MainFunction+0xca>
			case Spiral:
				AutomaticHandlerSpiral();
 8004d4e:	f7ff f923 	bl	8003f98 <AutomaticHandlerSpiral>
				break;
 8004d52:	e002      	b.n	8004d5a <MainFunction+0xca>
			case Cage:
				AutomaticHandlerCage();
 8004d54:	f7ff f95c 	bl	8004010 <AutomaticHandlerCage>
				break;
 8004d58:	bf00      	nop
			}
			break;
 8004d5a:	e006      	b.n	8004d6a <MainFunction+0xda>

		case calibration:
			AxisPositionCalibrationHandler();
 8004d5c:	f7ff fe3c 	bl	80049d8 <AxisPositionCalibrationHandler>
			break;
 8004d60:	e004      	b.n	8004d6c <MainFunction+0xdc>

		default:
			break;
		}
	}
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <MainFunction+0xdc>
			break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <MainFunction+0xdc>
			break;
 8004d6a:	bf00      	nop


}
 8004d6c:	bf00      	nop
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	200005c8 	.word	0x200005c8
 8004d74:	40020800 	.word	0x40020800
 8004d78:	200005ca 	.word	0x200005ca
 8004d7c:	200005d0 	.word	0x200005d0
 8004d80:	200002f8 	.word	0x200002f8
 8004d84:	20000388 	.word	0x20000388
 8004d88:	20000418 	.word	0x20000418
 8004d8c:	200004e8 	.word	0x200004e8

08004d90 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8004d94:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <Ringbuf_init+0x3c>)
 8004d96:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <Ringbuf_init+0x40>)
 8004d98:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <Ringbuf_init+0x44>)
 8004d9c:	4a0e      	ldr	r2, [pc, #56]	; (8004dd8 <Ringbuf_init+0x48>)
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <Ringbuf_init+0x4c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <Ringbuf_init+0x4c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <Ringbuf_init+0x4c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <Ringbuf_init+0x4c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0220 	orr.w	r2, r2, #32
 8004dbe:	60da      	str	r2, [r3, #12]
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000668 	.word	0x20000668
 8004dd0:	200005d8 	.word	0x200005d8
 8004dd4:	2000066c 	.word	0x2000066c
 8004dd8:	20000620 	.word	0x20000620
 8004ddc:	200009e4 	.word	0x200009e4

08004de0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	3301      	adds	r3, #1
 8004df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d007      	beq.n	8004e12 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	79f9      	ldrb	r1, [r7, #7]
 8004e0a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8004e26:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <Uart_read+0x4c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <Uart_read+0x4c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d102      	bne.n	8004e3c <Uart_read+0x1c>
  {
    return -1;
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3a:	e010      	b.n	8004e5e <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <Uart_read+0x4c>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <Uart_read+0x4c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	5cd3      	ldrb	r3, [r2, r3]
 8004e48:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004e4a:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <Uart_read+0x4c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <Uart_read+0x4c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004e5a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000668 	.word	0x20000668

08004e70 <Uart_write>:

/* writes a single character to the uart and increments head
 */
void Uart_write(int c)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	db21      	blt.n	8004ec2 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <Uart_write+0x60>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	3301      	adds	r3, #1
 8004e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8a:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 8004e8c:	bf00      	nop
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <Uart_write+0x60>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d0f9      	beq.n	8004e8e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <Uart_write+0x60>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <Uart_write+0x60>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	b2c9      	uxtb	r1, r1
 8004ea8:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <Uart_write+0x60>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <Uart_write+0x64>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <Uart_write+0x64>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ec0:	60da      	str	r2, [r3, #12]
	}
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	2000066c 	.word	0x2000066c
 8004ed4:	200009e4 	.word	0x200009e4

08004ed8 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <IsDataAvailable+0x2c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <IsDataAvailable+0x2c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3340      	adds	r3, #64	; 0x40
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000668 	.word	0x20000668

08004f08 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d013      	beq.n	8004f52 <Uart_isr+0x4a>
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00e      	beq.n	8004f52 <Uart_isr+0x4a>
    	    	      * @note   RXNE flag can be also cleared by a read to the USART_DR register.
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.
    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <Uart_isr+0xac>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ff48 	bl	8004de0 <store_char>
        return;
 8004f50:	e02c      	b.n	8004fac <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d027      	beq.n	8004fac <Uart_isr+0xa4>
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d022      	beq.n	8004fac <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <Uart_isr+0xb0>)
 8004f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <Uart_isr+0xb0>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d108      	bne.n	8004f84 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f80:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8004f82:	e012      	b.n	8004faa <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <Uart_isr+0xb0>)
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	4a0b      	ldr	r2, [pc, #44]	; (8004fb8 <Uart_isr+0xb0>)
 8004f8a:	5cd3      	ldrb	r3, [r2, r3]
 8004f8c:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <Uart_isr+0xb0>)
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	3301      	adds	r3, #1
 8004f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f98:	4a07      	ldr	r2, [pc, #28]	; (8004fb8 <Uart_isr+0xb0>)
 8004f9a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	7bba      	ldrb	r2, [r7, #14]
 8004fa8:	605a      	str	r2, [r3, #4]
    	return;
 8004faa:	bf00      	nop
    }
}
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000668 	.word	0x20000668
 8004fb8:	20000620 	.word	0x20000620

08004fbc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <MX_ADC1_Init+0x98>)
 8004fd0:	4a21      	ldr	r2, [pc, #132]	; (8005058 <MX_ADC1_Init+0x9c>)
 8004fd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004fd4:	4b1f      	ldr	r3, [pc, #124]	; (8005054 <MX_ADC1_Init+0x98>)
 8004fd6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004fda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <MX_ADC1_Init+0x98>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <MX_ADC1_Init+0x98>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004fe8:	4b1a      	ldr	r3, [pc, #104]	; (8005054 <MX_ADC1_Init+0x98>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004fee:	4b19      	ldr	r3, [pc, #100]	; (8005054 <MX_ADC1_Init+0x98>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ff6:	4b17      	ldr	r3, [pc, #92]	; (8005054 <MX_ADC1_Init+0x98>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ffc:	4b15      	ldr	r3, [pc, #84]	; (8005054 <MX_ADC1_Init+0x98>)
 8004ffe:	4a17      	ldr	r2, [pc, #92]	; (800505c <MX_ADC1_Init+0xa0>)
 8005000:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <MX_ADC1_Init+0x98>)
 8005004:	2200      	movs	r2, #0
 8005006:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005008:	4b12      	ldr	r3, [pc, #72]	; (8005054 <MX_ADC1_Init+0x98>)
 800500a:	2201      	movs	r2, #1
 800500c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800500e:	4b11      	ldr	r3, [pc, #68]	; (8005054 <MX_ADC1_Init+0x98>)
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005016:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <MX_ADC1_Init+0x98>)
 8005018:	2201      	movs	r2, #1
 800501a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800501c:	480d      	ldr	r0, [pc, #52]	; (8005054 <MX_ADC1_Init+0x98>)
 800501e:	f001 fc1b 	bl	8006858 <HAL_ADC_Init>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005028:	f000 fbc6 	bl	80057b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800502c:	2304      	movs	r3, #4
 800502e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005030:	2301      	movs	r3, #1
 8005032:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8005034:	2304      	movs	r3, #4
 8005036:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005038:	463b      	mov	r3, r7
 800503a:	4619      	mov	r1, r3
 800503c:	4805      	ldr	r0, [pc, #20]	; (8005054 <MX_ADC1_Init+0x98>)
 800503e:	f001 fe09 	bl	8006c54 <HAL_ADC_ConfigChannel>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005048:	f000 fbb6 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000670 	.word	0x20000670
 8005058:	40012000 	.word	0x40012000
 800505c:	0f000001 	.word	0x0f000001

08005060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005068:	f107 0314 	add.w	r3, r7, #20
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2f      	ldr	r2, [pc, #188]	; (800513c <HAL_ADC_MspInit+0xdc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d157      	bne.n	8005132 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <HAL_ADC_MspInit+0xe0>)
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <HAL_ADC_MspInit+0xe0>)
 800508c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005090:	6453      	str	r3, [r2, #68]	; 0x44
 8005092:	4b2b      	ldr	r3, [pc, #172]	; (8005140 <HAL_ADC_MspInit+0xe0>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	4b27      	ldr	r3, [pc, #156]	; (8005140 <HAL_ADC_MspInit+0xe0>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	4a26      	ldr	r2, [pc, #152]	; (8005140 <HAL_ADC_MspInit+0xe0>)
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6313      	str	r3, [r2, #48]	; 0x30
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_ADC_MspInit+0xe0>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80050ba:	2310      	movs	r3, #16
 80050bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050be:	2303      	movs	r3, #3
 80050c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c6:	f107 0314 	add.w	r3, r7, #20
 80050ca:	4619      	mov	r1, r3
 80050cc:	481d      	ldr	r0, [pc, #116]	; (8005144 <HAL_ADC_MspInit+0xe4>)
 80050ce:	f002 fd85 	bl	8007bdc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 80050d4:	4a1d      	ldr	r2, [pc, #116]	; (800514c <HAL_ADC_MspInit+0xec>)
 80050d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 80050da:	2200      	movs	r2, #0
 80050dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050e4:	4b18      	ldr	r3, [pc, #96]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80050ea:	4b17      	ldr	r3, [pc, #92]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050f0:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 80050f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050f8:	4b13      	ldr	r3, [pc, #76]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 80050fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005100:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 8005102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005106:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 800510a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800510e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005110:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 8005112:	2200      	movs	r2, #0
 8005114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005116:	480c      	ldr	r0, [pc, #48]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 8005118:	f002 f95e 	bl	80073d8 <HAL_DMA_Init>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005122:	f000 fb49 	bl	80057b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a07      	ldr	r2, [pc, #28]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
 800512c:	4a06      	ldr	r2, [pc, #24]	; (8005148 <HAL_ADC_MspInit+0xe8>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005132:	bf00      	nop
 8005134:	3728      	adds	r7, #40	; 0x28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40012000 	.word	0x40012000
 8005140:	40023800 	.word	0x40023800
 8005144:	40020000 	.word	0x40020000
 8005148:	200006b8 	.word	0x200006b8
 800514c:	40026410 	.word	0x40026410

08005150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	4b0c      	ldr	r3, [pc, #48]	; (800518c <MX_DMA_Init+0x3c>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	4a0b      	ldr	r2, [pc, #44]	; (800518c <MX_DMA_Init+0x3c>)
 8005160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005164:	6313      	str	r3, [r2, #48]	; 0x30
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <MX_DMA_Init+0x3c>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516e:	607b      	str	r3, [r7, #4]
 8005170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005172:	2200      	movs	r2, #0
 8005174:	2100      	movs	r1, #0
 8005176:	2038      	movs	r0, #56	; 0x38
 8005178:	f002 f8f7 	bl	800736a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800517c:	2038      	movs	r0, #56	; 0x38
 800517e:	f002 f910 	bl	80073a2 <HAL_NVIC_EnableIRQ>

}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800

08005190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005196:	f107 0314 	add.w	r3, r7, #20
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	60da      	str	r2, [r3, #12]
 80051a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	4b8f      	ldr	r3, [pc, #572]	; (80053e8 <MX_GPIO_Init+0x258>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	4a8e      	ldr	r2, [pc, #568]	; (80053e8 <MX_GPIO_Init+0x258>)
 80051b0:	f043 0304 	orr.w	r3, r3, #4
 80051b4:	6313      	str	r3, [r2, #48]	; 0x30
 80051b6:	4b8c      	ldr	r3, [pc, #560]	; (80053e8 <MX_GPIO_Init+0x258>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	4b88      	ldr	r3, [pc, #544]	; (80053e8 <MX_GPIO_Init+0x258>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	4a87      	ldr	r2, [pc, #540]	; (80053e8 <MX_GPIO_Init+0x258>)
 80051cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d0:	6313      	str	r3, [r2, #48]	; 0x30
 80051d2:	4b85      	ldr	r3, [pc, #532]	; (80053e8 <MX_GPIO_Init+0x258>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	4b81      	ldr	r3, [pc, #516]	; (80053e8 <MX_GPIO_Init+0x258>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a80      	ldr	r2, [pc, #512]	; (80053e8 <MX_GPIO_Init+0x258>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	6313      	str	r3, [r2, #48]	; 0x30
 80051ee:	4b7e      	ldr	r3, [pc, #504]	; (80053e8 <MX_GPIO_Init+0x258>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	4b7a      	ldr	r3, [pc, #488]	; (80053e8 <MX_GPIO_Init+0x258>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4a79      	ldr	r2, [pc, #484]	; (80053e8 <MX_GPIO_Init+0x258>)
 8005204:	f043 0302 	orr.w	r3, r3, #2
 8005208:	6313      	str	r3, [r2, #48]	; 0x30
 800520a:	4b77      	ldr	r3, [pc, #476]	; (80053e8 <MX_GPIO_Init+0x258>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|X_ENABLE_Pin, GPIO_PIN_RESET);
 8005216:	2200      	movs	r2, #0
 8005218:	f248 0120 	movw	r1, #32800	; 0x8020
 800521c:	4873      	ldr	r0, [pc, #460]	; (80053ec <MX_GPIO_Init+0x25c>)
 800521e:	f002 fe89 	bl	8007f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X_DIR_Pin|Z_DIR_Pin|C_DIR_Pin|U_STEP_Pin
 8005222:	2200      	movs	r2, #0
 8005224:	f24f 0177 	movw	r1, #61559	; 0xf077
 8005228:	4871      	ldr	r0, [pc, #452]	; (80053f0 <MX_GPIO_Init+0x260>)
 800522a:	f002 fe83 	bl	8007f34 <HAL_GPIO_WritePin>
                          |U_DIR_Pin|V_STEP_Pin|V_DIR_Pin|Z_ENABLE_Pin
                          |C_ENABLE_Pin|U_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, V_ENABLE_Pin|TX_FLAG_Pin, GPIO_PIN_RESET);
 800522e:	2200      	movs	r2, #0
 8005230:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005234:	486f      	ldr	r0, [pc, #444]	; (80053f4 <MX_GPIO_Init+0x264>)
 8005236:	f002 fe7d 	bl	8007f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800523a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800523e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005240:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800524a:	f107 0314 	add.w	r3, r7, #20
 800524e:	4619      	mov	r1, r3
 8005250:	4868      	ldr	r0, [pc, #416]	; (80053f4 <MX_GPIO_Init+0x264>)
 8005252:	f002 fcc3 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MANUAL_DIR_Pin;
 8005256:	2301      	movs	r3, #1
 8005258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800525a:	2300      	movs	r3, #0
 800525c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800525e:	2302      	movs	r3, #2
 8005260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MANUAL_DIR_GPIO_Port, &GPIO_InitStruct);
 8005262:	f107 0314 	add.w	r3, r7, #20
 8005266:	4619      	mov	r1, r3
 8005268:	4862      	ldr	r0, [pc, #392]	; (80053f4 <MX_GPIO_Init+0x264>)
 800526a:	f002 fcb7 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MANUAL_X_Pin|MANUAL_Z_Pin|MANUAL_C_Pin|MANUAL_U_Pin
 800526e:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 8005272:	617b      	str	r3, [r7, #20]
                          |MANUAL_V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005274:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8005278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800527a:	2302      	movs	r3, #2
 800527c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800527e:	f107 0314 	add.w	r3, r7, #20
 8005282:	4619      	mov	r1, r3
 8005284:	485b      	ldr	r0, [pc, #364]	; (80053f4 <MX_GPIO_Init+0x264>)
 8005286:	f002 fca9 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800528a:	2320      	movs	r3, #32
 800528c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800528e:	2301      	movs	r3, #1
 8005290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005296:	2300      	movs	r3, #0
 8005298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800529a:	f107 0314 	add.w	r3, r7, #20
 800529e:	4619      	mov	r1, r3
 80052a0:	4852      	ldr	r0, [pc, #328]	; (80053ec <MX_GPIO_Init+0x25c>)
 80052a2:	f002 fc9b 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = X_DIR_Pin|Z_DIR_Pin|C_DIR_Pin;
 80052a6:	2307      	movs	r3, #7
 80052a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052aa:	2301      	movs	r3, #1
 80052ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80052ae:	2302      	movs	r3, #2
 80052b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052b2:	2302      	movs	r3, #2
 80052b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b6:	f107 0314 	add.w	r3, r7, #20
 80052ba:	4619      	mov	r1, r3
 80052bc:	484c      	ldr	r0, [pc, #304]	; (80053f0 <MX_GPIO_Init+0x260>)
 80052be:	f002 fc8d 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = U_STEP_Pin|U_DIR_Pin|V_STEP_Pin|V_DIR_Pin;
 80052c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80052c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052c8:	2301      	movs	r3, #1
 80052ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052d0:	2302      	movs	r3, #2
 80052d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d4:	f107 0314 	add.w	r3, r7, #20
 80052d8:	4619      	mov	r1, r3
 80052da:	4845      	ldr	r0, [pc, #276]	; (80053f0 <MX_GPIO_Init+0x260>)
 80052dc:	f002 fc7e 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C_ENC_ZERO_Pin;
 80052e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80052e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80052ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80052ec:	2302      	movs	r3, #2
 80052ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C_ENC_ZERO_GPIO_Port, &GPIO_InitStruct);
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	4619      	mov	r1, r3
 80052f6:	483f      	ldr	r0, [pc, #252]	; (80053f4 <MX_GPIO_Init+0x264>)
 80052f8:	f002 fc70 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STALLGUARD_X_Pin|STALLGUARD_Z_Pin;
 80052fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005302:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005308:	2302      	movs	r3, #2
 800530a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800530c:	f107 0314 	add.w	r3, r7, #20
 8005310:	4619      	mov	r1, r3
 8005312:	4836      	ldr	r0, [pc, #216]	; (80053ec <MX_GPIO_Init+0x25c>)
 8005314:	f002 fc62 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = X_ENABLE_Pin;
 8005318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800531c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800531e:	2301      	movs	r3, #1
 8005320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005322:	2302      	movs	r3, #2
 8005324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005326:	2301      	movs	r3, #1
 8005328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(X_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800532a:	f107 0314 	add.w	r3, r7, #20
 800532e:	4619      	mov	r1, r3
 8005330:	482e      	ldr	r0, [pc, #184]	; (80053ec <MX_GPIO_Init+0x25c>)
 8005332:	f002 fc53 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = V_ENABLE_Pin;
 8005336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800533c:	2301      	movs	r3, #1
 800533e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005340:	2302      	movs	r3, #2
 8005342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005344:	2301      	movs	r3, #1
 8005346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8005348:	f107 0314 	add.w	r3, r7, #20
 800534c:	4619      	mov	r1, r3
 800534e:	4829      	ldr	r0, [pc, #164]	; (80053f4 <MX_GPIO_Init+0x264>)
 8005350:	f002 fc44 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX_FLAG_Pin;
 8005354:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800535a:	2301      	movs	r3, #1
 800535c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005362:	2302      	movs	r3, #2
 8005364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TX_FLAG_GPIO_Port, &GPIO_InitStruct);
 8005366:	f107 0314 	add.w	r3, r7, #20
 800536a:	4619      	mov	r1, r3
 800536c:	4821      	ldr	r0, [pc, #132]	; (80053f4 <MX_GPIO_Init+0x264>)
 800536e:	f002 fc35 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Z_ENABLE_Pin|C_ENABLE_Pin|U_ENABLE_Pin;
 8005372:	2370      	movs	r3, #112	; 0x70
 8005374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005376:	2301      	movs	r3, #1
 8005378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800537a:	2302      	movs	r3, #2
 800537c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800537e:	2301      	movs	r3, #1
 8005380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005382:	f107 0314 	add.w	r3, r7, #20
 8005386:	4619      	mov	r1, r3
 8005388:	4819      	ldr	r0, [pc, #100]	; (80053f0 <MX_GPIO_Init+0x260>)
 800538a:	f002 fc27 	bl	8007bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800538e:	2200      	movs	r2, #0
 8005390:	2100      	movs	r1, #0
 8005392:	2007      	movs	r0, #7
 8005394:	f001 ffe9 	bl	800736a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005398:	2007      	movs	r0, #7
 800539a:	f002 f802 	bl	80073a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800539e:	2200      	movs	r2, #0
 80053a0:	2100      	movs	r1, #0
 80053a2:	2008      	movs	r0, #8
 80053a4:	f001 ffe1 	bl	800736a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80053a8:	2008      	movs	r0, #8
 80053aa:	f001 fffa 	bl	80073a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80053ae:	2200      	movs	r2, #0
 80053b0:	2100      	movs	r1, #0
 80053b2:	2009      	movs	r0, #9
 80053b4:	f001 ffd9 	bl	800736a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80053b8:	2009      	movs	r0, #9
 80053ba:	f001 fff2 	bl	80073a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80053be:	2200      	movs	r2, #0
 80053c0:	2100      	movs	r1, #0
 80053c2:	2017      	movs	r0, #23
 80053c4:	f001 ffd1 	bl	800736a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053c8:	2017      	movs	r0, #23
 80053ca:	f001 ffea 	bl	80073a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	2028      	movs	r0, #40	; 0x28
 80053d4:	f001 ffc9 	bl	800736a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80053d8:	2028      	movs	r0, #40	; 0x28
 80053da:	f001 ffe2 	bl	80073a2 <HAL_NVIC_EnableIRQ>

}
 80053de:	bf00      	nop
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40020000 	.word	0x40020000
 80053f0:	40020400 	.word	0x40020400
 80053f4:	40020800 	.word	0x40020800

080053f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053fc:	f001 f996 	bl	800672c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005400:	f000 f836 	bl	8005470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005404:	f7ff fec4 	bl	8005190 <MX_GPIO_Init>
  MX_DMA_Init();
 8005408:	f7ff fea2 	bl	8005150 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800540c:	f001 f82c 	bl	8006468 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005410:	f001 f854 	bl	80064bc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8005414:	f000 fb98 	bl	8005b48 <MX_TIM1_Init>
  MX_TIM3_Init();
 8005418:	f000 fc42 	bl	8005ca0 <MX_TIM3_Init>
  MX_TIM6_Init();
 800541c:	f000 fc94 	bl	8005d48 <MX_TIM6_Init>
  MX_TIM7_Init();
 8005420:	f000 fcc8 	bl	8005db4 <MX_TIM7_Init>
  MX_TIM10_Init();
 8005424:	f000 fcfa 	bl	8005e1c <MX_TIM10_Init>
  MX_TIM11_Init();
 8005428:	f000 fd44 	bl	8005eb4 <MX_TIM11_Init>
  MX_TIM13_Init();
 800542c:	f000 fd8e 	bl	8005f4c <MX_TIM13_Init>
  MX_TIM2_Init();
 8005430:	f000 fbe2 	bl	8005bf8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8005434:	f7ff fdc2 	bl	8004fbc <MX_ADC1_Init>
  MX_UART5_Init();
 8005438:	f000 ffec 	bl	8006414 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 800543c:	20c8      	movs	r0, #200	; 0xc8
 800543e:	f001 f9e7 	bl	8006810 <HAL_Delay>

  /* Inicjalizacja bufora kołowego i wszystkich komponentów */
  Ringbuf_init();
 8005442:	f7ff fca5 	bl	8004d90 <Ringbuf_init>
  InitializeComponents();
 8005446:	f7fd f97d 	bl	8002744 <InitializeComponents>

  HAL_Delay(200);
 800544a:	20c8      	movs	r0, #200	; 0xc8
 800544c:	f001 f9e0 	bl	8006810 <HAL_Delay>

  /* Wysłanie wiadomości do Raspberry Pi o starcie programu */
  ChangePinState(TX_FLAG_GPIO_Port, TX_FLAG_Pin, 1);
 8005450:	2201      	movs	r2, #1
 8005452:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005456:	4805      	ldr	r0, [pc, #20]	; (800546c <main+0x74>)
 8005458:	f7fd f95c 	bl	8002714 <ChangePinState>
  HAL_Delay(1);
 800545c:	2001      	movs	r0, #1
 800545e:	f001 f9d7 	bl	8006810 <HAL_Delay>
  SendSingleChar('s');
 8005462:	2073      	movs	r0, #115	; 0x73
 8005464:	f7fb fe69 	bl	800113a <SendSingleChar>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005468:	e7fe      	b.n	8005468 <main+0x70>
 800546a:	bf00      	nop
 800546c:	40020800 	.word	0x40020800

08005470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b094      	sub	sp, #80	; 0x50
 8005474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005476:	f107 031c 	add.w	r3, r7, #28
 800547a:	2234      	movs	r2, #52	; 0x34
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f007 f956 	bl	800c730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	605a      	str	r2, [r3, #4]
 800548e:	609a      	str	r2, [r3, #8]
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	2300      	movs	r3, #0
 8005496:	607b      	str	r3, [r7, #4]
 8005498:	4b2c      	ldr	r3, [pc, #176]	; (800554c <SystemClock_Config+0xdc>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	4a2b      	ldr	r2, [pc, #172]	; (800554c <SystemClock_Config+0xdc>)
 800549e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a2:	6413      	str	r3, [r2, #64]	; 0x40
 80054a4:	4b29      	ldr	r3, [pc, #164]	; (800554c <SystemClock_Config+0xdc>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80054b0:	2300      	movs	r3, #0
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4b26      	ldr	r3, [pc, #152]	; (8005550 <SystemClock_Config+0xe0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <SystemClock_Config+0xe0>)
 80054ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4b23      	ldr	r3, [pc, #140]	; (8005550 <SystemClock_Config+0xe0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80054cc:	2302      	movs	r3, #2
 80054ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054d0:	2301      	movs	r3, #1
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054d4:	2310      	movs	r3, #16
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054d8:	2302      	movs	r3, #2
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80054dc:	2300      	movs	r3, #0
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80054e0:	2308      	movs	r3, #8
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80054e4:	23b4      	movs	r3, #180	; 0xb4
 80054e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054e8:	2302      	movs	r3, #2
 80054ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80054ec:	2302      	movs	r3, #2
 80054ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80054f0:	2302      	movs	r3, #2
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054f4:	f107 031c 	add.w	r3, r7, #28
 80054f8:	4618      	mov	r0, r3
 80054fa:	f003 f8e7 	bl	80086cc <HAL_RCC_OscConfig>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005504:	f000 f958 	bl	80057b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005508:	f002 fd46 	bl	8007f98 <HAL_PWREx_EnableOverDrive>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005512:	f000 f951 	bl	80057b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005516:	230f      	movs	r3, #15
 8005518:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800551a:	2302      	movs	r3, #2
 800551c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005522:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800552c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800552e:	f107 0308 	add.w	r3, r7, #8
 8005532:	2105      	movs	r1, #5
 8005534:	4618      	mov	r0, r3
 8005536:	f002 fd7f 	bl	8008038 <HAL_RCC_ClockConfig>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005540:	f000 f93a 	bl	80057b8 <Error_Handler>
  }
}
 8005544:	bf00      	nop
 8005546:	3750      	adds	r7, #80	; 0x50
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40023800 	.word	0x40023800
 8005550:	40007000 	.word	0x40007000

08005554 <HAL_TIM_PeriodElapsedCallback>:
/**
 * Obsluga przerwania od glownego licznika
 * Wykonywanie glownej funkcji programu co okreslony okres - 500 mikrosekund
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == MAIN_TIMER)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d101      	bne.n	800556a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		MainFunction();
 8005566:	f7ff fb93 	bl	8004c90 <MainFunction>
	}
	if (htim -> Instance == UV_TIMER)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a07      	ldr	r2, [pc, #28]	; (800558c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d105      	bne.n	8005580 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		UVStepperHandler(&uStepper);
 8005574:	4806      	ldr	r0, [pc, #24]	; (8005590 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005576:	f7fd ff86 	bl	8003486 <UVStepperHandler>
		UVStepperHandler(&vStepper);
 800557a:	4806      	ldr	r0, [pc, #24]	; (8005594 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800557c:	f7fd ff83 	bl	8003486 <UVStepperHandler>
	}
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40001000 	.word	0x40001000
 800558c:	40001400 	.word	0x40001400
 8005590:	200004a8 	.word	0x200004a8
 8005594:	200004c8 	.word	0x200004c8

08005598 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
 * Obsluga przerwania od zakonczenia trwania pulsu PWM,
 * generowanie sygnalu STEP sterujacego ruchem silnikow krokowych X, Z, C
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == X_TIMER)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a0c      	ldr	r2, [pc, #48]	; (80055d8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d102      	bne.n	80055b0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
	{
		StepperHandler(&xStepper);
 80055aa:	480c      	ldr	r0, [pc, #48]	; (80055dc <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80055ac:	f7fd ff3a 	bl	8003424 <StepperHandler>
	}
	if (htim -> Instance == Z_TIMER)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a0a      	ldr	r2, [pc, #40]	; (80055e0 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d102      	bne.n	80055c0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
	{
		StepperHandler(&zStepper);
 80055ba:	480a      	ldr	r0, [pc, #40]	; (80055e4 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80055bc:	f7fd ff32 	bl	8003424 <StepperHandler>
	}
	if (htim -> Instance == C_TIMER)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d102      	bne.n	80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
	{
		StepperHandler(&cStepper);
 80055ca:	4808      	ldr	r0, [pc, #32]	; (80055ec <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 80055cc:	f7fd ff2a 	bl	8003424 <StepperHandler>
	}
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40014400 	.word	0x40014400
 80055dc:	200002f8 	.word	0x200002f8
 80055e0:	40014800 	.word	0x40014800
 80055e4:	20000388 	.word	0x20000388
 80055e8:	40001c00 	.word	0x40001c00
 80055ec:	20000418 	.word	0x20000418

080055f0 <HAL_GPIO_EXTI_Callback>:
 * Obsluga przerwan od zmiany stanu pinow zewnetrznych
 *  - wykrycie zderzenia STALLGUARD,
 *  - reczny ruch silnikami X, Z, C, U, V
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	80fb      	strh	r3, [r7, #6]
		}
		return;
	}
*/
	// Reczny ruch osiami
	if (wasInitialized == TRUE && workMode == manual)
 80055fa:	4b67      	ldr	r3, [pc, #412]	; (8005798 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	f040 80bf 	bne.w	8005782 <HAL_GPIO_EXTI_Callback+0x192>
 8005604:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f040 80ba 	bne.w	8005782 <HAL_GPIO_EXTI_Callback+0x192>
	{
		switch (GPIO_Pin)
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005614:	f000 8097 	beq.w	8005746 <HAL_GPIO_EXTI_Callback+0x156>
 8005618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561c:	f300 80b8 	bgt.w	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
 8005620:	2b80      	cmp	r3, #128	; 0x80
 8005622:	d073      	beq.n	800570c <HAL_GPIO_EXTI_Callback+0x11c>
 8005624:	2b80      	cmp	r3, #128	; 0x80
 8005626:	f300 80b3 	bgt.w	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
 800562a:	2b08      	cmp	r3, #8
 800562c:	d04c      	beq.n	80056c8 <HAL_GPIO_EXTI_Callback+0xd8>
 800562e:	2b08      	cmp	r3, #8
 8005630:	f300 80ae 	bgt.w	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
 8005634:	2b02      	cmp	r3, #2
 8005636:	d002      	beq.n	800563e <HAL_GPIO_EXTI_Callback+0x4e>
 8005638:	2b04      	cmp	r3, #4
 800563a:	d023      	beq.n	8005684 <HAL_GPIO_EXTI_Callback+0x94>
					ChangeStepperUVState(&vStepper, movingMinus);
			}
			break;
		}
	}
}
 800563c:	e0a8      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
			if (xStepper.isLocked == FALSE)
 800563e:	4b58      	ldr	r3, [pc, #352]	; (80057a0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8005640:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8005644:	2b00      	cmp	r3, #0
 8005646:	f040 809e 	bne.w	8005786 <HAL_GPIO_EXTI_Callback+0x196>
				if (HAL_GPIO_ReadPin(MANUAL_X_GPIO_Port, MANUAL_X_Pin) == GPIO_PIN_RESET)
 800564a:	2102      	movs	r1, #2
 800564c:	4855      	ldr	r0, [pc, #340]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800564e:	f002 fc59 	bl	8007f04 <HAL_GPIO_ReadPin>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <HAL_GPIO_EXTI_Callback+0x72>
					ChangeStepperState(&xStepper, stopped);
 8005658:	2100      	movs	r1, #0
 800565a:	4851      	ldr	r0, [pc, #324]	; (80057a0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800565c:	f7fd faf6 	bl	8002c4c <ChangeStepperState>
			break;
 8005660:	e091      	b.n	8005786 <HAL_GPIO_EXTI_Callback+0x196>
					if (HAL_GPIO_ReadPin(MANUAL_DIR_GPIO_Port, MANUAL_DIR_Pin) == GPIO_PIN_SET)
 8005662:	2101      	movs	r1, #1
 8005664:	484f      	ldr	r0, [pc, #316]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8005666:	f002 fc4d 	bl	8007f04 <HAL_GPIO_ReadPin>
 800566a:	4603      	mov	r3, r0
 800566c:	2b01      	cmp	r3, #1
 800566e:	d104      	bne.n	800567a <HAL_GPIO_EXTI_Callback+0x8a>
						ChangeStepperState(&xStepper, movingPlus);
 8005670:	2101      	movs	r1, #1
 8005672:	484b      	ldr	r0, [pc, #300]	; (80057a0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8005674:	f7fd faea 	bl	8002c4c <ChangeStepperState>
			break;
 8005678:	e085      	b.n	8005786 <HAL_GPIO_EXTI_Callback+0x196>
						ChangeStepperState(&xStepper, movingMinus);
 800567a:	2102      	movs	r1, #2
 800567c:	4848      	ldr	r0, [pc, #288]	; (80057a0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800567e:	f7fd fae5 	bl	8002c4c <ChangeStepperState>
			break;
 8005682:	e080      	b.n	8005786 <HAL_GPIO_EXTI_Callback+0x196>
			if (zStepper.isLocked == FALSE)
 8005684:	4b48      	ldr	r3, [pc, #288]	; (80057a8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8005686:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800568a:	2b00      	cmp	r3, #0
 800568c:	d17d      	bne.n	800578a <HAL_GPIO_EXTI_Callback+0x19a>
				if (HAL_GPIO_ReadPin(MANUAL_Z_GPIO_Port, MANUAL_Z_Pin) == GPIO_PIN_RESET)
 800568e:	2104      	movs	r1, #4
 8005690:	4844      	ldr	r0, [pc, #272]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8005692:	f002 fc37 	bl	8007f04 <HAL_GPIO_ReadPin>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d104      	bne.n	80056a6 <HAL_GPIO_EXTI_Callback+0xb6>
					ChangeStepperState(&zStepper, stopped);
 800569c:	2100      	movs	r1, #0
 800569e:	4842      	ldr	r0, [pc, #264]	; (80057a8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80056a0:	f7fd fad4 	bl	8002c4c <ChangeStepperState>
			break;
 80056a4:	e071      	b.n	800578a <HAL_GPIO_EXTI_Callback+0x19a>
					if (HAL_GPIO_ReadPin(MANUAL_DIR_GPIO_Port, MANUAL_DIR_Pin) == GPIO_PIN_SET)
 80056a6:	2101      	movs	r1, #1
 80056a8:	483e      	ldr	r0, [pc, #248]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80056aa:	f002 fc2b 	bl	8007f04 <HAL_GPIO_ReadPin>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d104      	bne.n	80056be <HAL_GPIO_EXTI_Callback+0xce>
						ChangeStepperState(&zStepper, movingPlus);
 80056b4:	2101      	movs	r1, #1
 80056b6:	483c      	ldr	r0, [pc, #240]	; (80057a8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80056b8:	f7fd fac8 	bl	8002c4c <ChangeStepperState>
			break;
 80056bc:	e065      	b.n	800578a <HAL_GPIO_EXTI_Callback+0x19a>
						ChangeStepperState(&zStepper, movingMinus);
 80056be:	2102      	movs	r1, #2
 80056c0:	4839      	ldr	r0, [pc, #228]	; (80057a8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80056c2:	f7fd fac3 	bl	8002c4c <ChangeStepperState>
			break;
 80056c6:	e060      	b.n	800578a <HAL_GPIO_EXTI_Callback+0x19a>
			if (cStepper.isLocked == FALSE)
 80056c8:	4b38      	ldr	r3, [pc, #224]	; (80057ac <HAL_GPIO_EXTI_Callback+0x1bc>)
 80056ca:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d15d      	bne.n	800578e <HAL_GPIO_EXTI_Callback+0x19e>
				if (HAL_GPIO_ReadPin(MANUAL_C_GPIO_Port, MANUAL_C_Pin) == GPIO_PIN_RESET)
 80056d2:	2108      	movs	r1, #8
 80056d4:	4833      	ldr	r0, [pc, #204]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80056d6:	f002 fc15 	bl	8007f04 <HAL_GPIO_ReadPin>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <HAL_GPIO_EXTI_Callback+0xfa>
					ChangeStepperState(&cStepper, stopped);
 80056e0:	2100      	movs	r1, #0
 80056e2:	4832      	ldr	r0, [pc, #200]	; (80057ac <HAL_GPIO_EXTI_Callback+0x1bc>)
 80056e4:	f7fd fab2 	bl	8002c4c <ChangeStepperState>
			break;
 80056e8:	e051      	b.n	800578e <HAL_GPIO_EXTI_Callback+0x19e>
					if (HAL_GPIO_ReadPin(MANUAL_DIR_GPIO_Port, MANUAL_DIR_Pin) == GPIO_PIN_SET)
 80056ea:	2101      	movs	r1, #1
 80056ec:	482d      	ldr	r0, [pc, #180]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80056ee:	f002 fc09 	bl	8007f04 <HAL_GPIO_ReadPin>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d104      	bne.n	8005702 <HAL_GPIO_EXTI_Callback+0x112>
						ChangeStepperState(&cStepper, movingPlus);
 80056f8:	2101      	movs	r1, #1
 80056fa:	482c      	ldr	r0, [pc, #176]	; (80057ac <HAL_GPIO_EXTI_Callback+0x1bc>)
 80056fc:	f7fd faa6 	bl	8002c4c <ChangeStepperState>
			break;
 8005700:	e045      	b.n	800578e <HAL_GPIO_EXTI_Callback+0x19e>
						ChangeStepperState(&cStepper, movingMinus);
 8005702:	2102      	movs	r1, #2
 8005704:	4829      	ldr	r0, [pc, #164]	; (80057ac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8005706:	f7fd faa1 	bl	8002c4c <ChangeStepperState>
			break;
 800570a:	e040      	b.n	800578e <HAL_GPIO_EXTI_Callback+0x19e>
			if (HAL_GPIO_ReadPin(MANUAL_U_GPIO_Port, MANUAL_U_Pin) == GPIO_PIN_RESET)
 800570c:	2180      	movs	r1, #128	; 0x80
 800570e:	4825      	ldr	r0, [pc, #148]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8005710:	f002 fbf8 	bl	8007f04 <HAL_GPIO_ReadPin>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d104      	bne.n	8005724 <HAL_GPIO_EXTI_Callback+0x134>
				ChangeStepperUVState(&uStepper, stopped);
 800571a:	2100      	movs	r1, #0
 800571c:	4824      	ldr	r0, [pc, #144]	; (80057b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800571e:	f7fd fad7 	bl	8002cd0 <ChangeStepperUVState>
			break;
 8005722:	e035      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
				if (HAL_GPIO_ReadPin(MANUAL_DIR_GPIO_Port, MANUAL_DIR_Pin) == GPIO_PIN_SET)
 8005724:	2101      	movs	r1, #1
 8005726:	481f      	ldr	r0, [pc, #124]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8005728:	f002 fbec 	bl	8007f04 <HAL_GPIO_ReadPin>
 800572c:	4603      	mov	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d104      	bne.n	800573c <HAL_GPIO_EXTI_Callback+0x14c>
					ChangeStepperUVState(&uStepper, movingPlus);
 8005732:	2101      	movs	r1, #1
 8005734:	481e      	ldr	r0, [pc, #120]	; (80057b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8005736:	f7fd facb 	bl	8002cd0 <ChangeStepperUVState>
			break;
 800573a:	e029      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
					ChangeStepperUVState(&uStepper, movingMinus);
 800573c:	2102      	movs	r1, #2
 800573e:	481c      	ldr	r0, [pc, #112]	; (80057b0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8005740:	f7fd fac6 	bl	8002cd0 <ChangeStepperUVState>
			break;
 8005744:	e024      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
			if (HAL_GPIO_ReadPin(MANUAL_V_GPIO_Port, MANUAL_V_Pin) == GPIO_PIN_RESET)
 8005746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800574a:	4816      	ldr	r0, [pc, #88]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800574c:	f002 fbda 	bl	8007f04 <HAL_GPIO_ReadPin>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <HAL_GPIO_EXTI_Callback+0x170>
				ChangeStepperUVState(&vStepper, stopped);
 8005756:	2100      	movs	r1, #0
 8005758:	4816      	ldr	r0, [pc, #88]	; (80057b4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800575a:	f7fd fab9 	bl	8002cd0 <ChangeStepperUVState>
			break;
 800575e:	e017      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
				if (HAL_GPIO_ReadPin(MANUAL_DIR_GPIO_Port, MANUAL_DIR_Pin) == GPIO_PIN_SET)
 8005760:	2101      	movs	r1, #1
 8005762:	4810      	ldr	r0, [pc, #64]	; (80057a4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8005764:	f002 fbce 	bl	8007f04 <HAL_GPIO_ReadPin>
 8005768:	4603      	mov	r3, r0
 800576a:	2b01      	cmp	r3, #1
 800576c:	d104      	bne.n	8005778 <HAL_GPIO_EXTI_Callback+0x188>
					ChangeStepperUVState(&vStepper, movingPlus);
 800576e:	2101      	movs	r1, #1
 8005770:	4810      	ldr	r0, [pc, #64]	; (80057b4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8005772:	f7fd faad 	bl	8002cd0 <ChangeStepperUVState>
			break;
 8005776:	e00b      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
					ChangeStepperUVState(&vStepper, movingMinus);
 8005778:	2102      	movs	r1, #2
 800577a:	480e      	ldr	r0, [pc, #56]	; (80057b4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800577c:	f7fd faa8 	bl	8002cd0 <ChangeStepperUVState>
			break;
 8005780:	e006      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
	}
 8005782:	bf00      	nop
 8005784:	e004      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
			break;
 8005786:	bf00      	nop
 8005788:	e002      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
			break;
 800578a:	bf00      	nop
 800578c:	e000      	b.n	8005790 <HAL_GPIO_EXTI_Callback+0x1a0>
			break;
 800578e:	bf00      	nop
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	200005ca 	.word	0x200005ca
 800579c:	200005d0 	.word	0x200005d0
 80057a0:	200002f8 	.word	0x200002f8
 80057a4:	40020800 	.word	0x40020800
 80057a8:	20000388 	.word	0x20000388
 80057ac:	20000418 	.word	0x20000418
 80057b0:	200004a8 	.word	0x200004a8
 80057b4:	200004c8 	.word	0x200004c8

080057b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057bc:	b672      	cpsid	i
}
 80057be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057c0:	e7fe      	b.n	80057c0 <Error_Handler+0x8>
	...

080057c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_MspInit+0x4c>)
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	4a0f      	ldr	r2, [pc, #60]	; (8005810 <HAL_MspInit+0x4c>)
 80057d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057d8:	6453      	str	r3, [r2, #68]	; 0x44
 80057da:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <HAL_MspInit+0x4c>)
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_MspInit+0x4c>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	4a08      	ldr	r2, [pc, #32]	; (8005810 <HAL_MspInit+0x4c>)
 80057f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f4:	6413      	str	r3, [r2, #64]	; 0x40
 80057f6:	4b06      	ldr	r3, [pc, #24]	; (8005810 <HAL_MspInit+0x4c>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8005802:	2005      	movs	r0, #5
 8005804:	f001 fda6 	bl	8007354 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40023800 	.word	0x40023800

08005814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005818:	e7fe      	b.n	8005818 <NMI_Handler+0x4>

0800581a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800581a:	b480      	push	{r7}
 800581c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800581e:	e7fe      	b.n	800581e <HardFault_Handler+0x4>

08005820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005824:	e7fe      	b.n	8005824 <MemManage_Handler+0x4>

08005826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005826:	b480      	push	{r7}
 8005828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800582a:	e7fe      	b.n	800582a <BusFault_Handler+0x4>

0800582c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005830:	e7fe      	b.n	8005830 <UsageFault_Handler+0x4>

08005832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005832:	b480      	push	{r7}
 8005834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005844:	bf00      	nop
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800584e:	b480      	push	{r7}
 8005850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005852:	bf00      	nop
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timeout >0)  timeout--;
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <SysTick_Handler+0x20>)
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <SysTick_Handler+0x18>
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <SysTick_Handler+0x20>)
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <SysTick_Handler+0x20>)
 8005872:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005874:	f000 ffac 	bl	80067d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005878:	bf00      	nop
 800587a:	bd80      	pop	{r7, pc}
 800587c:	200005d4 	.word	0x200005d4

08005880 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MANUAL_X_Pin);
 8005884:	2002      	movs	r0, #2
 8005886:	f002 fb6f 	bl	8007f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800588a:	bf00      	nop
 800588c:	bd80      	pop	{r7, pc}

0800588e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MANUAL_Z_Pin);
 8005892:	2004      	movs	r0, #4
 8005894:	f002 fb68 	bl	8007f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005898:	bf00      	nop
 800589a:	bd80      	pop	{r7, pc}

0800589c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MANUAL_C_Pin);
 80058a0:	2008      	movs	r0, #8
 80058a2:	f002 fb61 	bl	8007f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80058a6:	bf00      	nop
 80058a8:	bd80      	pop	{r7, pc}

080058aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MANUAL_U_Pin);
 80058ae:	2080      	movs	r0, #128	; 0x80
 80058b0:	f002 fb5a 	bl	8007f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MANUAL_V_Pin);
 80058b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80058b8:	f002 fb56 	bl	8007f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C_ENC_ZERO_Pin);
 80058bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80058c0:	f002 fb52 	bl	8007f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80058c4:	bf00      	nop
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058cc:	4803      	ldr	r0, [pc, #12]	; (80058dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80058ce:	f003 fe0b 	bl	80094e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80058d2:	4803      	ldr	r0, [pc, #12]	; (80058e0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80058d4:	f003 fe08 	bl	80094e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80058d8:	bf00      	nop
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	2000071c 	.word	0x2000071c
 80058e0:	20000884 	.word	0x20000884

080058e4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058e8:	4803      	ldr	r0, [pc, #12]	; (80058f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80058ea:	f003 fdfd 	bl	80094e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80058ee:	4803      	ldr	r0, [pc, #12]	; (80058fc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80058f0:	f003 fdfa 	bl	80094e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80058f4:	bf00      	nop
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	2000071c 	.word	0x2000071c
 80058fc:	200008cc 	.word	0x200008cc

08005900 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	//Uart_isr (&huart2);
	//return;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005904:	4802      	ldr	r0, [pc, #8]	; (8005910 <USART2_IRQHandler+0x10>)
 8005906:	f004 fb7f 	bl	800a008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	200009a0 	.word	0x200009a0

08005914 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (&huart3);
 8005918:	4802      	ldr	r0, [pc, #8]	; (8005924 <USART3_IRQHandler+0x10>)
 800591a:	f7ff faf5 	bl	8004f08 <Uart_isr>
	return;
 800591e:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	200009e4 	.word	0x200009e4

08005928 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STALLGUARD_X_Pin);
 800592c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005930:	f002 fb1a 	bl	8007f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STALLGUARD_Z_Pin);
 8005934:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005938:	f002 fb16 	bl	8007f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800593c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005940:	f002 fb12 	bl	8007f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005944:	bf00      	nop
 8005946:	bd80      	pop	{r7, pc}

08005948 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800594c:	4802      	ldr	r0, [pc, #8]	; (8005958 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800594e:	f003 fdcb 	bl	80094e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005952:	bf00      	nop
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000914 	.word	0x20000914

0800595c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005960:	4802      	ldr	r0, [pc, #8]	; (800596c <TIM6_DAC_IRQHandler+0x10>)
 8005962:	f003 fdc1 	bl	80094e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	200007f4 	.word	0x200007f4

08005970 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005974:	4802      	ldr	r0, [pc, #8]	; (8005980 <TIM7_IRQHandler+0x10>)
 8005976:	f003 fdb7 	bl	80094e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800597a:	bf00      	nop
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	2000083c 	.word	0x2000083c

08005984 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005988:	4802      	ldr	r0, [pc, #8]	; (8005994 <DMA2_Stream0_IRQHandler+0x10>)
 800598a:	f001 febd 	bl	8007708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200006b8 	.word	0x200006b8

08005998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return 1;
 800599c:	2301      	movs	r3, #1
}
 800599e:	4618      	mov	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <_kill>:

int _kill(int pid, int sig)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80059b2:	f006 fe4b 	bl	800c64c <__errno>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2216      	movs	r2, #22
 80059ba:	601a      	str	r2, [r3, #0]
  return -1;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <_exit>:

void _exit (int status)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80059d0:	f04f 31ff 	mov.w	r1, #4294967295
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff ffe7 	bl	80059a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80059da:	e7fe      	b.n	80059da <_exit+0x12>

080059dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e00a      	b.n	8005a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059ee:	f3af 8000 	nop.w
 80059f2:	4601      	mov	r1, r0
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	60ba      	str	r2, [r7, #8]
 80059fa:	b2ca      	uxtb	r2, r1
 80059fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	3301      	adds	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	dbf0      	blt.n	80059ee <_read+0x12>
  }

  return len;
 8005a0c:	687b      	ldr	r3, [r7, #4]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b086      	sub	sp, #24
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e009      	b.n	8005a3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	60ba      	str	r2, [r7, #8]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	dbf1      	blt.n	8005a28 <_write+0x12>
  }
  return len;
 8005a44:	687b      	ldr	r3, [r7, #4]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <_close>:

int _close(int file)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a76:	605a      	str	r2, [r3, #4]
  return 0;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <_isatty>:

int _isatty(int file)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a8e:	2301      	movs	r3, #1
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ac0:	4a14      	ldr	r2, [pc, #80]	; (8005b14 <_sbrk+0x5c>)
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <_sbrk+0x60>)
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <_sbrk+0x64>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ad4:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <_sbrk+0x64>)
 8005ad6:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <_sbrk+0x68>)
 8005ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ada:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <_sbrk+0x64>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d207      	bcs.n	8005af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ae8:	f006 fdb0 	bl	800c64c <__errno>
 8005aec:	4603      	mov	r3, r0
 8005aee:	220c      	movs	r2, #12
 8005af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295
 8005af6:	e009      	b.n	8005b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005af8:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <_sbrk+0x64>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <_sbrk+0x64>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	4a05      	ldr	r2, [pc, #20]	; (8005b1c <_sbrk+0x64>)
 8005b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20020000 	.word	0x20020000
 8005b18:	00000400 	.word	0x00000400
 8005b1c:	20000718 	.word	0x20000718
 8005b20:	20000a40 	.word	0x20000a40

08005b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <SystemInit+0x20>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2e:	4a05      	ldr	r2, [pc, #20]	; (8005b44 <SystemInit+0x20>)
 8005b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	e000ed00 	.word	0xe000ed00

08005b48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	; 0x30
 8005b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b4e:	f107 030c 	add.w	r3, r7, #12
 8005b52:	2224      	movs	r2, #36	; 0x24
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f006 fdea 	bl	800c730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005b64:	4b22      	ldr	r3, [pc, #136]	; (8005bf0 <MX_TIM1_Init+0xa8>)
 8005b66:	4a23      	ldr	r2, [pc, #140]	; (8005bf4 <MX_TIM1_Init+0xac>)
 8005b68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005b6a:	4b21      	ldr	r3, [pc, #132]	; (8005bf0 <MX_TIM1_Init+0xa8>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b70:	4b1f      	ldr	r3, [pc, #124]	; (8005bf0 <MX_TIM1_Init+0xa8>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005b76:	4b1e      	ldr	r3, [pc, #120]	; (8005bf0 <MX_TIM1_Init+0xa8>)
 8005b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b7e:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <MX_TIM1_Init+0xa8>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <MX_TIM1_Init+0xa8>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b8a:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <MX_TIM1_Init+0xa8>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005b90:	2303      	movs	r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b94:	2300      	movs	r3, #0
 8005b96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005bac:	2300      	movs	r3, #0
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005bb4:	f107 030c 	add.w	r3, r7, #12
 8005bb8:	4619      	mov	r1, r3
 8005bba:	480d      	ldr	r0, [pc, #52]	; (8005bf0 <MX_TIM1_Init+0xa8>)
 8005bbc:	f003 fb40 	bl	8009240 <HAL_TIM_Encoder_Init>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8005bc6:	f7ff fdf7 	bl	80057b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005bd2:	1d3b      	adds	r3, r7, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4806      	ldr	r0, [pc, #24]	; (8005bf0 <MX_TIM1_Init+0xa8>)
 8005bd8:	f004 f8e4 	bl	8009da4 <HAL_TIMEx_MasterConfigSynchronization>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8005be2:	f7ff fde9 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005be6:	bf00      	nop
 8005be8:	3730      	adds	r7, #48	; 0x30
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	2000071c 	.word	0x2000071c
 8005bf4:	40010000 	.word	0x40010000

08005bf8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08c      	sub	sp, #48	; 0x30
 8005bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005bfe:	f107 030c 	add.w	r3, r7, #12
 8005c02:	2224      	movs	r2, #36	; 0x24
 8005c04:	2100      	movs	r1, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f006 fd92 	bl	800c730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c14:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <MX_TIM2_Init+0xa0>)
 8005c16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005c1c:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <MX_TIM2_Init+0xa0>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c22:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <MX_TIM2_Init+0xa0>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 439999;
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <MX_TIM2_Init+0xa0>)
 8005c2a:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <MX_TIM2_Init+0xa4>)
 8005c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <MX_TIM2_Init+0xa0>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c34:	4b18      	ldr	r3, [pc, #96]	; (8005c98 <MX_TIM2_Init+0xa0>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005c42:	2301      	movs	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005c52:	2301      	movs	r3, #1
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005c56:	2300      	movs	r3, #0
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005c5e:	f107 030c 	add.w	r3, r7, #12
 8005c62:	4619      	mov	r1, r3
 8005c64:	480c      	ldr	r0, [pc, #48]	; (8005c98 <MX_TIM2_Init+0xa0>)
 8005c66:	f003 faeb 	bl	8009240 <HAL_TIM_Encoder_Init>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8005c70:	f7ff fda2 	bl	80057b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c74:	2300      	movs	r3, #0
 8005c76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c7c:	1d3b      	adds	r3, r7, #4
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4805      	ldr	r0, [pc, #20]	; (8005c98 <MX_TIM2_Init+0xa0>)
 8005c82:	f004 f88f 	bl	8009da4 <HAL_TIMEx_MasterConfigSynchronization>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8005c8c:	f7ff fd94 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005c90:	bf00      	nop
 8005c92:	3730      	adds	r7, #48	; 0x30
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000764 	.word	0x20000764
 8005c9c:	0006b6bf 	.word	0x0006b6bf

08005ca0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08c      	sub	sp, #48	; 0x30
 8005ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005ca6:	f107 030c 	add.w	r3, r7, #12
 8005caa:	2224      	movs	r2, #36	; 0x24
 8005cac:	2100      	movs	r1, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f006 fd3e 	bl	800c730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005cbc:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <MX_TIM3_Init+0xa0>)
 8005cbe:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <MX_TIM3_Init+0xa4>)
 8005cc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005cc2:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <MX_TIM3_Init+0xa0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <MX_TIM3_Init+0xa0>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8005cce:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <MX_TIM3_Init+0xa0>)
 8005cd0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005cd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <MX_TIM3_Init+0xa0>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cdc:	4b18      	ldr	r3, [pc, #96]	; (8005d40 <MX_TIM3_Init+0xa0>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005cea:	2301      	movs	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005d06:	f107 030c 	add.w	r3, r7, #12
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	480c      	ldr	r0, [pc, #48]	; (8005d40 <MX_TIM3_Init+0xa0>)
 8005d0e:	f003 fa97 	bl	8009240 <HAL_TIM_Encoder_Init>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005d18:	f7ff fd4e 	bl	80057b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d24:	1d3b      	adds	r3, r7, #4
 8005d26:	4619      	mov	r1, r3
 8005d28:	4805      	ldr	r0, [pc, #20]	; (8005d40 <MX_TIM3_Init+0xa0>)
 8005d2a:	f004 f83b 	bl	8009da4 <HAL_TIMEx_MasterConfigSynchronization>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005d34:	f7ff fd40 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005d38:	bf00      	nop
 8005d3a:	3730      	adds	r7, #48	; 0x30
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	200007ac 	.word	0x200007ac
 8005d44:	40000400 	.word	0x40000400

08005d48 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d4e:	463b      	mov	r3, r7
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005d56:	4b15      	ldr	r3, [pc, #84]	; (8005dac <MX_TIM6_Init+0x64>)
 8005d58:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <MX_TIM6_Init+0x68>)
 8005d5a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 179;
 8005d5c:	4b13      	ldr	r3, [pc, #76]	; (8005dac <MX_TIM6_Init+0x64>)
 8005d5e:	22b3      	movs	r2, #179	; 0xb3
 8005d60:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <MX_TIM6_Init+0x64>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 8005d68:	4b10      	ldr	r3, [pc, #64]	; (8005dac <MX_TIM6_Init+0x64>)
 8005d6a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005d6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d70:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <MX_TIM6_Init+0x64>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d76:	480d      	ldr	r0, [pc, #52]	; (8005dac <MX_TIM6_Init+0x64>)
 8005d78:	f002 ff46 	bl	8008c08 <HAL_TIM_Base_Init>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005d82:	f7ff fd19 	bl	80057b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d86:	2300      	movs	r3, #0
 8005d88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d8e:	463b      	mov	r3, r7
 8005d90:	4619      	mov	r1, r3
 8005d92:	4806      	ldr	r0, [pc, #24]	; (8005dac <MX_TIM6_Init+0x64>)
 8005d94:	f004 f806 	bl	8009da4 <HAL_TIMEx_MasterConfigSynchronization>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005d9e:	f7ff fd0b 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200007f4 	.word	0x200007f4
 8005db0:	40001000 	.word	0x40001000

08005db4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dba:	463b      	mov	r3, r7
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005dc2:	4b14      	ldr	r3, [pc, #80]	; (8005e14 <MX_TIM7_Init+0x60>)
 8005dc4:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <MX_TIM7_Init+0x64>)
 8005dc6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005dc8:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <MX_TIM7_Init+0x60>)
 8005dca:	22b3      	movs	r2, #179	; 0xb3
 8005dcc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dce:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <MX_TIM7_Init+0x60>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <MX_TIM7_Init+0x60>)
 8005dd6:	2263      	movs	r2, #99	; 0x63
 8005dd8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dda:	4b0e      	ldr	r3, [pc, #56]	; (8005e14 <MX_TIM7_Init+0x60>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005de0:	480c      	ldr	r0, [pc, #48]	; (8005e14 <MX_TIM7_Init+0x60>)
 8005de2:	f002 ff11 	bl	8008c08 <HAL_TIM_Base_Init>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005dec:	f7ff fce4 	bl	80057b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005df0:	2300      	movs	r3, #0
 8005df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005df8:	463b      	mov	r3, r7
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4805      	ldr	r0, [pc, #20]	; (8005e14 <MX_TIM7_Init+0x60>)
 8005dfe:	f003 ffd1 	bl	8009da4 <HAL_TIMEx_MasterConfigSynchronization>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005e08:	f7ff fcd6 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	2000083c 	.word	0x2000083c
 8005e18:	40001400 	.word	0x40001400

08005e1c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e22:	1d3b      	adds	r3, r7, #4
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	611a      	str	r2, [r3, #16]
 8005e30:	615a      	str	r2, [r3, #20]
 8005e32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <MX_TIM10_Init+0x90>)
 8005e36:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <MX_TIM10_Init+0x94>)
 8005e38:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 179;
 8005e3a:	4b1c      	ldr	r3, [pc, #112]	; (8005eac <MX_TIM10_Init+0x90>)
 8005e3c:	22b3      	movs	r2, #179	; 0xb3
 8005e3e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e40:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <MX_TIM10_Init+0x90>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8005e46:	4b19      	ldr	r3, [pc, #100]	; (8005eac <MX_TIM10_Init+0x90>)
 8005e48:	2263      	movs	r2, #99	; 0x63
 8005e4a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e4c:	4b17      	ldr	r3, [pc, #92]	; (8005eac <MX_TIM10_Init+0x90>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e52:	4b16      	ldr	r3, [pc, #88]	; (8005eac <MX_TIM10_Init+0x90>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005e58:	4814      	ldr	r0, [pc, #80]	; (8005eac <MX_TIM10_Init+0x90>)
 8005e5a:	f002 fed5 	bl	8008c08 <HAL_TIM_Base_Init>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8005e64:	f7ff fca8 	bl	80057b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005e68:	4810      	ldr	r0, [pc, #64]	; (8005eac <MX_TIM10_Init+0x90>)
 8005e6a:	f002 ffbc 	bl	8008de6 <HAL_TIM_PWM_Init>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8005e74:	f7ff fca0 	bl	80057b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e78:	2360      	movs	r3, #96	; 0x60
 8005e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8005e7c:	2332      	movs	r3, #50	; 0x32
 8005e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4807      	ldr	r0, [pc, #28]	; (8005eac <MX_TIM10_Init+0x90>)
 8005e90:	f003 fc32 	bl	80096f8 <HAL_TIM_PWM_ConfigChannel>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8005e9a:	f7ff fc8d 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005e9e:	4803      	ldr	r0, [pc, #12]	; (8005eac <MX_TIM10_Init+0x90>)
 8005ea0:	f000 fa2e 	bl	8006300 <HAL_TIM_MspPostInit>

}
 8005ea4:	bf00      	nop
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20000884 	.word	0x20000884
 8005eb0:	40014400 	.word	0x40014400

08005eb4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	605a      	str	r2, [r3, #4]
 8005ec2:	609a      	str	r2, [r3, #8]
 8005ec4:	60da      	str	r2, [r3, #12]
 8005ec6:	611a      	str	r2, [r3, #16]
 8005ec8:	615a      	str	r2, [r3, #20]
 8005eca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005ece:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <MX_TIM11_Init+0x94>)
 8005ed0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005ed4:	22b3      	movs	r2, #179	; 0xb3
 8005ed6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ed8:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8005ede:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005ee0:	2263      	movs	r2, #99	; 0x63
 8005ee2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ee4:	4b17      	ldr	r3, [pc, #92]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eea:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005ef0:	4814      	ldr	r0, [pc, #80]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005ef2:	f002 fe89 	bl	8008c08 <HAL_TIM_Base_Init>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 8005efc:	f7ff fc5c 	bl	80057b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8005f00:	4810      	ldr	r0, [pc, #64]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005f02:	f002 ff70 	bl	8008de6 <HAL_TIM_PWM_Init>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8005f0c:	f7ff fc54 	bl	80057b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f10:	2360      	movs	r3, #96	; 0x60
 8005f12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8005f14:	2332      	movs	r3, #50	; 0x32
 8005f16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f20:	1d3b      	adds	r3, r7, #4
 8005f22:	2200      	movs	r2, #0
 8005f24:	4619      	mov	r1, r3
 8005f26:	4807      	ldr	r0, [pc, #28]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005f28:	f003 fbe6 	bl	80096f8 <HAL_TIM_PWM_ConfigChannel>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 8005f32:	f7ff fc41 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8005f36:	4803      	ldr	r0, [pc, #12]	; (8005f44 <MX_TIM11_Init+0x90>)
 8005f38:	f000 f9e2 	bl	8006300 <HAL_TIM_MspPostInit>

}
 8005f3c:	bf00      	nop
 8005f3e:	3720      	adds	r7, #32
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	200008cc 	.word	0x200008cc
 8005f48:	40014800 	.word	0x40014800

08005f4c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f52:	1d3b      	adds	r3, r7, #4
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	60da      	str	r2, [r3, #12]
 8005f5e:	611a      	str	r2, [r3, #16]
 8005f60:	615a      	str	r2, [r3, #20]
 8005f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005f64:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005f66:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <MX_TIM13_Init+0x94>)
 8005f68:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 179;
 8005f6a:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005f6c:	22b3      	movs	r2, #179	; 0xb3
 8005f6e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f70:	4b1a      	ldr	r3, [pc, #104]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 99;
 8005f76:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005f78:	2263      	movs	r2, #99	; 0x63
 8005f7a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f7c:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f82:	4b16      	ldr	r3, [pc, #88]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005f88:	4814      	ldr	r0, [pc, #80]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005f8a:	f002 fe3d 	bl	8008c08 <HAL_TIM_Base_Init>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8005f94:	f7ff fc10 	bl	80057b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8005f98:	4810      	ldr	r0, [pc, #64]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005f9a:	f002 ff24 	bl	8008de6 <HAL_TIM_PWM_Init>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8005fa4:	f7ff fc08 	bl	80057b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fa8:	2360      	movs	r3, #96	; 0x60
 8005faa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8005fac:	2332      	movs	r3, #50	; 0x32
 8005fae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4807      	ldr	r0, [pc, #28]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005fc0:	f003 fb9a 	bl	80096f8 <HAL_TIM_PWM_ConfigChannel>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8005fca:	f7ff fbf5 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8005fce:	4803      	ldr	r0, [pc, #12]	; (8005fdc <MX_TIM13_Init+0x90>)
 8005fd0:	f000 f996 	bl	8006300 <HAL_TIM_MspPostInit>

}
 8005fd4:	bf00      	nop
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20000914 	.word	0x20000914
 8005fe0:	40001c00 	.word	0x40001c00

08005fe4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08e      	sub	sp, #56	; 0x38
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	609a      	str	r2, [r3, #8]
 8005ff8:	60da      	str	r2, [r3, #12]
 8005ffa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a6a      	ldr	r2, [pc, #424]	; (80061ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d13d      	bne.n	8006082 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	623b      	str	r3, [r7, #32]
 800600a:	4b69      	ldr	r3, [pc, #420]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	4a68      	ldr	r2, [pc, #416]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006010:	f043 0301 	orr.w	r3, r3, #1
 8006014:	6453      	str	r3, [r2, #68]	; 0x44
 8006016:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	623b      	str	r3, [r7, #32]
 8006020:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	4b62      	ldr	r3, [pc, #392]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	4a61      	ldr	r2, [pc, #388]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	6313      	str	r3, [r2, #48]	; 0x30
 8006032:	4b5f      	ldr	r3, [pc, #380]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = X_ENC_A_Pin|X_ENC_B_Pin;
 800603e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006044:	2302      	movs	r3, #2
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006048:	2300      	movs	r3, #0
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800604c:	2302      	movs	r3, #2
 800604e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006050:	2301      	movs	r3, #1
 8006052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006058:	4619      	mov	r1, r3
 800605a:	4856      	ldr	r0, [pc, #344]	; (80061b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800605c:	f001 fdbe 	bl	8007bdc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8006060:	2200      	movs	r2, #0
 8006062:	2101      	movs	r1, #1
 8006064:	2019      	movs	r0, #25
 8006066:	f001 f980 	bl	800736a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800606a:	2019      	movs	r0, #25
 800606c:	f001 f999 	bl	80073a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8006070:	2200      	movs	r2, #0
 8006072:	2101      	movs	r1, #1
 8006074:	201a      	movs	r0, #26
 8006076:	f001 f978 	bl	800736a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800607a:	201a      	movs	r0, #26
 800607c:	f001 f991 	bl	80073a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006080:	e090      	b.n	80061a4 <HAL_TIM_Encoder_MspInit+0x1c0>
  else if(tim_encoderHandle->Instance==TIM2)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608a:	d13c      	bne.n	8006106 <HAL_TIM_Encoder_MspInit+0x122>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	4a46      	ldr	r2, [pc, #280]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	6413      	str	r3, [r2, #64]	; 0x40
 800609c:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	4b40      	ldr	r3, [pc, #256]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	4a3f      	ldr	r2, [pc, #252]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	6313      	str	r3, [r2, #48]	; 0x30
 80060b8:	4b3d      	ldr	r3, [pc, #244]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Z_ENC_A_Pin;
 80060c4:	2301      	movs	r3, #1
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c8:	2302      	movs	r3, #2
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060d0:	2302      	movs	r3, #2
 80060d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80060d4:	2301      	movs	r3, #1
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Z_ENC_A_GPIO_Port, &GPIO_InitStruct);
 80060d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060dc:	4619      	mov	r1, r3
 80060de:	4835      	ldr	r0, [pc, #212]	; (80061b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80060e0:	f001 fd7c 	bl	8007bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Z_ENC_B_Pin;
 80060e4:	2302      	movs	r3, #2
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e8:	2302      	movs	r3, #2
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f0:	2300      	movs	r3, #0
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80060f4:	2301      	movs	r3, #1
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Z_ENC_B_GPIO_Port, &GPIO_InitStruct);
 80060f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060fc:	4619      	mov	r1, r3
 80060fe:	482d      	ldr	r0, [pc, #180]	; (80061b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006100:	f001 fd6c 	bl	8007bdc <HAL_GPIO_Init>
}
 8006104:	e04e      	b.n	80061a4 <HAL_TIM_Encoder_MspInit+0x1c0>
  else if(tim_encoderHandle->Instance==TIM3)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2b      	ldr	r2, [pc, #172]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d149      	bne.n	80061a4 <HAL_TIM_Encoder_MspInit+0x1c0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800611a:	f043 0302 	orr.w	r3, r3, #2
 800611e:	6413      	str	r3, [r2, #64]	; 0x40
 8006120:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	4b1f      	ldr	r3, [pc, #124]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006134:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	6313      	str	r3, [r2, #48]	; 0x30
 800613c:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006148:	2300      	movs	r3, #0
 800614a:	60bb      	str	r3, [r7, #8]
 800614c:	4b18      	ldr	r3, [pc, #96]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	4a17      	ldr	r2, [pc, #92]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006152:	f043 0304 	orr.w	r3, r3, #4
 8006156:	6313      	str	r3, [r2, #48]	; 0x30
 8006158:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = C_ENC_B_Pin;
 8006164:	2380      	movs	r3, #128	; 0x80
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006168:	2302      	movs	r3, #2
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616c:	2300      	movs	r3, #0
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006170:	2300      	movs	r3, #0
 8006172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006174:	2302      	movs	r3, #2
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(C_ENC_B_GPIO_Port, &GPIO_InitStruct);
 8006178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800617c:	4619      	mov	r1, r3
 800617e:	480d      	ldr	r0, [pc, #52]	; (80061b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006180:	f001 fd2c 	bl	8007bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = C_ENC_A_Pin;
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006188:	2302      	movs	r3, #2
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618c:	2300      	movs	r3, #0
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006190:	2302      	movs	r3, #2
 8006192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006194:	2302      	movs	r3, #2
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(C_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8006198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800619c:	4619      	mov	r1, r3
 800619e:	4807      	ldr	r0, [pc, #28]	; (80061bc <HAL_TIM_Encoder_MspInit+0x1d8>)
 80061a0:	f001 fd1c 	bl	8007bdc <HAL_GPIO_Init>
}
 80061a4:	bf00      	nop
 80061a6:	3738      	adds	r7, #56	; 0x38
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40010000 	.word	0x40010000
 80061b0:	40023800 	.word	0x40023800
 80061b4:	40020000 	.word	0x40020000
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40020800 	.word	0x40020800

080061c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a46      	ldr	r2, [pc, #280]	; (80062e8 <HAL_TIM_Base_MspInit+0x128>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d116      	bne.n	8006200 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	4b45      	ldr	r3, [pc, #276]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	4a44      	ldr	r2, [pc, #272]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 80061dc:	f043 0310 	orr.w	r3, r3, #16
 80061e0:	6413      	str	r3, [r2, #64]	; 0x40
 80061e2:	4b42      	ldr	r3, [pc, #264]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80061ee:	2200      	movs	r2, #0
 80061f0:	2101      	movs	r1, #1
 80061f2:	2036      	movs	r0, #54	; 0x36
 80061f4:	f001 f8b9 	bl	800736a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80061f8:	2036      	movs	r0, #54	; 0x36
 80061fa:	f001 f8d2 	bl	80073a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80061fe:	e06e      	b.n	80062de <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM7)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a3a      	ldr	r2, [pc, #232]	; (80062f0 <HAL_TIM_Base_MspInit+0x130>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d116      	bne.n	8006238 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	4b37      	ldr	r3, [pc, #220]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	4a36      	ldr	r2, [pc, #216]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 8006214:	f043 0320 	orr.w	r3, r3, #32
 8006218:	6413      	str	r3, [r2, #64]	; 0x40
 800621a:	4b34      	ldr	r3, [pc, #208]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	2101      	movs	r1, #1
 800622a:	2037      	movs	r0, #55	; 0x37
 800622c:	f001 f89d 	bl	800736a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006230:	2037      	movs	r0, #55	; 0x37
 8006232:	f001 f8b6 	bl	80073a2 <HAL_NVIC_EnableIRQ>
}
 8006236:	e052      	b.n	80062de <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <HAL_TIM_Base_MspInit+0x134>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d116      	bne.n	8006270 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	4b29      	ldr	r3, [pc, #164]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	4a28      	ldr	r2, [pc, #160]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 800624c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006250:	6453      	str	r3, [r2, #68]	; 0x44
 8006252:	4b26      	ldr	r3, [pc, #152]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800625e:	2200      	movs	r2, #0
 8006260:	2101      	movs	r1, #1
 8006262:	2019      	movs	r0, #25
 8006264:	f001 f881 	bl	800736a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006268:	2019      	movs	r0, #25
 800626a:	f001 f89a 	bl	80073a2 <HAL_NVIC_EnableIRQ>
}
 800626e:	e036      	b.n	80062de <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a20      	ldr	r2, [pc, #128]	; (80062f8 <HAL_TIM_Base_MspInit+0x138>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d116      	bne.n	80062a8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	4b1b      	ldr	r3, [pc, #108]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	4a1a      	ldr	r2, [pc, #104]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 8006284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006288:	6453      	str	r3, [r2, #68]	; 0x44
 800628a:	4b18      	ldr	r3, [pc, #96]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8006296:	2200      	movs	r2, #0
 8006298:	2101      	movs	r1, #1
 800629a:	201a      	movs	r0, #26
 800629c:	f001 f865 	bl	800736a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80062a0:	201a      	movs	r0, #26
 80062a2:	f001 f87e 	bl	80073a2 <HAL_NVIC_EnableIRQ>
}
 80062a6:	e01a      	b.n	80062de <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a13      	ldr	r2, [pc, #76]	; (80062fc <HAL_TIM_Base_MspInit+0x13c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d115      	bne.n	80062de <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	4a0c      	ldr	r2, [pc, #48]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 80062bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c0:	6413      	str	r3, [r2, #64]	; 0x40
 80062c2:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <HAL_TIM_Base_MspInit+0x12c>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80062ce:	2200      	movs	r2, #0
 80062d0:	2101      	movs	r1, #1
 80062d2:	202c      	movs	r0, #44	; 0x2c
 80062d4:	f001 f849 	bl	800736a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80062d8:	202c      	movs	r0, #44	; 0x2c
 80062da:	f001 f862 	bl	80073a2 <HAL_NVIC_EnableIRQ>
}
 80062de:	bf00      	nop
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40001000 	.word	0x40001000
 80062ec:	40023800 	.word	0x40023800
 80062f0:	40001400 	.word	0x40001400
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	40001c00 	.word	0x40001c00

08006300 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006308:	f107 0314 	add.w	r3, r7, #20
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	605a      	str	r2, [r3, #4]
 8006312:	609a      	str	r2, [r3, #8]
 8006314:	60da      	str	r2, [r3, #12]
 8006316:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a37      	ldr	r2, [pc, #220]	; (80063fc <HAL_TIM_MspPostInit+0xfc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d11f      	bne.n	8006362 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	4b36      	ldr	r3, [pc, #216]	; (8006400 <HAL_TIM_MspPostInit+0x100>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	4a35      	ldr	r2, [pc, #212]	; (8006400 <HAL_TIM_MspPostInit+0x100>)
 800632c:	f043 0302 	orr.w	r3, r3, #2
 8006330:	6313      	str	r3, [r2, #48]	; 0x30
 8006332:	4b33      	ldr	r3, [pc, #204]	; (8006400 <HAL_TIM_MspPostInit+0x100>)
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = X_STEP_Pin;
 800633e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006344:	2302      	movs	r3, #2
 8006346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006348:	2302      	movs	r3, #2
 800634a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800634c:	2302      	movs	r3, #2
 800634e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006350:	2303      	movs	r3, #3
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(X_STEP_GPIO_Port, &GPIO_InitStruct);
 8006354:	f107 0314 	add.w	r3, r7, #20
 8006358:	4619      	mov	r1, r3
 800635a:	482a      	ldr	r0, [pc, #168]	; (8006404 <HAL_TIM_MspPostInit+0x104>)
 800635c:	f001 fc3e 	bl	8007bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8006360:	e047      	b.n	80063f2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM11)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a28      	ldr	r2, [pc, #160]	; (8006408 <HAL_TIM_MspPostInit+0x108>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d11f      	bne.n	80063ac <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	4b23      	ldr	r3, [pc, #140]	; (8006400 <HAL_TIM_MspPostInit+0x100>)
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	4a22      	ldr	r2, [pc, #136]	; (8006400 <HAL_TIM_MspPostInit+0x100>)
 8006376:	f043 0302 	orr.w	r3, r3, #2
 800637a:	6313      	str	r3, [r2, #48]	; 0x30
 800637c:	4b20      	ldr	r3, [pc, #128]	; (8006400 <HAL_TIM_MspPostInit+0x100>)
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Z_STEP_Pin;
 8006388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800638c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800638e:	2302      	movs	r3, #2
 8006390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006392:	2302      	movs	r3, #2
 8006394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006396:	2302      	movs	r3, #2
 8006398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800639a:	2303      	movs	r3, #3
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Z_STEP_GPIO_Port, &GPIO_InitStruct);
 800639e:	f107 0314 	add.w	r3, r7, #20
 80063a2:	4619      	mov	r1, r3
 80063a4:	4817      	ldr	r0, [pc, #92]	; (8006404 <HAL_TIM_MspPostInit+0x104>)
 80063a6:	f001 fc19 	bl	8007bdc <HAL_GPIO_Init>
}
 80063aa:	e022      	b.n	80063f2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM13)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a16      	ldr	r2, [pc, #88]	; (800640c <HAL_TIM_MspPostInit+0x10c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d11d      	bne.n	80063f2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063b6:	2300      	movs	r3, #0
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <HAL_TIM_MspPostInit+0x100>)
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	4a10      	ldr	r2, [pc, #64]	; (8006400 <HAL_TIM_MspPostInit+0x100>)
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	6313      	str	r3, [r2, #48]	; 0x30
 80063c6:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <HAL_TIM_MspPostInit+0x100>)
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	60bb      	str	r3, [r7, #8]
 80063d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = C_STEP_Pin;
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d6:	2302      	movs	r3, #2
 80063d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80063da:	2302      	movs	r3, #2
 80063dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063de:	2302      	movs	r3, #2
 80063e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80063e2:	2309      	movs	r3, #9
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(C_STEP_GPIO_Port, &GPIO_InitStruct);
 80063e6:	f107 0314 	add.w	r3, r7, #20
 80063ea:	4619      	mov	r1, r3
 80063ec:	4808      	ldr	r0, [pc, #32]	; (8006410 <HAL_TIM_MspPostInit+0x110>)
 80063ee:	f001 fbf5 	bl	8007bdc <HAL_GPIO_Init>
}
 80063f2:	bf00      	nop
 80063f4:	3728      	adds	r7, #40	; 0x28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40014400 	.word	0x40014400
 8006400:	40023800 	.word	0x40023800
 8006404:	40020400 	.word	0x40020400
 8006408:	40014800 	.word	0x40014800
 800640c:	40001c00 	.word	0x40001c00
 8006410:	40020000 	.word	0x40020000

08006414 <MX_UART5_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <MX_UART5_Init+0x4c>)
 800641a:	4a12      	ldr	r2, [pc, #72]	; (8006464 <MX_UART5_Init+0x50>)
 800641c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800641e:	4b10      	ldr	r3, [pc, #64]	; (8006460 <MX_UART5_Init+0x4c>)
 8006420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006424:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006426:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <MX_UART5_Init+0x4c>)
 8006428:	2200      	movs	r2, #0
 800642a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <MX_UART5_Init+0x4c>)
 800642e:	2200      	movs	r2, #0
 8006430:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <MX_UART5_Init+0x4c>)
 8006434:	2200      	movs	r2, #0
 8006436:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006438:	4b09      	ldr	r3, [pc, #36]	; (8006460 <MX_UART5_Init+0x4c>)
 800643a:	220c      	movs	r2, #12
 800643c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <MX_UART5_Init+0x4c>)
 8006440:	2200      	movs	r2, #0
 8006442:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <MX_UART5_Init+0x4c>)
 8006446:	2200      	movs	r2, #0
 8006448:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 800644a:	4805      	ldr	r0, [pc, #20]	; (8006460 <MX_UART5_Init+0x4c>)
 800644c:	f003 fd87 	bl	8009f5e <HAL_HalfDuplex_Init>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8006456:	f7ff f9af 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	2000095c 	.word	0x2000095c
 8006464:	40005000 	.word	0x40005000

08006468 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800646c:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <MX_USART2_UART_Init+0x4c>)
 800646e:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <MX_USART2_UART_Init+0x50>)
 8006470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <MX_USART2_UART_Init+0x4c>)
 8006474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800647a:	4b0e      	ldr	r3, [pc, #56]	; (80064b4 <MX_USART2_UART_Init+0x4c>)
 800647c:	2200      	movs	r2, #0
 800647e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006480:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <MX_USART2_UART_Init+0x4c>)
 8006482:	2200      	movs	r2, #0
 8006484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006486:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <MX_USART2_UART_Init+0x4c>)
 8006488:	2200      	movs	r2, #0
 800648a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <MX_USART2_UART_Init+0x4c>)
 800648e:	220c      	movs	r2, #12
 8006490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006492:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <MX_USART2_UART_Init+0x4c>)
 8006494:	2200      	movs	r2, #0
 8006496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <MX_USART2_UART_Init+0x4c>)
 800649a:	2200      	movs	r2, #0
 800649c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800649e:	4805      	ldr	r0, [pc, #20]	; (80064b4 <MX_USART2_UART_Init+0x4c>)
 80064a0:	f003 fd10 	bl	8009ec4 <HAL_UART_Init>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80064aa:	f7ff f985 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80064ae:	bf00      	nop
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200009a0 	.word	0x200009a0
 80064b8:	40004400 	.word	0x40004400

080064bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80064c0:	4b11      	ldr	r3, [pc, #68]	; (8006508 <MX_USART3_UART_Init+0x4c>)
 80064c2:	4a12      	ldr	r2, [pc, #72]	; (800650c <MX_USART3_UART_Init+0x50>)
 80064c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80064c6:	4b10      	ldr	r3, [pc, #64]	; (8006508 <MX_USART3_UART_Init+0x4c>)
 80064c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80064cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80064ce:	4b0e      	ldr	r3, [pc, #56]	; (8006508 <MX_USART3_UART_Init+0x4c>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80064d4:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <MX_USART3_UART_Init+0x4c>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80064da:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <MX_USART3_UART_Init+0x4c>)
 80064dc:	2200      	movs	r2, #0
 80064de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80064e0:	4b09      	ldr	r3, [pc, #36]	; (8006508 <MX_USART3_UART_Init+0x4c>)
 80064e2:	220c      	movs	r2, #12
 80064e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064e6:	4b08      	ldr	r3, [pc, #32]	; (8006508 <MX_USART3_UART_Init+0x4c>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80064ec:	4b06      	ldr	r3, [pc, #24]	; (8006508 <MX_USART3_UART_Init+0x4c>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80064f2:	4805      	ldr	r0, [pc, #20]	; (8006508 <MX_USART3_UART_Init+0x4c>)
 80064f4:	f003 fce6 	bl	8009ec4 <HAL_UART_Init>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80064fe:	f7ff f95b 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200009e4 	.word	0x200009e4
 800650c:	40004800 	.word	0x40004800

08006510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	; 0x38
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	609a      	str	r2, [r3, #8]
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a63      	ldr	r2, [pc, #396]	; (80066bc <HAL_UART_MspInit+0x1ac>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d12d      	bne.n	800658e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006532:	2300      	movs	r3, #0
 8006534:	623b      	str	r3, [r7, #32]
 8006536:	4b62      	ldr	r3, [pc, #392]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	4a61      	ldr	r2, [pc, #388]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 800653c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006540:	6413      	str	r3, [r2, #64]	; 0x40
 8006542:	4b5f      	ldr	r3, [pc, #380]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800654e:	2300      	movs	r3, #0
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	4b5b      	ldr	r3, [pc, #364]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	4a5a      	ldr	r2, [pc, #360]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 8006558:	f043 0304 	orr.w	r3, r3, #4
 800655c:	6313      	str	r3, [r2, #48]	; 0x30
 800655e:	4b58      	ldr	r3, [pc, #352]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800656a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006570:	2312      	movs	r3, #18
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006574:	2300      	movs	r3, #0
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006578:	2303      	movs	r3, #3
 800657a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800657c:	2308      	movs	r3, #8
 800657e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006584:	4619      	mov	r1, r3
 8006586:	484f      	ldr	r0, [pc, #316]	; (80066c4 <HAL_UART_MspInit+0x1b4>)
 8006588:	f001 fb28 	bl	8007bdc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800658c:	e091      	b.n	80066b2 <HAL_UART_MspInit+0x1a2>
  else if(uartHandle->Instance==USART2)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a4d      	ldr	r2, [pc, #308]	; (80066c8 <HAL_UART_MspInit+0x1b8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d134      	bne.n	8006602 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006598:	2300      	movs	r3, #0
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	4b48      	ldr	r3, [pc, #288]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	4a47      	ldr	r2, [pc, #284]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 80065a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a6:	6413      	str	r3, [r2, #64]	; 0x40
 80065a8:	4b45      	ldr	r3, [pc, #276]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	4b41      	ldr	r3, [pc, #260]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	4a40      	ldr	r2, [pc, #256]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6313      	str	r3, [r2, #48]	; 0x30
 80065c4:	4b3e      	ldr	r3, [pc, #248]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80065d0:	230c      	movs	r3, #12
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d4:	2302      	movs	r3, #2
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065dc:	2303      	movs	r3, #3
 80065de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065e0:	2307      	movs	r3, #7
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e8:	4619      	mov	r1, r3
 80065ea:	4838      	ldr	r0, [pc, #224]	; (80066cc <HAL_UART_MspInit+0x1bc>)
 80065ec:	f001 faf6 	bl	8007bdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80065f0:	2200      	movs	r2, #0
 80065f2:	2100      	movs	r1, #0
 80065f4:	2026      	movs	r0, #38	; 0x26
 80065f6:	f000 feb8 	bl	800736a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80065fa:	2026      	movs	r0, #38	; 0x26
 80065fc:	f000 fed1 	bl	80073a2 <HAL_NVIC_EnableIRQ>
}
 8006600:	e057      	b.n	80066b2 <HAL_UART_MspInit+0x1a2>
  else if(uartHandle->Instance==USART3)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a32      	ldr	r2, [pc, #200]	; (80066d0 <HAL_UART_MspInit+0x1c0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d152      	bne.n	80066b2 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	4a2a      	ldr	r2, [pc, #168]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 8006616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800661a:	6413      	str	r3, [r2, #64]	; 0x40
 800661c:	4b28      	ldr	r3, [pc, #160]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	4a23      	ldr	r2, [pc, #140]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 8006632:	f043 0304 	orr.w	r3, r3, #4
 8006636:	6313      	str	r3, [r2, #48]	; 0x30
 8006638:	4b21      	ldr	r3, [pc, #132]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006644:	2300      	movs	r3, #0
 8006646:	60bb      	str	r3, [r7, #8]
 8006648:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 800664e:	f043 0302 	orr.w	r3, r3, #2
 8006652:	6313      	str	r3, [r2, #48]	; 0x30
 8006654:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <HAL_UART_MspInit+0x1b0>)
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006660:	2320      	movs	r3, #32
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006664:	2302      	movs	r3, #2
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006668:	2300      	movs	r3, #0
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800666c:	2303      	movs	r3, #3
 800666e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006670:	2307      	movs	r3, #7
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006678:	4619      	mov	r1, r3
 800667a:	4812      	ldr	r0, [pc, #72]	; (80066c4 <HAL_UART_MspInit+0x1b4>)
 800667c:	f001 faae 	bl	8007bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006686:	2302      	movs	r3, #2
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800668a:	2300      	movs	r3, #0
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800668e:	2303      	movs	r3, #3
 8006690:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006692:	2307      	movs	r3, #7
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800669a:	4619      	mov	r1, r3
 800669c:	480d      	ldr	r0, [pc, #52]	; (80066d4 <HAL_UART_MspInit+0x1c4>)
 800669e:	f001 fa9d 	bl	8007bdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80066a2:	2200      	movs	r2, #0
 80066a4:	2100      	movs	r1, #0
 80066a6:	2027      	movs	r0, #39	; 0x27
 80066a8:	f000 fe5f 	bl	800736a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80066ac:	2027      	movs	r0, #39	; 0x27
 80066ae:	f000 fe78 	bl	80073a2 <HAL_NVIC_EnableIRQ>
}
 80066b2:	bf00      	nop
 80066b4:	3738      	adds	r7, #56	; 0x38
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40005000 	.word	0x40005000
 80066c0:	40023800 	.word	0x40023800
 80066c4:	40020800 	.word	0x40020800
 80066c8:	40004400 	.word	0x40004400
 80066cc:	40020000 	.word	0x40020000
 80066d0:	40004800 	.word	0x40004800
 80066d4:	40020400 	.word	0x40020400

080066d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80066d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80066dc:	480d      	ldr	r0, [pc, #52]	; (8006714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80066de:	490e      	ldr	r1, [pc, #56]	; (8006718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80066e0:	4a0e      	ldr	r2, [pc, #56]	; (800671c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80066e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066e4:	e002      	b.n	80066ec <LoopCopyDataInit>

080066e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066ea:	3304      	adds	r3, #4

080066ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066f0:	d3f9      	bcc.n	80066e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066f2:	4a0b      	ldr	r2, [pc, #44]	; (8006720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066f4:	4c0b      	ldr	r4, [pc, #44]	; (8006724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80066f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066f8:	e001      	b.n	80066fe <LoopFillZerobss>

080066fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066fc:	3204      	adds	r2, #4

080066fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006700:	d3fb      	bcc.n	80066fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006702:	f7ff fa0f 	bl	8005b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006706:	f005 ffa7 	bl	800c658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800670a:	f7fe fe75 	bl	80053f8 <main>
  bx  lr    
 800670e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006718:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 800671c:	0800fe74 	.word	0x0800fe74
  ldr r2, =_sbss
 8006720:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8006724:	20000a40 	.word	0x20000a40

08006728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006728:	e7fe      	b.n	8006728 <ADC_IRQHandler>
	...

0800672c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006730:	4b0e      	ldr	r3, [pc, #56]	; (800676c <HAL_Init+0x40>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a0d      	ldr	r2, [pc, #52]	; (800676c <HAL_Init+0x40>)
 8006736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800673a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800673c:	4b0b      	ldr	r3, [pc, #44]	; (800676c <HAL_Init+0x40>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0a      	ldr	r2, [pc, #40]	; (800676c <HAL_Init+0x40>)
 8006742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <HAL_Init+0x40>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a07      	ldr	r2, [pc, #28]	; (800676c <HAL_Init+0x40>)
 800674e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006754:	2003      	movs	r0, #3
 8006756:	f000 fdfd 	bl	8007354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800675a:	2000      	movs	r0, #0
 800675c:	f000 f808 	bl	8006770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006760:	f7ff f830 	bl	80057c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40023c00 	.word	0x40023c00

08006770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006778:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <HAL_InitTick+0x54>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <HAL_InitTick+0x58>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	4619      	mov	r1, r3
 8006782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006786:	fbb3 f3f1 	udiv	r3, r3, r1
 800678a:	fbb2 f3f3 	udiv	r3, r2, r3
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fe15 	bl	80073be <HAL_SYSTICK_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e00e      	b.n	80067bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b0f      	cmp	r3, #15
 80067a2:	d80a      	bhi.n	80067ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067a4:	2200      	movs	r2, #0
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	f000 fddd 	bl	800736a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067b0:	4a06      	ldr	r2, [pc, #24]	; (80067cc <HAL_InitTick+0x5c>)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e000      	b.n	80067bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	200000e0 	.word	0x200000e0
 80067c8:	200000e8 	.word	0x200000e8
 80067cc:	200000e4 	.word	0x200000e4

080067d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067d4:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_IncTick+0x20>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <HAL_IncTick+0x24>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4413      	add	r3, r2
 80067e0:	4a04      	ldr	r2, [pc, #16]	; (80067f4 <HAL_IncTick+0x24>)
 80067e2:	6013      	str	r3, [r2, #0]
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	200000e8 	.word	0x200000e8
 80067f4:	20000a28 	.word	0x20000a28

080067f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
  return uwTick;
 80067fc:	4b03      	ldr	r3, [pc, #12]	; (800680c <HAL_GetTick+0x14>)
 80067fe:	681b      	ldr	r3, [r3, #0]
}
 8006800:	4618      	mov	r0, r3
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20000a28 	.word	0x20000a28

08006810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006818:	f7ff ffee 	bl	80067f8 <HAL_GetTick>
 800681c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006828:	d005      	beq.n	8006836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800682a:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <HAL_Delay+0x44>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006836:	bf00      	nop
 8006838:	f7ff ffde 	bl	80067f8 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	429a      	cmp	r2, r3
 8006846:	d8f7      	bhi.n	8006838 <HAL_Delay+0x28>
  {
  }
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	200000e8 	.word	0x200000e8

08006858 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e033      	b.n	80068d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fe fbf2 	bl	8005060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	2b00      	cmp	r3, #0
 8006894:	d118      	bne.n	80068c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800689e:	f023 0302 	bic.w	r3, r3, #2
 80068a2:	f043 0202 	orr.w	r2, r3, #2
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fb04 	bl	8006eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	f043 0201 	orr.w	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	641a      	str	r2, [r3, #64]	; 0x40
 80068c6:	e001      	b.n	80068cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_ADC_Stop+0x16>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e021      	b.n	8006938 <HAL_ADC_Stop+0x5a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	f043 0201 	orr.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_ADC_Start_DMA+0x1e>
 800695e:	2302      	movs	r3, #2
 8006960:	e0e9      	b.n	8006b36 <HAL_ADC_Start_DMA+0x1f2>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d018      	beq.n	80069aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006988:	4b6d      	ldr	r3, [pc, #436]	; (8006b40 <HAL_ADC_Start_DMA+0x1fc>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a6d      	ldr	r2, [pc, #436]	; (8006b44 <HAL_ADC_Start_DMA+0x200>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	0c9a      	lsrs	r2, r3, #18
 8006994:	4613      	mov	r3, r2
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	4413      	add	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800699c:	e002      	b.n	80069a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f9      	bne.n	800699e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b8:	d107      	bne.n	80069ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	f040 80a1 	bne.w	8006b1c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a18:	d106      	bne.n	8006a28 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	f023 0206 	bic.w	r2, r3, #6
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	645a      	str	r2, [r3, #68]	; 0x44
 8006a26:	e002      	b.n	8006a2e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a36:	4b44      	ldr	r3, [pc, #272]	; (8006b48 <HAL_ADC_Start_DMA+0x204>)
 8006a38:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	4a43      	ldr	r2, [pc, #268]	; (8006b4c <HAL_ADC_Start_DMA+0x208>)
 8006a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	4a42      	ldr	r2, [pc, #264]	; (8006b50 <HAL_ADC_Start_DMA+0x20c>)
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	4a41      	ldr	r2, [pc, #260]	; (8006b54 <HAL_ADC_Start_DMA+0x210>)
 8006a50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006a5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	334c      	adds	r3, #76	; 0x4c
 8006a86:	4619      	mov	r1, r3
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f000 fd52 	bl	8007534 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d12a      	bne.n	8006af2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a2d      	ldr	r2, [pc, #180]	; (8006b58 <HAL_ADC_Start_DMA+0x214>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d015      	beq.n	8006ad2 <HAL_ADC_Start_DMA+0x18e>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a2c      	ldr	r2, [pc, #176]	; (8006b5c <HAL_ADC_Start_DMA+0x218>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d105      	bne.n	8006abc <HAL_ADC_Start_DMA+0x178>
 8006ab0:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <HAL_ADC_Start_DMA+0x204>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a27      	ldr	r2, [pc, #156]	; (8006b60 <HAL_ADC_Start_DMA+0x21c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d136      	bne.n	8006b34 <HAL_ADC_Start_DMA+0x1f0>
 8006ac6:	4b20      	ldr	r3, [pc, #128]	; (8006b48 <HAL_ADC_Start_DMA+0x204>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d130      	bne.n	8006b34 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d129      	bne.n	8006b34 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	e020      	b.n	8006b34 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <HAL_ADC_Start_DMA+0x214>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d11b      	bne.n	8006b34 <HAL_ADC_Start_DMA+0x1f0>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d114      	bne.n	8006b34 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b18:	609a      	str	r2, [r3, #8]
 8006b1a:	e00b      	b.n	8006b34 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	f043 0210 	orr.w	r2, r3, #16
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2c:	f043 0201 	orr.w	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	200000e0 	.word	0x200000e0
 8006b44:	431bde83 	.word	0x431bde83
 8006b48:	40012300 	.word	0x40012300
 8006b4c:	080070b1 	.word	0x080070b1
 8006b50:	0800716b 	.word	0x0800716b
 8006b54:	08007187 	.word	0x08007187
 8006b58:	40012000 	.word	0x40012000
 8006b5c:	40012100 	.word	0x40012100
 8006b60:	40012200 	.word	0x40012200

08006b64 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_ADC_Stop_DMA+0x1a>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e048      	b.n	8006c10 <HAL_ADC_Stop_DMA+0xac>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0201 	bic.w	r2, r2, #1
 8006b94:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d130      	bne.n	8006c06 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d10f      	bne.n	8006be2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fd0c 	bl	80075e4 <HAL_DMA_Abort>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006bf0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
 8006bfe:	f043 0201 	orr.w	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_ADC_ConfigChannel+0x1c>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e113      	b.n	8006e98 <HAL_ADC_ConfigChannel+0x244>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b09      	cmp	r3, #9
 8006c7e:	d925      	bls.n	8006ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68d9      	ldr	r1, [r3, #12]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4613      	mov	r3, r2
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4413      	add	r3, r2
 8006c94:	3b1e      	subs	r3, #30
 8006c96:	2207      	movs	r2, #7
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	43da      	mvns	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	400a      	ands	r2, r1
 8006ca4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68d9      	ldr	r1, [r3, #12]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	4603      	mov	r3, r0
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4403      	add	r3, r0
 8006cbe:	3b1e      	subs	r3, #30
 8006cc0:	409a      	lsls	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	60da      	str	r2, [r3, #12]
 8006cca:	e022      	b.n	8006d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6919      	ldr	r1, [r3, #16]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	43da      	mvns	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	400a      	ands	r2, r1
 8006cee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6919      	ldr	r1, [r3, #16]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4618      	mov	r0, r3
 8006d02:	4603      	mov	r3, r0
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4403      	add	r3, r0
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b06      	cmp	r3, #6
 8006d18:	d824      	bhi.n	8006d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	3b05      	subs	r3, #5
 8006d2c:	221f      	movs	r2, #31
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43da      	mvns	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	400a      	ands	r2, r1
 8006d3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4618      	mov	r0, r3
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	3b05      	subs	r3, #5
 8006d56:	fa00 f203 	lsl.w	r2, r0, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	635a      	str	r2, [r3, #52]	; 0x34
 8006d62:	e04c      	b.n	8006dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b0c      	cmp	r3, #12
 8006d6a:	d824      	bhi.n	8006db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3b23      	subs	r3, #35	; 0x23
 8006d7e:	221f      	movs	r2, #31
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	43da      	mvns	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	400a      	ands	r2, r1
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	3b23      	subs	r3, #35	; 0x23
 8006da8:	fa00 f203 	lsl.w	r2, r0, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
 8006db4:	e023      	b.n	8006dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	3b41      	subs	r3, #65	; 0x41
 8006dc8:	221f      	movs	r2, #31
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	43da      	mvns	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	400a      	ands	r2, r1
 8006dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4618      	mov	r0, r3
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	3b41      	subs	r3, #65	; 0x41
 8006df2:	fa00 f203 	lsl.w	r2, r0, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006dfe:	4b29      	ldr	r3, [pc, #164]	; (8006ea4 <HAL_ADC_ConfigChannel+0x250>)
 8006e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a28      	ldr	r2, [pc, #160]	; (8006ea8 <HAL_ADC_ConfigChannel+0x254>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d10f      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x1d8>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b12      	cmp	r3, #18
 8006e12:	d10b      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1d      	ldr	r2, [pc, #116]	; (8006ea8 <HAL_ADC_ConfigChannel+0x254>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d12b      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x23a>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1c      	ldr	r2, [pc, #112]	; (8006eac <HAL_ADC_ConfigChannel+0x258>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <HAL_ADC_ConfigChannel+0x1f4>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b11      	cmp	r3, #17
 8006e46:	d122      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a11      	ldr	r2, [pc, #68]	; (8006eac <HAL_ADC_ConfigChannel+0x258>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d111      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e6a:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <HAL_ADC_ConfigChannel+0x25c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a11      	ldr	r2, [pc, #68]	; (8006eb4 <HAL_ADC_ConfigChannel+0x260>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	0c9a      	lsrs	r2, r3, #18
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006e80:	e002      	b.n	8006e88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f9      	bne.n	8006e82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40012300 	.word	0x40012300
 8006ea8:	40012000 	.word	0x40012000
 8006eac:	10000012 	.word	0x10000012
 8006eb0:	200000e0 	.word	0x200000e0
 8006eb4:	431bde83 	.word	0x431bde83

08006eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ec0:	4b79      	ldr	r3, [pc, #484]	; (80070a8 <ADC_Init+0x1f0>)
 8006ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	021a      	lsls	r2, r3, #8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6859      	ldr	r1, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6899      	ldr	r1, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	4a58      	ldr	r2, [pc, #352]	; (80070ac <ADC_Init+0x1f4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d022      	beq.n	8006f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6899      	ldr	r1, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	609a      	str	r2, [r3, #8]
 8006f94:	e00f      	b.n	8006fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0202 	bic.w	r2, r2, #2
 8006fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6899      	ldr	r1, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7e1b      	ldrb	r3, [r3, #24]
 8006fd0:	005a      	lsls	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01b      	beq.n	800701c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6859      	ldr	r1, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	3b01      	subs	r3, #1
 8007010:	035a      	lsls	r2, r3, #13
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	e007      	b.n	800702c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800702a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	3b01      	subs	r3, #1
 8007048:	051a      	lsls	r2, r3, #20
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6899      	ldr	r1, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800706e:	025a      	lsls	r2, r3, #9
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6899      	ldr	r1, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	029a      	lsls	r2, r3, #10
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	40012300 	.word	0x40012300
 80070ac:	0f000001 	.word	0x0f000001

080070b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d13c      	bne.n	8007144 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d12b      	bne.n	800713c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d127      	bne.n	800713c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d006      	beq.n	8007108 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007104:	2b00      	cmp	r3, #0
 8007106:	d119      	bne.n	800713c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0220 	bic.w	r2, r2, #32
 8007116:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d105      	bne.n	800713c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007134:	f043 0201 	orr.w	r2, r3, #1
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff fd6b 	bl	8006c18 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007142:	e00e      	b.n	8007162 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff fd75 	bl	8006c40 <HAL_ADC_ErrorCallback>
}
 8007156:	e004      	b.n	8007162 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
}
 8007162:	bf00      	nop
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007176:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f7ff fd57 	bl	8006c2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800717e:	bf00      	nop
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2240      	movs	r2, #64	; 0x40
 8007198:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	f043 0204 	orr.w	r2, r3, #4
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f7ff fd4a 	bl	8006c40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071ac:	bf00      	nop
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071c4:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <__NVIC_SetPriorityGrouping+0x44>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80071d0:	4013      	ands	r3, r2
 80071d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80071dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80071e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071e6:	4a04      	ldr	r2, [pc, #16]	; (80071f8 <__NVIC_SetPriorityGrouping+0x44>)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	60d3      	str	r3, [r2, #12]
}
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	e000ed00 	.word	0xe000ed00

080071fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007200:	4b04      	ldr	r3, [pc, #16]	; (8007214 <__NVIC_GetPriorityGrouping+0x18>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	0a1b      	lsrs	r3, r3, #8
 8007206:	f003 0307 	and.w	r3, r3, #7
}
 800720a:	4618      	mov	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007226:	2b00      	cmp	r3, #0
 8007228:	db0b      	blt.n	8007242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	f003 021f 	and.w	r2, r3, #31
 8007230:	4907      	ldr	r1, [pc, #28]	; (8007250 <__NVIC_EnableIRQ+0x38>)
 8007232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	2001      	movs	r0, #1
 800723a:	fa00 f202 	lsl.w	r2, r0, r2
 800723e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	e000e100 	.word	0xe000e100

08007254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	6039      	str	r1, [r7, #0]
 800725e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007264:	2b00      	cmp	r3, #0
 8007266:	db0a      	blt.n	800727e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	b2da      	uxtb	r2, r3
 800726c:	490c      	ldr	r1, [pc, #48]	; (80072a0 <__NVIC_SetPriority+0x4c>)
 800726e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007272:	0112      	lsls	r2, r2, #4
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	440b      	add	r3, r1
 8007278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800727c:	e00a      	b.n	8007294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	b2da      	uxtb	r2, r3
 8007282:	4908      	ldr	r1, [pc, #32]	; (80072a4 <__NVIC_SetPriority+0x50>)
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	3b04      	subs	r3, #4
 800728c:	0112      	lsls	r2, r2, #4
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	440b      	add	r3, r1
 8007292:	761a      	strb	r2, [r3, #24]
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	e000e100 	.word	0xe000e100
 80072a4:	e000ed00 	.word	0xe000ed00

080072a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b089      	sub	sp, #36	; 0x24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f1c3 0307 	rsb	r3, r3, #7
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	bf28      	it	cs
 80072c6:	2304      	movcs	r3, #4
 80072c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	3304      	adds	r3, #4
 80072ce:	2b06      	cmp	r3, #6
 80072d0:	d902      	bls.n	80072d8 <NVIC_EncodePriority+0x30>
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	3b03      	subs	r3, #3
 80072d6:	e000      	b.n	80072da <NVIC_EncodePriority+0x32>
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072dc:	f04f 32ff 	mov.w	r2, #4294967295
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	fa02 f303 	lsl.w	r3, r2, r3
 80072e6:	43da      	mvns	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	401a      	ands	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072f0:	f04f 31ff 	mov.w	r1, #4294967295
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	fa01 f303 	lsl.w	r3, r1, r3
 80072fa:	43d9      	mvns	r1, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007300:	4313      	orrs	r3, r2
         );
}
 8007302:	4618      	mov	r0, r3
 8007304:	3724      	adds	r7, #36	; 0x24
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3b01      	subs	r3, #1
 800731c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007320:	d301      	bcc.n	8007326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007322:	2301      	movs	r3, #1
 8007324:	e00f      	b.n	8007346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007326:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <SysTick_Config+0x40>)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3b01      	subs	r3, #1
 800732c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800732e:	210f      	movs	r1, #15
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	f7ff ff8e 	bl	8007254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <SysTick_Config+0x40>)
 800733a:	2200      	movs	r2, #0
 800733c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800733e:	4b04      	ldr	r3, [pc, #16]	; (8007350 <SysTick_Config+0x40>)
 8007340:	2207      	movs	r2, #7
 8007342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	e000e010 	.word	0xe000e010

08007354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff ff29 	bl	80071b4 <__NVIC_SetPriorityGrouping>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	4603      	mov	r3, r0
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800737c:	f7ff ff3e 	bl	80071fc <__NVIC_GetPriorityGrouping>
 8007380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	6978      	ldr	r0, [r7, #20]
 8007388:	f7ff ff8e 	bl	80072a8 <NVIC_EncodePriority>
 800738c:	4602      	mov	r2, r0
 800738e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff ff5d 	bl	8007254 <__NVIC_SetPriority>
}
 800739a:	bf00      	nop
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	4603      	mov	r3, r0
 80073aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff ff31 	bl	8007218 <__NVIC_EnableIRQ>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff ffa2 	bl	8007310 <SysTick_Config>
 80073cc:	4603      	mov	r3, r0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80073e4:	f7ff fa08 	bl	80067f8 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e099      	b.n	8007528 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0201 	bic.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007414:	e00f      	b.n	8007436 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007416:	f7ff f9ef 	bl	80067f8 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b05      	cmp	r3, #5
 8007422:	d908      	bls.n	8007436 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2203      	movs	r2, #3
 800742e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e078      	b.n	8007528 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e8      	bne.n	8007416 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4b38      	ldr	r3, [pc, #224]	; (8007530 <HAL_DMA_Init+0x158>)
 8007450:	4013      	ands	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007462:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800746e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800747a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	2b04      	cmp	r3, #4
 800748e:	d107      	bne.n	80074a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	4313      	orrs	r3, r2
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4313      	orrs	r3, r2
 800749e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f023 0307 	bic.w	r3, r3, #7
 80074b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d117      	bne.n	80074fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00e      	beq.n	80074fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fb01 	bl	8007ae4 <DMA_CheckFifoParam>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2240      	movs	r2, #64	; 0x40
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80074f6:	2301      	movs	r3, #1
 80074f8:	e016      	b.n	8007528 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fab8 	bl	8007a78 <DMA_CalcBaseAndBitshift>
 8007508:	4603      	mov	r3, r0
 800750a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007510:	223f      	movs	r2, #63	; 0x3f
 8007512:	409a      	lsls	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	f010803f 	.word	0xf010803f

08007534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_DMA_Start_IT+0x26>
 8007556:	2302      	movs	r3, #2
 8007558:	e040      	b.n	80075dc <HAL_DMA_Start_IT+0xa8>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b01      	cmp	r3, #1
 800756c:	d12f      	bne.n	80075ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2202      	movs	r2, #2
 8007572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 fa4a 	bl	8007a1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758c:	223f      	movs	r2, #63	; 0x3f
 800758e:	409a      	lsls	r2, r3
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0216 	orr.w	r2, r2, #22
 80075a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0208 	orr.w	r2, r2, #8
 80075ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	e005      	b.n	80075da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80075d6:	2302      	movs	r3, #2
 80075d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80075f2:	f7ff f901 	bl	80067f8 <HAL_GetTick>
 80075f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d008      	beq.n	8007616 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2280      	movs	r2, #128	; 0x80
 8007608:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e052      	b.n	80076bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0216 	bic.w	r2, r2, #22
 8007624:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007634:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d103      	bne.n	8007646 <HAL_DMA_Abort+0x62>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0208 	bic.w	r2, r2, #8
 8007654:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007666:	e013      	b.n	8007690 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007668:	f7ff f8c6 	bl	80067f8 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b05      	cmp	r3, #5
 8007674:	d90c      	bls.n	8007690 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2203      	movs	r2, #3
 8007680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e015      	b.n	80076bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e4      	bne.n	8007668 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a2:	223f      	movs	r2, #63	; 0x3f
 80076a4:	409a      	lsls	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d004      	beq.n	80076e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2280      	movs	r2, #128	; 0x80
 80076dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e00c      	b.n	80076fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2205      	movs	r2, #5
 80076e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007714:	4b8e      	ldr	r3, [pc, #568]	; (8007950 <HAL_DMA_IRQHandler+0x248>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a8e      	ldr	r2, [pc, #568]	; (8007954 <HAL_DMA_IRQHandler+0x24c>)
 800771a:	fba2 2303 	umull	r2, r3, r2, r3
 800771e:	0a9b      	lsrs	r3, r3, #10
 8007720:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007726:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007732:	2208      	movs	r2, #8
 8007734:	409a      	lsls	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4013      	ands	r3, r2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01a      	beq.n	8007774 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d013      	beq.n	8007774 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0204 	bic.w	r2, r2, #4
 800775a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007760:	2208      	movs	r2, #8
 8007762:	409a      	lsls	r2, r3
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776c:	f043 0201 	orr.w	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007778:	2201      	movs	r2, #1
 800777a:	409a      	lsls	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4013      	ands	r3, r2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007796:	2201      	movs	r2, #1
 8007798:	409a      	lsls	r2, r3
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a2:	f043 0202 	orr.w	r2, r3, #2
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ae:	2204      	movs	r2, #4
 80077b0:	409a      	lsls	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4013      	ands	r3, r2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d012      	beq.n	80077e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077cc:	2204      	movs	r2, #4
 80077ce:	409a      	lsls	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d8:	f043 0204 	orr.w	r2, r3, #4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e4:	2210      	movs	r2, #16
 80077e6:	409a      	lsls	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d043      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0308 	and.w	r3, r3, #8
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d03c      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007802:	2210      	movs	r2, #16
 8007804:	409a      	lsls	r2, r3
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d018      	beq.n	800784a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d024      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
 8007836:	e01f      	b.n	8007878 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01b      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	4798      	blx	r3
 8007848:	e016      	b.n	8007878 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007854:	2b00      	cmp	r3, #0
 8007856:	d107      	bne.n	8007868 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0208 	bic.w	r2, r2, #8
 8007866:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800787c:	2220      	movs	r2, #32
 800787e:	409a      	lsls	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4013      	ands	r3, r2
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 808f 	beq.w	80079a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8087 	beq.w	80079a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789e:	2220      	movs	r2, #32
 80078a0:	409a      	lsls	r2, r3
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	d136      	bne.n	8007920 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0216 	bic.w	r2, r2, #22
 80078c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	695a      	ldr	r2, [r3, #20]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d103      	bne.n	80078e2 <HAL_DMA_IRQHandler+0x1da>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0208 	bic.w	r2, r2, #8
 80078f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f6:	223f      	movs	r2, #63	; 0x3f
 80078f8:	409a      	lsls	r2, r3
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007912:	2b00      	cmp	r3, #0
 8007914:	d07e      	beq.n	8007a14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
        }
        return;
 800791e:	e079      	b.n	8007a14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01d      	beq.n	800796a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10d      	bne.n	8007958 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007940:	2b00      	cmp	r3, #0
 8007942:	d031      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
 800794c:	e02c      	b.n	80079a8 <HAL_DMA_IRQHandler+0x2a0>
 800794e:	bf00      	nop
 8007950:	200000e0 	.word	0x200000e0
 8007954:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795c:	2b00      	cmp	r3, #0
 800795e:	d023      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	4798      	blx	r3
 8007968:	e01e      	b.n	80079a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10f      	bne.n	8007998 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0210 	bic.w	r2, r2, #16
 8007986:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d032      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d022      	beq.n	8007a02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2205      	movs	r2, #5
 80079c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0201 	bic.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	3301      	adds	r3, #1
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d307      	bcc.n	80079f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1f2      	bne.n	80079d4 <HAL_DMA_IRQHandler+0x2cc>
 80079ee:	e000      	b.n	80079f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80079f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
 8007a12:	e000      	b.n	8007a16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007a14:	bf00      	nop
    }
  }
}
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b40      	cmp	r3, #64	; 0x40
 8007a48:	d108      	bne.n	8007a5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007a5a:	e007      	b.n	8007a6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	60da      	str	r2, [r3, #12]
}
 8007a6c:	bf00      	nop
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	3b10      	subs	r3, #16
 8007a88:	4a14      	ldr	r2, [pc, #80]	; (8007adc <DMA_CalcBaseAndBitshift+0x64>)
 8007a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8e:	091b      	lsrs	r3, r3, #4
 8007a90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007a92:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <DMA_CalcBaseAndBitshift+0x68>)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d909      	bls.n	8007aba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	1d1a      	adds	r2, r3, #4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8007ab8:	e007      	b.n	8007aca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ac2:	f023 0303 	bic.w	r3, r3, #3
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	aaaaaaab 	.word	0xaaaaaaab
 8007ae0:	0800f704 	.word	0x0800f704

08007ae4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d11f      	bne.n	8007b3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d856      	bhi.n	8007bb2 <DMA_CheckFifoParam+0xce>
 8007b04:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <DMA_CheckFifoParam+0x28>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b1d 	.word	0x08007b1d
 8007b10:	08007b2f 	.word	0x08007b2f
 8007b14:	08007b1d 	.word	0x08007b1d
 8007b18:	08007bb3 	.word	0x08007bb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d046      	beq.n	8007bb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b2c:	e043      	b.n	8007bb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b36:	d140      	bne.n	8007bba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b3c:	e03d      	b.n	8007bba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b46:	d121      	bne.n	8007b8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d837      	bhi.n	8007bbe <DMA_CheckFifoParam+0xda>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <DMA_CheckFifoParam+0x70>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b65 	.word	0x08007b65
 8007b58:	08007b6b 	.word	0x08007b6b
 8007b5c:	08007b65 	.word	0x08007b65
 8007b60:	08007b7d 	.word	0x08007b7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
      break;
 8007b68:	e030      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d025      	beq.n	8007bc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b7a:	e022      	b.n	8007bc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b84:	d11f      	bne.n	8007bc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007b8a:	e01c      	b.n	8007bc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d903      	bls.n	8007b9a <DMA_CheckFifoParam+0xb6>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d003      	beq.n	8007ba0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007b98:	e018      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b9e:	e015      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00e      	beq.n	8007bca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb0:	e00b      	b.n	8007bca <DMA_CheckFifoParam+0xe6>
      break;
 8007bb2:	bf00      	nop
 8007bb4:	e00a      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bb6:	bf00      	nop
 8007bb8:	e008      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bba:	bf00      	nop
 8007bbc:	e006      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bbe:	bf00      	nop
 8007bc0:	e004      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e002      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;   
 8007bc6:	bf00      	nop
 8007bc8:	e000      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bca:	bf00      	nop
    }
  } 
  
  return status; 
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop

08007bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b089      	sub	sp, #36	; 0x24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	61fb      	str	r3, [r7, #28]
 8007bf6:	e165      	b.n	8007ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	f040 8154 	bne.w	8007ebe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d005      	beq.n	8007c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d130      	bne.n	8007c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	2203      	movs	r2, #3
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	4013      	ands	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c64:	2201      	movs	r2, #1
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	4013      	ands	r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	091b      	lsrs	r3, r3, #4
 8007c7a:	f003 0201 	and.w	r2, r3, #1
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d017      	beq.n	8007ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cac:	43db      	mvns	r3, r3
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f003 0303 	and.w	r3, r3, #3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d123      	bne.n	8007d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	08da      	lsrs	r2, r3, #3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3208      	adds	r2, #8
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	220f      	movs	r2, #15
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	08da      	lsrs	r2, r3, #3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3208      	adds	r2, #8
 8007d1a:	69b9      	ldr	r1, [r7, #24]
 8007d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	43db      	mvns	r3, r3
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	4013      	ands	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f003 0203 	and.w	r2, r3, #3
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	fa02 f303 	lsl.w	r3, r2, r3
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 80ae 	beq.w	8007ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d62:	2300      	movs	r3, #0
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	4b5d      	ldr	r3, [pc, #372]	; (8007edc <HAL_GPIO_Init+0x300>)
 8007d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6a:	4a5c      	ldr	r2, [pc, #368]	; (8007edc <HAL_GPIO_Init+0x300>)
 8007d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d70:	6453      	str	r3, [r2, #68]	; 0x44
 8007d72:	4b5a      	ldr	r3, [pc, #360]	; (8007edc <HAL_GPIO_Init+0x300>)
 8007d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d7e:	4a58      	ldr	r2, [pc, #352]	; (8007ee0 <HAL_GPIO_Init+0x304>)
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	089b      	lsrs	r3, r3, #2
 8007d84:	3302      	adds	r3, #2
 8007d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	220f      	movs	r2, #15
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	43db      	mvns	r3, r3
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a4f      	ldr	r2, [pc, #316]	; (8007ee4 <HAL_GPIO_Init+0x308>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d025      	beq.n	8007df6 <HAL_GPIO_Init+0x21a>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a4e      	ldr	r2, [pc, #312]	; (8007ee8 <HAL_GPIO_Init+0x30c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d01f      	beq.n	8007df2 <HAL_GPIO_Init+0x216>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a4d      	ldr	r2, [pc, #308]	; (8007eec <HAL_GPIO_Init+0x310>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d019      	beq.n	8007dee <HAL_GPIO_Init+0x212>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a4c      	ldr	r2, [pc, #304]	; (8007ef0 <HAL_GPIO_Init+0x314>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_GPIO_Init+0x20e>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a4b      	ldr	r2, [pc, #300]	; (8007ef4 <HAL_GPIO_Init+0x318>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00d      	beq.n	8007de6 <HAL_GPIO_Init+0x20a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a4a      	ldr	r2, [pc, #296]	; (8007ef8 <HAL_GPIO_Init+0x31c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d007      	beq.n	8007de2 <HAL_GPIO_Init+0x206>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a49      	ldr	r2, [pc, #292]	; (8007efc <HAL_GPIO_Init+0x320>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d101      	bne.n	8007dde <HAL_GPIO_Init+0x202>
 8007dda:	2306      	movs	r3, #6
 8007ddc:	e00c      	b.n	8007df8 <HAL_GPIO_Init+0x21c>
 8007dde:	2307      	movs	r3, #7
 8007de0:	e00a      	b.n	8007df8 <HAL_GPIO_Init+0x21c>
 8007de2:	2305      	movs	r3, #5
 8007de4:	e008      	b.n	8007df8 <HAL_GPIO_Init+0x21c>
 8007de6:	2304      	movs	r3, #4
 8007de8:	e006      	b.n	8007df8 <HAL_GPIO_Init+0x21c>
 8007dea:	2303      	movs	r3, #3
 8007dec:	e004      	b.n	8007df8 <HAL_GPIO_Init+0x21c>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e002      	b.n	8007df8 <HAL_GPIO_Init+0x21c>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <HAL_GPIO_Init+0x21c>
 8007df6:	2300      	movs	r3, #0
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	f002 0203 	and.w	r2, r2, #3
 8007dfe:	0092      	lsls	r2, r2, #2
 8007e00:	4093      	lsls	r3, r2
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e08:	4935      	ldr	r1, [pc, #212]	; (8007ee0 <HAL_GPIO_Init+0x304>)
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	089b      	lsrs	r3, r3, #2
 8007e0e:	3302      	adds	r3, #2
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e16:	4b3a      	ldr	r3, [pc, #232]	; (8007f00 <HAL_GPIO_Init+0x324>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	4013      	ands	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e3a:	4a31      	ldr	r2, [pc, #196]	; (8007f00 <HAL_GPIO_Init+0x324>)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e40:	4b2f      	ldr	r3, [pc, #188]	; (8007f00 <HAL_GPIO_Init+0x324>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	43db      	mvns	r3, r3
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007e64:	4a26      	ldr	r2, [pc, #152]	; (8007f00 <HAL_GPIO_Init+0x324>)
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007e6a:	4b25      	ldr	r3, [pc, #148]	; (8007f00 <HAL_GPIO_Init+0x324>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	43db      	mvns	r3, r3
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	4013      	ands	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	; (8007f00 <HAL_GPIO_Init+0x324>)
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e94:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <HAL_GPIO_Init+0x324>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007eb8:	4a11      	ldr	r2, [pc, #68]	; (8007f00 <HAL_GPIO_Init+0x324>)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	f67f ae96 	bls.w	8007bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	3724      	adds	r7, #36	; 0x24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40023800 	.word	0x40023800
 8007ee0:	40013800 	.word	0x40013800
 8007ee4:	40020000 	.word	0x40020000
 8007ee8:	40020400 	.word	0x40020400
 8007eec:	40020800 	.word	0x40020800
 8007ef0:	40020c00 	.word	0x40020c00
 8007ef4:	40021000 	.word	0x40021000
 8007ef8:	40021400 	.word	0x40021400
 8007efc:	40021800 	.word	0x40021800
 8007f00:	40013c00 	.word	0x40013c00

08007f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	887b      	ldrh	r3, [r7, #2]
 8007f16:	4013      	ands	r3, r2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	73fb      	strb	r3, [r7, #15]
 8007f20:	e001      	b.n	8007f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	807b      	strh	r3, [r7, #2]
 8007f40:	4613      	mov	r3, r2
 8007f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f44:	787b      	ldrb	r3, [r7, #1]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f4a:	887a      	ldrh	r2, [r7, #2]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007f50:	e003      	b.n	8007f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007f52:	887b      	ldrh	r3, [r7, #2]
 8007f54:	041a      	lsls	r2, r3, #16
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	619a      	str	r2, [r3, #24]
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007f72:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f74:	695a      	ldr	r2, [r3, #20]
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d006      	beq.n	8007f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f7e:	4a05      	ldr	r2, [pc, #20]	; (8007f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f80:	88fb      	ldrh	r3, [r7, #6]
 8007f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fd fb32 	bl	80055f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40013c00 	.word	0x40013c00

08007f98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4b20      	ldr	r3, [pc, #128]	; (8008028 <HAL_PWREx_EnableOverDrive+0x90>)
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	4a1f      	ldr	r2, [pc, #124]	; (8008028 <HAL_PWREx_EnableOverDrive+0x90>)
 8007fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fb2:	4b1d      	ldr	r3, [pc, #116]	; (8008028 <HAL_PWREx_EnableOverDrive+0x90>)
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007fbe:	4b1b      	ldr	r3, [pc, #108]	; (800802c <HAL_PWREx_EnableOverDrive+0x94>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fc4:	f7fe fc18 	bl	80067f8 <HAL_GetTick>
 8007fc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007fca:	e009      	b.n	8007fe0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007fcc:	f7fe fc14 	bl	80067f8 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fda:	d901      	bls.n	8007fe0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e01f      	b.n	8008020 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007fe0:	4b13      	ldr	r3, [pc, #76]	; (8008030 <HAL_PWREx_EnableOverDrive+0x98>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fec:	d1ee      	bne.n	8007fcc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007fee:	4b11      	ldr	r3, [pc, #68]	; (8008034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ff4:	f7fe fc00 	bl	80067f8 <HAL_GetTick>
 8007ff8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ffa:	e009      	b.n	8008010 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ffc:	f7fe fbfc 	bl	80067f8 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800800a:	d901      	bls.n	8008010 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e007      	b.n	8008020 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <HAL_PWREx_EnableOverDrive+0x98>)
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800801c:	d1ee      	bne.n	8007ffc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	40023800 	.word	0x40023800
 800802c:	420e0040 	.word	0x420e0040
 8008030:	40007000 	.word	0x40007000
 8008034:	420e0044 	.word	0x420e0044

08008038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e0cc      	b.n	80081e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800804c:	4b68      	ldr	r3, [pc, #416]	; (80081f0 <HAL_RCC_ClockConfig+0x1b8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d90c      	bls.n	8008074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800805a:	4b65      	ldr	r3, [pc, #404]	; (80081f0 <HAL_RCC_ClockConfig+0x1b8>)
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008062:	4b63      	ldr	r3, [pc, #396]	; (80081f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 030f 	and.w	r3, r3, #15
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d001      	beq.n	8008074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e0b8      	b.n	80081e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d020      	beq.n	80080c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800808c:	4b59      	ldr	r3, [pc, #356]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	4a58      	ldr	r2, [pc, #352]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0308 	and.w	r3, r3, #8
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d005      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080a4:	4b53      	ldr	r3, [pc, #332]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	4a52      	ldr	r2, [pc, #328]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 80080aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080b0:	4b50      	ldr	r3, [pc, #320]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	494d      	ldr	r1, [pc, #308]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d044      	beq.n	8008158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d107      	bne.n	80080e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080d6:	4b47      	ldr	r3, [pc, #284]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d119      	bne.n	8008116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e07f      	b.n	80081e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d003      	beq.n	80080f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d107      	bne.n	8008106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080f6:	4b3f      	ldr	r3, [pc, #252]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d109      	bne.n	8008116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e06f      	b.n	80081e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008106:	4b3b      	ldr	r3, [pc, #236]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e067      	b.n	80081e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008116:	4b37      	ldr	r3, [pc, #220]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f023 0203 	bic.w	r2, r3, #3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	4934      	ldr	r1, [pc, #208]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008124:	4313      	orrs	r3, r2
 8008126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008128:	f7fe fb66 	bl	80067f8 <HAL_GetTick>
 800812c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800812e:	e00a      	b.n	8008146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008130:	f7fe fb62 	bl	80067f8 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	f241 3288 	movw	r2, #5000	; 0x1388
 800813e:	4293      	cmp	r3, r2
 8008140:	d901      	bls.n	8008146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e04f      	b.n	80081e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008146:	4b2b      	ldr	r3, [pc, #172]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f003 020c 	and.w	r2, r3, #12
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	429a      	cmp	r2, r3
 8008156:	d1eb      	bne.n	8008130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008158:	4b25      	ldr	r3, [pc, #148]	; (80081f0 <HAL_RCC_ClockConfig+0x1b8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 030f 	and.w	r3, r3, #15
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d20c      	bcs.n	8008180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008166:	4b22      	ldr	r3, [pc, #136]	; (80081f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800816e:	4b20      	ldr	r3, [pc, #128]	; (80081f0 <HAL_RCC_ClockConfig+0x1b8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d001      	beq.n	8008180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e032      	b.n	80081e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	d008      	beq.n	800819e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800818c:	4b19      	ldr	r3, [pc, #100]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	4916      	ldr	r1, [pc, #88]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 800819a:	4313      	orrs	r3, r2
 800819c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d009      	beq.n	80081be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081aa:	4b12      	ldr	r3, [pc, #72]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	490e      	ldr	r1, [pc, #56]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081be:	f000 f855 	bl	800826c <HAL_RCC_GetSysClockFreq>
 80081c2:	4602      	mov	r2, r0
 80081c4:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <HAL_RCC_ClockConfig+0x1bc>)
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	091b      	lsrs	r3, r3, #4
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	490a      	ldr	r1, [pc, #40]	; (80081f8 <HAL_RCC_ClockConfig+0x1c0>)
 80081d0:	5ccb      	ldrb	r3, [r1, r3]
 80081d2:	fa22 f303 	lsr.w	r3, r2, r3
 80081d6:	4a09      	ldr	r2, [pc, #36]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80081d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <HAL_RCC_ClockConfig+0x1c8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe fac6 	bl	8006770 <HAL_InitTick>

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40023c00 	.word	0x40023c00
 80081f4:	40023800 	.word	0x40023800
 80081f8:	0800f6ec 	.word	0x0800f6ec
 80081fc:	200000e0 	.word	0x200000e0
 8008200:	200000e4 	.word	0x200000e4

08008204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008208:	4b03      	ldr	r3, [pc, #12]	; (8008218 <HAL_RCC_GetHCLKFreq+0x14>)
 800820a:	681b      	ldr	r3, [r3, #0]
}
 800820c:	4618      	mov	r0, r3
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	200000e0 	.word	0x200000e0

0800821c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008220:	f7ff fff0 	bl	8008204 <HAL_RCC_GetHCLKFreq>
 8008224:	4602      	mov	r2, r0
 8008226:	4b05      	ldr	r3, [pc, #20]	; (800823c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	0a9b      	lsrs	r3, r3, #10
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	4903      	ldr	r1, [pc, #12]	; (8008240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008232:	5ccb      	ldrb	r3, [r1, r3]
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008238:	4618      	mov	r0, r3
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40023800 	.word	0x40023800
 8008240:	0800f6fc 	.word	0x0800f6fc

08008244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008248:	f7ff ffdc 	bl	8008204 <HAL_RCC_GetHCLKFreq>
 800824c:	4602      	mov	r2, r0
 800824e:	4b05      	ldr	r3, [pc, #20]	; (8008264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	0b5b      	lsrs	r3, r3, #13
 8008254:	f003 0307 	and.w	r3, r3, #7
 8008258:	4903      	ldr	r1, [pc, #12]	; (8008268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800825a:	5ccb      	ldrb	r3, [r1, r3]
 800825c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008260:	4618      	mov	r0, r3
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40023800 	.word	0x40023800
 8008268:	0800f6fc 	.word	0x0800f6fc

0800826c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800826c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008270:	b0ae      	sub	sp, #184	; 0xb8
 8008272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008292:	4bcb      	ldr	r3, [pc, #812]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 030c 	and.w	r3, r3, #12
 800829a:	2b0c      	cmp	r3, #12
 800829c:	f200 8206 	bhi.w	80086ac <HAL_RCC_GetSysClockFreq+0x440>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082dd 	.word	0x080082dd
 80082ac:	080086ad 	.word	0x080086ad
 80082b0:	080086ad 	.word	0x080086ad
 80082b4:	080086ad 	.word	0x080086ad
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	080086ad 	.word	0x080086ad
 80082c0:	080086ad 	.word	0x080086ad
 80082c4:	080086ad 	.word	0x080086ad
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	080086ad 	.word	0x080086ad
 80082d0:	080086ad 	.word	0x080086ad
 80082d4:	080086ad 	.word	0x080086ad
 80082d8:	080084dd 	.word	0x080084dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082dc:	4bb9      	ldr	r3, [pc, #740]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80082de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80082e2:	e1e7      	b.n	80086b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082e4:	4bb8      	ldr	r3, [pc, #736]	; (80085c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80082e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80082ea:	e1e3      	b.n	80086b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082ec:	4bb4      	ldr	r3, [pc, #720]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082f8:	4bb1      	ldr	r3, [pc, #708]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d071      	beq.n	80083e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008304:	4bae      	ldr	r3, [pc, #696]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	099b      	lsrs	r3, r3, #6
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008310:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008320:	2300      	movs	r3, #0
 8008322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800832a:	4622      	mov	r2, r4
 800832c:	462b      	mov	r3, r5
 800832e:	f04f 0000 	mov.w	r0, #0
 8008332:	f04f 0100 	mov.w	r1, #0
 8008336:	0159      	lsls	r1, r3, #5
 8008338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800833c:	0150      	lsls	r0, r2, #5
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4621      	mov	r1, r4
 8008344:	1a51      	subs	r1, r2, r1
 8008346:	6439      	str	r1, [r7, #64]	; 0x40
 8008348:	4629      	mov	r1, r5
 800834a:	eb63 0301 	sbc.w	r3, r3, r1
 800834e:	647b      	str	r3, [r7, #68]	; 0x44
 8008350:	f04f 0200 	mov.w	r2, #0
 8008354:	f04f 0300 	mov.w	r3, #0
 8008358:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800835c:	4649      	mov	r1, r9
 800835e:	018b      	lsls	r3, r1, #6
 8008360:	4641      	mov	r1, r8
 8008362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008366:	4641      	mov	r1, r8
 8008368:	018a      	lsls	r2, r1, #6
 800836a:	4641      	mov	r1, r8
 800836c:	1a51      	subs	r1, r2, r1
 800836e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008370:	4649      	mov	r1, r9
 8008372:	eb63 0301 	sbc.w	r3, r3, r1
 8008376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008378:	f04f 0200 	mov.w	r2, #0
 800837c:	f04f 0300 	mov.w	r3, #0
 8008380:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008384:	4649      	mov	r1, r9
 8008386:	00cb      	lsls	r3, r1, #3
 8008388:	4641      	mov	r1, r8
 800838a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800838e:	4641      	mov	r1, r8
 8008390:	00ca      	lsls	r2, r1, #3
 8008392:	4610      	mov	r0, r2
 8008394:	4619      	mov	r1, r3
 8008396:	4603      	mov	r3, r0
 8008398:	4622      	mov	r2, r4
 800839a:	189b      	adds	r3, r3, r2
 800839c:	633b      	str	r3, [r7, #48]	; 0x30
 800839e:	462b      	mov	r3, r5
 80083a0:	460a      	mov	r2, r1
 80083a2:	eb42 0303 	adc.w	r3, r2, r3
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80083b4:	4629      	mov	r1, r5
 80083b6:	024b      	lsls	r3, r1, #9
 80083b8:	4621      	mov	r1, r4
 80083ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80083be:	4621      	mov	r1, r4
 80083c0:	024a      	lsls	r2, r1, #9
 80083c2:	4610      	mov	r0, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ca:	2200      	movs	r2, #0
 80083cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80083d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80083d8:	f7f8 fc76 	bl	8000cc8 <__aeabi_uldivmod>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4613      	mov	r3, r2
 80083e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083e6:	e067      	b.n	80084b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083e8:	4b75      	ldr	r3, [pc, #468]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	099b      	lsrs	r3, r3, #6
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80083f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008400:	67bb      	str	r3, [r7, #120]	; 0x78
 8008402:	2300      	movs	r3, #0
 8008404:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008406:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800840a:	4622      	mov	r2, r4
 800840c:	462b      	mov	r3, r5
 800840e:	f04f 0000 	mov.w	r0, #0
 8008412:	f04f 0100 	mov.w	r1, #0
 8008416:	0159      	lsls	r1, r3, #5
 8008418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800841c:	0150      	lsls	r0, r2, #5
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4621      	mov	r1, r4
 8008424:	1a51      	subs	r1, r2, r1
 8008426:	62b9      	str	r1, [r7, #40]	; 0x28
 8008428:	4629      	mov	r1, r5
 800842a:	eb63 0301 	sbc.w	r3, r3, r1
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800843c:	4649      	mov	r1, r9
 800843e:	018b      	lsls	r3, r1, #6
 8008440:	4641      	mov	r1, r8
 8008442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008446:	4641      	mov	r1, r8
 8008448:	018a      	lsls	r2, r1, #6
 800844a:	4641      	mov	r1, r8
 800844c:	ebb2 0a01 	subs.w	sl, r2, r1
 8008450:	4649      	mov	r1, r9
 8008452:	eb63 0b01 	sbc.w	fp, r3, r1
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	f04f 0300 	mov.w	r3, #0
 800845e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008462:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008466:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800846a:	4692      	mov	sl, r2
 800846c:	469b      	mov	fp, r3
 800846e:	4623      	mov	r3, r4
 8008470:	eb1a 0303 	adds.w	r3, sl, r3
 8008474:	623b      	str	r3, [r7, #32]
 8008476:	462b      	mov	r3, r5
 8008478:	eb4b 0303 	adc.w	r3, fp, r3
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800848a:	4629      	mov	r1, r5
 800848c:	028b      	lsls	r3, r1, #10
 800848e:	4621      	mov	r1, r4
 8008490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008494:	4621      	mov	r1, r4
 8008496:	028a      	lsls	r2, r1, #10
 8008498:	4610      	mov	r0, r2
 800849a:	4619      	mov	r1, r3
 800849c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084a0:	2200      	movs	r2, #0
 80084a2:	673b      	str	r3, [r7, #112]	; 0x70
 80084a4:	677a      	str	r2, [r7, #116]	; 0x74
 80084a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80084aa:	f7f8 fc0d 	bl	8000cc8 <__aeabi_uldivmod>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	4613      	mov	r3, r2
 80084b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80084b8:	4b41      	ldr	r3, [pc, #260]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	0c1b      	lsrs	r3, r3, #16
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	3301      	adds	r3, #1
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80084ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80084da:	e0eb      	b.n	80086b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084dc:	4b38      	ldr	r3, [pc, #224]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084e8:	4b35      	ldr	r3, [pc, #212]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d06b      	beq.n	80085cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084f4:	4b32      	ldr	r3, [pc, #200]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	099b      	lsrs	r3, r3, #6
 80084fa:	2200      	movs	r2, #0
 80084fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80084fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008506:	663b      	str	r3, [r7, #96]	; 0x60
 8008508:	2300      	movs	r3, #0
 800850a:	667b      	str	r3, [r7, #100]	; 0x64
 800850c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008510:	4622      	mov	r2, r4
 8008512:	462b      	mov	r3, r5
 8008514:	f04f 0000 	mov.w	r0, #0
 8008518:	f04f 0100 	mov.w	r1, #0
 800851c:	0159      	lsls	r1, r3, #5
 800851e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008522:	0150      	lsls	r0, r2, #5
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4621      	mov	r1, r4
 800852a:	1a51      	subs	r1, r2, r1
 800852c:	61b9      	str	r1, [r7, #24]
 800852e:	4629      	mov	r1, r5
 8008530:	eb63 0301 	sbc.w	r3, r3, r1
 8008534:	61fb      	str	r3, [r7, #28]
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008542:	4659      	mov	r1, fp
 8008544:	018b      	lsls	r3, r1, #6
 8008546:	4651      	mov	r1, sl
 8008548:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800854c:	4651      	mov	r1, sl
 800854e:	018a      	lsls	r2, r1, #6
 8008550:	4651      	mov	r1, sl
 8008552:	ebb2 0801 	subs.w	r8, r2, r1
 8008556:	4659      	mov	r1, fp
 8008558:	eb63 0901 	sbc.w	r9, r3, r1
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008568:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800856c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008570:	4690      	mov	r8, r2
 8008572:	4699      	mov	r9, r3
 8008574:	4623      	mov	r3, r4
 8008576:	eb18 0303 	adds.w	r3, r8, r3
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	462b      	mov	r3, r5
 800857e:	eb49 0303 	adc.w	r3, r9, r3
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	f04f 0200 	mov.w	r2, #0
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008590:	4629      	mov	r1, r5
 8008592:	024b      	lsls	r3, r1, #9
 8008594:	4621      	mov	r1, r4
 8008596:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800859a:	4621      	mov	r1, r4
 800859c:	024a      	lsls	r2, r1, #9
 800859e:	4610      	mov	r0, r2
 80085a0:	4619      	mov	r1, r3
 80085a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085a6:	2200      	movs	r2, #0
 80085a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80085ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085b0:	f7f8 fb8a 	bl	8000cc8 <__aeabi_uldivmod>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4613      	mov	r3, r2
 80085ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085be:	e065      	b.n	800868c <HAL_RCC_GetSysClockFreq+0x420>
 80085c0:	40023800 	.word	0x40023800
 80085c4:	00f42400 	.word	0x00f42400
 80085c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085cc:	4b3d      	ldr	r3, [pc, #244]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	099b      	lsrs	r3, r3, #6
 80085d2:	2200      	movs	r2, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	4611      	mov	r1, r2
 80085d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80085dc:	653b      	str	r3, [r7, #80]	; 0x50
 80085de:	2300      	movs	r3, #0
 80085e0:	657b      	str	r3, [r7, #84]	; 0x54
 80085e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80085e6:	4642      	mov	r2, r8
 80085e8:	464b      	mov	r3, r9
 80085ea:	f04f 0000 	mov.w	r0, #0
 80085ee:	f04f 0100 	mov.w	r1, #0
 80085f2:	0159      	lsls	r1, r3, #5
 80085f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085f8:	0150      	lsls	r0, r2, #5
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4641      	mov	r1, r8
 8008600:	1a51      	subs	r1, r2, r1
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	4649      	mov	r1, r9
 8008606:	eb63 0301 	sbc.w	r3, r3, r1
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008618:	4659      	mov	r1, fp
 800861a:	018b      	lsls	r3, r1, #6
 800861c:	4651      	mov	r1, sl
 800861e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008622:	4651      	mov	r1, sl
 8008624:	018a      	lsls	r2, r1, #6
 8008626:	4651      	mov	r1, sl
 8008628:	1a54      	subs	r4, r2, r1
 800862a:	4659      	mov	r1, fp
 800862c:	eb63 0501 	sbc.w	r5, r3, r1
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	00eb      	lsls	r3, r5, #3
 800863a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800863e:	00e2      	lsls	r2, r4, #3
 8008640:	4614      	mov	r4, r2
 8008642:	461d      	mov	r5, r3
 8008644:	4643      	mov	r3, r8
 8008646:	18e3      	adds	r3, r4, r3
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	464b      	mov	r3, r9
 800864c:	eb45 0303 	adc.w	r3, r5, r3
 8008650:	607b      	str	r3, [r7, #4]
 8008652:	f04f 0200 	mov.w	r2, #0
 8008656:	f04f 0300 	mov.w	r3, #0
 800865a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800865e:	4629      	mov	r1, r5
 8008660:	028b      	lsls	r3, r1, #10
 8008662:	4621      	mov	r1, r4
 8008664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008668:	4621      	mov	r1, r4
 800866a:	028a      	lsls	r2, r1, #10
 800866c:	4610      	mov	r0, r2
 800866e:	4619      	mov	r1, r3
 8008670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008674:	2200      	movs	r2, #0
 8008676:	64bb      	str	r3, [r7, #72]	; 0x48
 8008678:	64fa      	str	r2, [r7, #76]	; 0x4c
 800867a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800867e:	f7f8 fb23 	bl	8000cc8 <__aeabi_uldivmod>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4613      	mov	r3, r2
 8008688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800868c:	4b0d      	ldr	r3, [pc, #52]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	0f1b      	lsrs	r3, r3, #28
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800869a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800869e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80086aa:	e003      	b.n	80086b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086ac:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80086ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80086b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	37b8      	adds	r7, #184	; 0xb8
 80086bc:	46bd      	mov	sp, r7
 80086be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086c2:	bf00      	nop
 80086c4:	40023800 	.word	0x40023800
 80086c8:	00f42400 	.word	0x00f42400

080086cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e28d      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 8083 	beq.w	80087f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80086ec:	4b94      	ldr	r3, [pc, #592]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f003 030c 	and.w	r3, r3, #12
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d019      	beq.n	800872c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80086f8:	4b91      	ldr	r3, [pc, #580]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008700:	2b08      	cmp	r3, #8
 8008702:	d106      	bne.n	8008712 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008704:	4b8e      	ldr	r3, [pc, #568]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800870c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008710:	d00c      	beq.n	800872c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008712:	4b8b      	ldr	r3, [pc, #556]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800871a:	2b0c      	cmp	r3, #12
 800871c:	d112      	bne.n	8008744 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800871e:	4b88      	ldr	r3, [pc, #544]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800872a:	d10b      	bne.n	8008744 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800872c:	4b84      	ldr	r3, [pc, #528]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d05b      	beq.n	80087f0 <HAL_RCC_OscConfig+0x124>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d157      	bne.n	80087f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e25a      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874c:	d106      	bne.n	800875c <HAL_RCC_OscConfig+0x90>
 800874e:	4b7c      	ldr	r3, [pc, #496]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a7b      	ldr	r2, [pc, #492]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	e01d      	b.n	8008798 <HAL_RCC_OscConfig+0xcc>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008764:	d10c      	bne.n	8008780 <HAL_RCC_OscConfig+0xb4>
 8008766:	4b76      	ldr	r3, [pc, #472]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a75      	ldr	r2, [pc, #468]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 800876c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008770:	6013      	str	r3, [r2, #0]
 8008772:	4b73      	ldr	r3, [pc, #460]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a72      	ldr	r2, [pc, #456]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	e00b      	b.n	8008798 <HAL_RCC_OscConfig+0xcc>
 8008780:	4b6f      	ldr	r3, [pc, #444]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a6e      	ldr	r2, [pc, #440]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	4b6c      	ldr	r3, [pc, #432]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a6b      	ldr	r2, [pc, #428]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d013      	beq.n	80087c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a0:	f7fe f82a 	bl	80067f8 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087a8:	f7fe f826 	bl	80067f8 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b64      	cmp	r3, #100	; 0x64
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e21f      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ba:	4b61      	ldr	r3, [pc, #388]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0f0      	beq.n	80087a8 <HAL_RCC_OscConfig+0xdc>
 80087c6:	e014      	b.n	80087f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c8:	f7fe f816 	bl	80067f8 <HAL_GetTick>
 80087cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ce:	e008      	b.n	80087e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087d0:	f7fe f812 	bl	80067f8 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b64      	cmp	r3, #100	; 0x64
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e20b      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087e2:	4b57      	ldr	r3, [pc, #348]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f0      	bne.n	80087d0 <HAL_RCC_OscConfig+0x104>
 80087ee:	e000      	b.n	80087f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d06f      	beq.n	80088de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80087fe:	4b50      	ldr	r3, [pc, #320]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f003 030c 	and.w	r3, r3, #12
 8008806:	2b00      	cmp	r3, #0
 8008808:	d017      	beq.n	800883a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800880a:	4b4d      	ldr	r3, [pc, #308]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008812:	2b08      	cmp	r3, #8
 8008814:	d105      	bne.n	8008822 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008816:	4b4a      	ldr	r3, [pc, #296]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008822:	4b47      	ldr	r3, [pc, #284]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800882a:	2b0c      	cmp	r3, #12
 800882c:	d11c      	bne.n	8008868 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800882e:	4b44      	ldr	r3, [pc, #272]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d116      	bne.n	8008868 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800883a:	4b41      	ldr	r3, [pc, #260]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d005      	beq.n	8008852 <HAL_RCC_OscConfig+0x186>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d001      	beq.n	8008852 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e1d3      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008852:	4b3b      	ldr	r3, [pc, #236]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	4937      	ldr	r1, [pc, #220]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008862:	4313      	orrs	r3, r2
 8008864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008866:	e03a      	b.n	80088de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d020      	beq.n	80088b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008870:	4b34      	ldr	r3, [pc, #208]	; (8008944 <HAL_RCC_OscConfig+0x278>)
 8008872:	2201      	movs	r2, #1
 8008874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008876:	f7fd ffbf 	bl	80067f8 <HAL_GetTick>
 800887a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800887c:	e008      	b.n	8008890 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800887e:	f7fd ffbb 	bl	80067f8 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d901      	bls.n	8008890 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e1b4      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008890:	4b2b      	ldr	r3, [pc, #172]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0f0      	beq.n	800887e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800889c:	4b28      	ldr	r3, [pc, #160]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	4925      	ldr	r1, [pc, #148]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	600b      	str	r3, [r1, #0]
 80088b0:	e015      	b.n	80088de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088b2:	4b24      	ldr	r3, [pc, #144]	; (8008944 <HAL_RCC_OscConfig+0x278>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b8:	f7fd ff9e 	bl	80067f8 <HAL_GetTick>
 80088bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088c0:	f7fd ff9a 	bl	80067f8 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e193      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088d2:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f0      	bne.n	80088c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0308 	and.w	r3, r3, #8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d036      	beq.n	8008958 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d016      	beq.n	8008920 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <HAL_RCC_OscConfig+0x27c>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f8:	f7fd ff7e 	bl	80067f8 <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008900:	f7fd ff7a 	bl	80067f8 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e173      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008912:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <HAL_RCC_OscConfig+0x274>)
 8008914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0f0      	beq.n	8008900 <HAL_RCC_OscConfig+0x234>
 800891e:	e01b      	b.n	8008958 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008920:	4b09      	ldr	r3, [pc, #36]	; (8008948 <HAL_RCC_OscConfig+0x27c>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008926:	f7fd ff67 	bl	80067f8 <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800892c:	e00e      	b.n	800894c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800892e:	f7fd ff63 	bl	80067f8 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d907      	bls.n	800894c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e15c      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
 8008940:	40023800 	.word	0x40023800
 8008944:	42470000 	.word	0x42470000
 8008948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800894c:	4b8a      	ldr	r3, [pc, #552]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 800894e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1ea      	bne.n	800892e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 8097 	beq.w	8008a94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800896a:	4b83      	ldr	r3, [pc, #524]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10f      	bne.n	8008996 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008976:	2300      	movs	r3, #0
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	4b7f      	ldr	r3, [pc, #508]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 800897c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897e:	4a7e      	ldr	r2, [pc, #504]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008984:	6413      	str	r3, [r2, #64]	; 0x40
 8008986:	4b7c      	ldr	r3, [pc, #496]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898e:	60bb      	str	r3, [r7, #8]
 8008990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008992:	2301      	movs	r3, #1
 8008994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008996:	4b79      	ldr	r3, [pc, #484]	; (8008b7c <HAL_RCC_OscConfig+0x4b0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d118      	bne.n	80089d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089a2:	4b76      	ldr	r3, [pc, #472]	; (8008b7c <HAL_RCC_OscConfig+0x4b0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a75      	ldr	r2, [pc, #468]	; (8008b7c <HAL_RCC_OscConfig+0x4b0>)
 80089a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ae:	f7fd ff23 	bl	80067f8 <HAL_GetTick>
 80089b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089b4:	e008      	b.n	80089c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089b6:	f7fd ff1f 	bl	80067f8 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e118      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c8:	4b6c      	ldr	r3, [pc, #432]	; (8008b7c <HAL_RCC_OscConfig+0x4b0>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0f0      	beq.n	80089b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d106      	bne.n	80089ea <HAL_RCC_OscConfig+0x31e>
 80089dc:	4b66      	ldr	r3, [pc, #408]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 80089de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e0:	4a65      	ldr	r2, [pc, #404]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 80089e2:	f043 0301 	orr.w	r3, r3, #1
 80089e6:	6713      	str	r3, [r2, #112]	; 0x70
 80089e8:	e01c      	b.n	8008a24 <HAL_RCC_OscConfig+0x358>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	d10c      	bne.n	8008a0c <HAL_RCC_OscConfig+0x340>
 80089f2:	4b61      	ldr	r3, [pc, #388]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 80089f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f6:	4a60      	ldr	r2, [pc, #384]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 80089f8:	f043 0304 	orr.w	r3, r3, #4
 80089fc:	6713      	str	r3, [r2, #112]	; 0x70
 80089fe:	4b5e      	ldr	r3, [pc, #376]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a02:	4a5d      	ldr	r2, [pc, #372]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a04:	f043 0301 	orr.w	r3, r3, #1
 8008a08:	6713      	str	r3, [r2, #112]	; 0x70
 8008a0a:	e00b      	b.n	8008a24 <HAL_RCC_OscConfig+0x358>
 8008a0c:	4b5a      	ldr	r3, [pc, #360]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a10:	4a59      	ldr	r2, [pc, #356]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a12:	f023 0301 	bic.w	r3, r3, #1
 8008a16:	6713      	str	r3, [r2, #112]	; 0x70
 8008a18:	4b57      	ldr	r3, [pc, #348]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1c:	4a56      	ldr	r2, [pc, #344]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a1e:	f023 0304 	bic.w	r3, r3, #4
 8008a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d015      	beq.n	8008a58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a2c:	f7fd fee4 	bl	80067f8 <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a32:	e00a      	b.n	8008a4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a34:	f7fd fee0 	bl	80067f8 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d901      	bls.n	8008a4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e0d7      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a4a:	4b4b      	ldr	r3, [pc, #300]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0ee      	beq.n	8008a34 <HAL_RCC_OscConfig+0x368>
 8008a56:	e014      	b.n	8008a82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a58:	f7fd fece 	bl	80067f8 <HAL_GetTick>
 8008a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a5e:	e00a      	b.n	8008a76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a60:	f7fd feca 	bl	80067f8 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e0c1      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a76:	4b40      	ldr	r3, [pc, #256]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1ee      	bne.n	8008a60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d105      	bne.n	8008a94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a88:	4b3b      	ldr	r3, [pc, #236]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	4a3a      	ldr	r2, [pc, #232]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 80ad 	beq.w	8008bf8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a9e:	4b36      	ldr	r3, [pc, #216]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 030c 	and.w	r3, r3, #12
 8008aa6:	2b08      	cmp	r3, #8
 8008aa8:	d060      	beq.n	8008b6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d145      	bne.n	8008b3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ab2:	4b33      	ldr	r3, [pc, #204]	; (8008b80 <HAL_RCC_OscConfig+0x4b4>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab8:	f7fd fe9e 	bl	80067f8 <HAL_GetTick>
 8008abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ac0:	f7fd fe9a 	bl	80067f8 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e093      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ad2:	4b29      	ldr	r3, [pc, #164]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f0      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69da      	ldr	r2, [r3, #28]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	019b      	lsls	r3, r3, #6
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	085b      	lsrs	r3, r3, #1
 8008af6:	3b01      	subs	r3, #1
 8008af8:	041b      	lsls	r3, r3, #16
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	061b      	lsls	r3, r3, #24
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b08:	071b      	lsls	r3, r3, #28
 8008b0a:	491b      	ldr	r1, [pc, #108]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b10:	4b1b      	ldr	r3, [pc, #108]	; (8008b80 <HAL_RCC_OscConfig+0x4b4>)
 8008b12:	2201      	movs	r2, #1
 8008b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b16:	f7fd fe6f 	bl	80067f8 <HAL_GetTick>
 8008b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b1c:	e008      	b.n	8008b30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b1e:	f7fd fe6b 	bl	80067f8 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e064      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0f0      	beq.n	8008b1e <HAL_RCC_OscConfig+0x452>
 8008b3c:	e05c      	b.n	8008bf8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b3e:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <HAL_RCC_OscConfig+0x4b4>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b44:	f7fd fe58 	bl	80067f8 <HAL_GetTick>
 8008b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b4c:	f7fd fe54 	bl	80067f8 <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e04d      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <HAL_RCC_OscConfig+0x4ac>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f0      	bne.n	8008b4c <HAL_RCC_OscConfig+0x480>
 8008b6a:	e045      	b.n	8008bf8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d107      	bne.n	8008b84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e040      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
 8008b78:	40023800 	.word	0x40023800
 8008b7c:	40007000 	.word	0x40007000
 8008b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b84:	4b1f      	ldr	r3, [pc, #124]	; (8008c04 <HAL_RCC_OscConfig+0x538>)
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d030      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d129      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d122      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d119      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d10f      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d107      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d001      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e000      	b.n	8008bfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	40023800 	.word	0x40023800

08008c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e041      	b.n	8008c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d106      	bne.n	8008c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7fd fac6 	bl	80061c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3304      	adds	r3, #4
 8008c44:	4619      	mov	r1, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	f000 fe36 	bl	80098b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d001      	beq.n	8008cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e04e      	b.n	8008d5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0201 	orr.w	r2, r2, #1
 8008cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a23      	ldr	r2, [pc, #140]	; (8008d6c <HAL_TIM_Base_Start_IT+0xc4>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d022      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x80>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cea:	d01d      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x80>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1f      	ldr	r2, [pc, #124]	; (8008d70 <HAL_TIM_Base_Start_IT+0xc8>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d018      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x80>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a1e      	ldr	r2, [pc, #120]	; (8008d74 <HAL_TIM_Base_Start_IT+0xcc>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d013      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x80>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a1c      	ldr	r2, [pc, #112]	; (8008d78 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00e      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x80>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a1b      	ldr	r2, [pc, #108]	; (8008d7c <HAL_TIM_Base_Start_IT+0xd4>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d009      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x80>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a19      	ldr	r2, [pc, #100]	; (8008d80 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d004      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x80>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a18      	ldr	r2, [pc, #96]	; (8008d84 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d111      	bne.n	8008d4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b06      	cmp	r3, #6
 8008d38:	d010      	beq.n	8008d5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f042 0201 	orr.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d4a:	e007      	b.n	8008d5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	40010000 	.word	0x40010000
 8008d70:	40000400 	.word	0x40000400
 8008d74:	40000800 	.word	0x40000800
 8008d78:	40000c00 	.word	0x40000c00
 8008d7c:	40010400 	.word	0x40010400
 8008d80:	40014000 	.word	0x40014000
 8008d84:	40001800 	.word	0x40001800

08008d88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0201 	bic.w	r2, r2, #1
 8008d9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6a1a      	ldr	r2, [r3, #32]
 8008da6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008daa:	4013      	ands	r3, r2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10f      	bne.n	8008dd0 <HAL_TIM_Base_Stop_IT+0x48>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6a1a      	ldr	r2, [r3, #32]
 8008db6:	f240 4344 	movw	r3, #1092	; 0x444
 8008dba:	4013      	ands	r3, r2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d107      	bne.n	8008dd0 <HAL_TIM_Base_Stop_IT+0x48>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0201 	bic.w	r2, r2, #1
 8008dce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e041      	b.n	8008e7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f839 	bl	8008e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2202      	movs	r2, #2
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3304      	adds	r3, #4
 8008e22:	4619      	mov	r1, r3
 8008e24:	4610      	mov	r0, r2
 8008e26:	f000 fd47 	bl	80098b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d109      	bne.n	8008ec0 <HAL_TIM_PWM_Start_IT+0x28>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	bf14      	ite	ne
 8008eb8:	2301      	movne	r3, #1
 8008eba:	2300      	moveq	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	e022      	b.n	8008f06 <HAL_TIM_PWM_Start_IT+0x6e>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d109      	bne.n	8008eda <HAL_TIM_PWM_Start_IT+0x42>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	bf14      	ite	ne
 8008ed2:	2301      	movne	r3, #1
 8008ed4:	2300      	moveq	r3, #0
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	e015      	b.n	8008f06 <HAL_TIM_PWM_Start_IT+0x6e>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d109      	bne.n	8008ef4 <HAL_TIM_PWM_Start_IT+0x5c>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	bf14      	ite	ne
 8008eec:	2301      	movne	r3, #1
 8008eee:	2300      	moveq	r3, #0
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	e008      	b.n	8008f06 <HAL_TIM_PWM_Start_IT+0x6e>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	bf14      	ite	ne
 8008f00:	2301      	movne	r3, #1
 8008f02:	2300      	moveq	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e0c7      	b.n	800909e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d104      	bne.n	8008f1e <HAL_TIM_PWM_Start_IT+0x86>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f1c:	e013      	b.n	8008f46 <HAL_TIM_PWM_Start_IT+0xae>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d104      	bne.n	8008f2e <HAL_TIM_PWM_Start_IT+0x96>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f2c:	e00b      	b.n	8008f46 <HAL_TIM_PWM_Start_IT+0xae>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d104      	bne.n	8008f3e <HAL_TIM_PWM_Start_IT+0xa6>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f3c:	e003      	b.n	8008f46 <HAL_TIM_PWM_Start_IT+0xae>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2202      	movs	r2, #2
 8008f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b0c      	cmp	r3, #12
 8008f4a:	d841      	bhi.n	8008fd0 <HAL_TIM_PWM_Start_IT+0x138>
 8008f4c:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <HAL_TIM_PWM_Start_IT+0xbc>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008f89 	.word	0x08008f89
 8008f58:	08008fd1 	.word	0x08008fd1
 8008f5c:	08008fd1 	.word	0x08008fd1
 8008f60:	08008fd1 	.word	0x08008fd1
 8008f64:	08008f9b 	.word	0x08008f9b
 8008f68:	08008fd1 	.word	0x08008fd1
 8008f6c:	08008fd1 	.word	0x08008fd1
 8008f70:	08008fd1 	.word	0x08008fd1
 8008f74:	08008fad 	.word	0x08008fad
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fd1 	.word	0x08008fd1
 8008f80:	08008fd1 	.word	0x08008fd1
 8008f84:	08008fbf 	.word	0x08008fbf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0202 	orr.w	r2, r2, #2
 8008f96:	60da      	str	r2, [r3, #12]
      break;
 8008f98:	e01d      	b.n	8008fd6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f042 0204 	orr.w	r2, r2, #4
 8008fa8:	60da      	str	r2, [r3, #12]
      break;
 8008faa:	e014      	b.n	8008fd6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0208 	orr.w	r2, r2, #8
 8008fba:	60da      	str	r2, [r3, #12]
      break;
 8008fbc:	e00b      	b.n	8008fd6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f042 0210 	orr.w	r2, r2, #16
 8008fcc:	60da      	str	r2, [r3, #12]
      break;
 8008fce:	e002      	b.n	8008fd6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d15f      	bne.n	800909c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 feb7 	bl	8009d58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a2e      	ldr	r2, [pc, #184]	; (80090a8 <HAL_TIM_PWM_Start_IT+0x210>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d004      	beq.n	8008ffe <HAL_TIM_PWM_Start_IT+0x166>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a2c      	ldr	r2, [pc, #176]	; (80090ac <HAL_TIM_PWM_Start_IT+0x214>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d101      	bne.n	8009002 <HAL_TIM_PWM_Start_IT+0x16a>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <HAL_TIM_PWM_Start_IT+0x16c>
 8009002:	2300      	movs	r3, #0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009016:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a22      	ldr	r2, [pc, #136]	; (80090a8 <HAL_TIM_PWM_Start_IT+0x210>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d022      	beq.n	8009068 <HAL_TIM_PWM_Start_IT+0x1d0>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800902a:	d01d      	beq.n	8009068 <HAL_TIM_PWM_Start_IT+0x1d0>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <HAL_TIM_PWM_Start_IT+0x218>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d018      	beq.n	8009068 <HAL_TIM_PWM_Start_IT+0x1d0>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a1e      	ldr	r2, [pc, #120]	; (80090b4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d013      	beq.n	8009068 <HAL_TIM_PWM_Start_IT+0x1d0>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <HAL_TIM_PWM_Start_IT+0x220>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00e      	beq.n	8009068 <HAL_TIM_PWM_Start_IT+0x1d0>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a17      	ldr	r2, [pc, #92]	; (80090ac <HAL_TIM_PWM_Start_IT+0x214>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d009      	beq.n	8009068 <HAL_TIM_PWM_Start_IT+0x1d0>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a18      	ldr	r2, [pc, #96]	; (80090bc <HAL_TIM_PWM_Start_IT+0x224>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d004      	beq.n	8009068 <HAL_TIM_PWM_Start_IT+0x1d0>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a17      	ldr	r2, [pc, #92]	; (80090c0 <HAL_TIM_PWM_Start_IT+0x228>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d111      	bne.n	800908c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b06      	cmp	r3, #6
 8009078:	d010      	beq.n	800909c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f042 0201 	orr.w	r2, r2, #1
 8009088:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908a:	e007      	b.n	800909c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0201 	orr.w	r2, r2, #1
 800909a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800909c:	7bfb      	ldrb	r3, [r7, #15]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	40010000 	.word	0x40010000
 80090ac:	40010400 	.word	0x40010400
 80090b0:	40000400 	.word	0x40000400
 80090b4:	40000800 	.word	0x40000800
 80090b8:	40000c00 	.word	0x40000c00
 80090bc:	40014000 	.word	0x40014000
 80090c0:	40001800 	.word	0x40001800

080090c4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b0c      	cmp	r3, #12
 80090d6:	d841      	bhi.n	800915c <HAL_TIM_PWM_Stop_IT+0x98>
 80090d8:	a201      	add	r2, pc, #4	; (adr r2, 80090e0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80090da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090de:	bf00      	nop
 80090e0:	08009115 	.word	0x08009115
 80090e4:	0800915d 	.word	0x0800915d
 80090e8:	0800915d 	.word	0x0800915d
 80090ec:	0800915d 	.word	0x0800915d
 80090f0:	08009127 	.word	0x08009127
 80090f4:	0800915d 	.word	0x0800915d
 80090f8:	0800915d 	.word	0x0800915d
 80090fc:	0800915d 	.word	0x0800915d
 8009100:	08009139 	.word	0x08009139
 8009104:	0800915d 	.word	0x0800915d
 8009108:	0800915d 	.word	0x0800915d
 800910c:	0800915d 	.word	0x0800915d
 8009110:	0800914b 	.word	0x0800914b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0202 	bic.w	r2, r2, #2
 8009122:	60da      	str	r2, [r3, #12]
      break;
 8009124:	e01d      	b.n	8009162 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68da      	ldr	r2, [r3, #12]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0204 	bic.w	r2, r2, #4
 8009134:	60da      	str	r2, [r3, #12]
      break;
 8009136:	e014      	b.n	8009162 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f022 0208 	bic.w	r2, r2, #8
 8009146:	60da      	str	r2, [r3, #12]
      break;
 8009148:	e00b      	b.n	8009162 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0210 	bic.w	r2, r2, #16
 8009158:	60da      	str	r2, [r3, #12]
      break;
 800915a:	e002      	b.n	8009162 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
      break;
 8009160:	bf00      	nop
  }

  if (status == HAL_OK)
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d161      	bne.n	800922c <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2200      	movs	r2, #0
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fdf1 	bl	8009d58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a2f      	ldr	r2, [pc, #188]	; (8009238 <HAL_TIM_PWM_Stop_IT+0x174>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d004      	beq.n	800918a <HAL_TIM_PWM_Stop_IT+0xc6>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a2d      	ldr	r2, [pc, #180]	; (800923c <HAL_TIM_PWM_Stop_IT+0x178>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d101      	bne.n	800918e <HAL_TIM_PWM_Stop_IT+0xca>
 800918a:	2301      	movs	r3, #1
 800918c:	e000      	b.n	8009190 <HAL_TIM_PWM_Stop_IT+0xcc>
 800918e:	2300      	movs	r3, #0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d017      	beq.n	80091c4 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6a1a      	ldr	r2, [r3, #32]
 800919a:	f241 1311 	movw	r3, #4369	; 0x1111
 800919e:	4013      	ands	r3, r2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10f      	bne.n	80091c4 <HAL_TIM_PWM_Stop_IT+0x100>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6a1a      	ldr	r2, [r3, #32]
 80091aa:	f240 4344 	movw	r3, #1092	; 0x444
 80091ae:	4013      	ands	r3, r2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d107      	bne.n	80091c4 <HAL_TIM_PWM_Stop_IT+0x100>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6a1a      	ldr	r2, [r3, #32]
 80091ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80091ce:	4013      	ands	r3, r2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10f      	bne.n	80091f4 <HAL_TIM_PWM_Stop_IT+0x130>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6a1a      	ldr	r2, [r3, #32]
 80091da:	f240 4344 	movw	r3, #1092	; 0x444
 80091de:	4013      	ands	r3, r2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d107      	bne.n	80091f4 <HAL_TIM_PWM_Stop_IT+0x130>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d104      	bne.n	8009204 <HAL_TIM_PWM_Stop_IT+0x140>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009202:	e013      	b.n	800922c <HAL_TIM_PWM_Stop_IT+0x168>
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b04      	cmp	r3, #4
 8009208:	d104      	bne.n	8009214 <HAL_TIM_PWM_Stop_IT+0x150>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009212:	e00b      	b.n	800922c <HAL_TIM_PWM_Stop_IT+0x168>
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b08      	cmp	r3, #8
 8009218:	d104      	bne.n	8009224 <HAL_TIM_PWM_Stop_IT+0x160>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009222:	e003      	b.n	800922c <HAL_TIM_PWM_Stop_IT+0x168>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	40010000 	.word	0x40010000
 800923c:	40010400 	.word	0x40010400

08009240 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e097      	b.n	8009384 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	d106      	bne.n	800926e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7fc febb 	bl	8005fe4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2202      	movs	r2, #2
 8009272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	6812      	ldr	r2, [r2, #0]
 8009280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009284:	f023 0307 	bic.w	r3, r3, #7
 8009288:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	3304      	adds	r3, #4
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f000 fb0f 	bl	80098b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	4313      	orrs	r3, r2
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80092e0:	f023 030c 	bic.w	r3, r3, #12
 80092e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	021b      	lsls	r3, r3, #8
 80092fc:	4313      	orrs	r3, r2
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	4313      	orrs	r3, r2
 8009302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	011a      	lsls	r2, r3, #4
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	031b      	lsls	r3, r3, #12
 8009310:	4313      	orrs	r3, r2
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800931e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009326:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	4313      	orrs	r3, r2
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4313      	orrs	r3, r2
 8009338:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800939c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d110      	bne.n	80093de <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d102      	bne.n	80093c8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80093c2:	7b7b      	ldrb	r3, [r7, #13]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d001      	beq.n	80093cc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e089      	b.n	80094e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093dc:	e031      	b.n	8009442 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d110      	bne.n	8009406 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d102      	bne.n	80093f0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093ea:	7b3b      	ldrb	r3, [r7, #12]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d001      	beq.n	80093f4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e075      	b.n	80094e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009404:	e01d      	b.n	8009442 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d108      	bne.n	800941e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d105      	bne.n	800941e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009412:	7b7b      	ldrb	r3, [r7, #13]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d102      	bne.n	800941e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009418:	7b3b      	ldrb	r3, [r7, #12]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d001      	beq.n	8009422 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e05e      	b.n	80094e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2202      	movs	r2, #2
 8009426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2202      	movs	r2, #2
 8009436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2202      	movs	r2, #2
 800943e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d003      	beq.n	8009450 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2b04      	cmp	r3, #4
 800944c:	d010      	beq.n	8009470 <HAL_TIM_Encoder_Start_IT+0xe4>
 800944e:	e01f      	b.n	8009490 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2201      	movs	r2, #1
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fc7d 	bl	8009d58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f042 0202 	orr.w	r2, r2, #2
 800946c:	60da      	str	r2, [r3, #12]
      break;
 800946e:	e02e      	b.n	80094ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2201      	movs	r2, #1
 8009476:	2104      	movs	r1, #4
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fc6d 	bl	8009d58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f042 0204 	orr.w	r2, r2, #4
 800948c:	60da      	str	r2, [r3, #12]
      break;
 800948e:	e01e      	b.n	80094ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2201      	movs	r2, #1
 8009496:	2100      	movs	r1, #0
 8009498:	4618      	mov	r0, r3
 800949a:	f000 fc5d 	bl	8009d58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2201      	movs	r2, #1
 80094a4:	2104      	movs	r1, #4
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fc56 	bl	8009d58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68da      	ldr	r2, [r3, #12]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0202 	orr.w	r2, r2, #2
 80094ba:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68da      	ldr	r2, [r3, #12]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0204 	orr.w	r2, r2, #4
 80094ca:	60da      	str	r2, [r3, #12]
      break;
 80094cc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f042 0201 	orr.w	r2, r2, #1
 80094dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d122      	bne.n	8009544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f003 0302 	and.w	r3, r3, #2
 8009508:	2b02      	cmp	r3, #2
 800950a:	d11b      	bne.n	8009544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f06f 0202 	mvn.w	r2, #2
 8009514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f9b0 	bl	8009890 <HAL_TIM_IC_CaptureCallback>
 8009530:	e005      	b.n	800953e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f9a2 	bl	800987c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7fc f82d 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b04      	cmp	r3, #4
 8009550:	d122      	bne.n	8009598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b04      	cmp	r3, #4
 800955e:	d11b      	bne.n	8009598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f06f 0204 	mvn.w	r2, #4
 8009568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2202      	movs	r2, #2
 800956e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f986 	bl	8009890 <HAL_TIM_IC_CaptureCallback>
 8009584:	e005      	b.n	8009592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f978 	bl	800987c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7fc f803 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f003 0308 	and.w	r3, r3, #8
 80095a2:	2b08      	cmp	r3, #8
 80095a4:	d122      	bne.n	80095ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f003 0308 	and.w	r3, r3, #8
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d11b      	bne.n	80095ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f06f 0208 	mvn.w	r2, #8
 80095bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2204      	movs	r2, #4
 80095c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f95c 	bl	8009890 <HAL_TIM_IC_CaptureCallback>
 80095d8:	e005      	b.n	80095e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f94e 	bl	800987c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7fb ffd9 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f003 0310 	and.w	r3, r3, #16
 80095f6:	2b10      	cmp	r3, #16
 80095f8:	d122      	bne.n	8009640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f003 0310 	and.w	r3, r3, #16
 8009604:	2b10      	cmp	r3, #16
 8009606:	d11b      	bne.n	8009640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f06f 0210 	mvn.w	r2, #16
 8009610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2208      	movs	r2, #8
 8009616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f932 	bl	8009890 <HAL_TIM_IC_CaptureCallback>
 800962c:	e005      	b.n	800963a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f924 	bl	800987c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7fb ffaf 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b01      	cmp	r3, #1
 800964c:	d10e      	bne.n	800966c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b01      	cmp	r3, #1
 800965a:	d107      	bne.n	800966c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f06f 0201 	mvn.w	r2, #1
 8009664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7fb ff74 	bl	8005554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009676:	2b80      	cmp	r3, #128	; 0x80
 8009678:	d10e      	bne.n	8009698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009684:	2b80      	cmp	r3, #128	; 0x80
 8009686:	d107      	bne.n	8009698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fc0c 	bl	8009eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a2:	2b40      	cmp	r3, #64	; 0x40
 80096a4:	d10e      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b0:	2b40      	cmp	r3, #64	; 0x40
 80096b2:	d107      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f8f0 	bl	80098a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	f003 0320 	and.w	r3, r3, #32
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	d10e      	bne.n	80096f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b20      	cmp	r3, #32
 80096de:	d107      	bne.n	80096f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f06f 0220 	mvn.w	r2, #32
 80096e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fbd6 	bl	8009e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800970e:	2b01      	cmp	r3, #1
 8009710:	d101      	bne.n	8009716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009712:	2302      	movs	r3, #2
 8009714:	e0ae      	b.n	8009874 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b0c      	cmp	r3, #12
 8009722:	f200 809f 	bhi.w	8009864 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	08009761 	.word	0x08009761
 8009730:	08009865 	.word	0x08009865
 8009734:	08009865 	.word	0x08009865
 8009738:	08009865 	.word	0x08009865
 800973c:	080097a1 	.word	0x080097a1
 8009740:	08009865 	.word	0x08009865
 8009744:	08009865 	.word	0x08009865
 8009748:	08009865 	.word	0x08009865
 800974c:	080097e3 	.word	0x080097e3
 8009750:	08009865 	.word	0x08009865
 8009754:	08009865 	.word	0x08009865
 8009758:	08009865 	.word	0x08009865
 800975c:	08009823 	.word	0x08009823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68b9      	ldr	r1, [r7, #8]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 f946 	bl	80099f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	699a      	ldr	r2, [r3, #24]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0208 	orr.w	r2, r2, #8
 800977a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0204 	bic.w	r2, r2, #4
 800978a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6999      	ldr	r1, [r3, #24]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	691a      	ldr	r2, [r3, #16]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	430a      	orrs	r2, r1
 800979c:	619a      	str	r2, [r3, #24]
      break;
 800979e:	e064      	b.n	800986a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f996 	bl	8009ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	699a      	ldr	r2, [r3, #24]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	699a      	ldr	r2, [r3, #24]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6999      	ldr	r1, [r3, #24]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	021a      	lsls	r2, r3, #8
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	619a      	str	r2, [r3, #24]
      break;
 80097e0:	e043      	b.n	800986a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68b9      	ldr	r1, [r7, #8]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 f9eb 	bl	8009bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69da      	ldr	r2, [r3, #28]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f042 0208 	orr.w	r2, r2, #8
 80097fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69da      	ldr	r2, [r3, #28]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f022 0204 	bic.w	r2, r2, #4
 800980c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69d9      	ldr	r1, [r3, #28]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	691a      	ldr	r2, [r3, #16]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	430a      	orrs	r2, r1
 800981e:	61da      	str	r2, [r3, #28]
      break;
 8009820:	e023      	b.n	800986a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68b9      	ldr	r1, [r7, #8]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fa3f 	bl	8009cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69da      	ldr	r2, [r3, #28]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800983c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69da      	ldr	r2, [r3, #28]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800984c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69d9      	ldr	r1, [r3, #28]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	021a      	lsls	r2, r3, #8
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	61da      	str	r2, [r3, #28]
      break;
 8009862:	e002      	b.n	800986a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	75fb      	strb	r3, [r7, #23]
      break;
 8009868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009872:	7dfb      	ldrb	r3, [r7, #23]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a40      	ldr	r2, [pc, #256]	; (80099cc <TIM_Base_SetConfig+0x114>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d013      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d6:	d00f      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a3d      	ldr	r2, [pc, #244]	; (80099d0 <TIM_Base_SetConfig+0x118>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00b      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a3c      	ldr	r2, [pc, #240]	; (80099d4 <TIM_Base_SetConfig+0x11c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d007      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a3b      	ldr	r2, [pc, #236]	; (80099d8 <TIM_Base_SetConfig+0x120>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d003      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a3a      	ldr	r2, [pc, #232]	; (80099dc <TIM_Base_SetConfig+0x124>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d108      	bne.n	800990a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4313      	orrs	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a2f      	ldr	r2, [pc, #188]	; (80099cc <TIM_Base_SetConfig+0x114>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d02b      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009918:	d027      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a2c      	ldr	r2, [pc, #176]	; (80099d0 <TIM_Base_SetConfig+0x118>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d023      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a2b      	ldr	r2, [pc, #172]	; (80099d4 <TIM_Base_SetConfig+0x11c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01f      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a2a      	ldr	r2, [pc, #168]	; (80099d8 <TIM_Base_SetConfig+0x120>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d01b      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a29      	ldr	r2, [pc, #164]	; (80099dc <TIM_Base_SetConfig+0x124>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d017      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a28      	ldr	r2, [pc, #160]	; (80099e0 <TIM_Base_SetConfig+0x128>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d013      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a27      	ldr	r2, [pc, #156]	; (80099e4 <TIM_Base_SetConfig+0x12c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d00f      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a26      	ldr	r2, [pc, #152]	; (80099e8 <TIM_Base_SetConfig+0x130>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d00b      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a25      	ldr	r2, [pc, #148]	; (80099ec <TIM_Base_SetConfig+0x134>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d007      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a24      	ldr	r2, [pc, #144]	; (80099f0 <TIM_Base_SetConfig+0x138>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d003      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a23      	ldr	r2, [pc, #140]	; (80099f4 <TIM_Base_SetConfig+0x13c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d108      	bne.n	800997c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4313      	orrs	r3, r2
 800997a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	4313      	orrs	r3, r2
 8009988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <TIM_Base_SetConfig+0x114>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d003      	beq.n	80099b0 <TIM_Base_SetConfig+0xf8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a0c      	ldr	r2, [pc, #48]	; (80099dc <TIM_Base_SetConfig+0x124>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d103      	bne.n	80099b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	691a      	ldr	r2, [r3, #16]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	615a      	str	r2, [r3, #20]
}
 80099be:	bf00      	nop
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40010000 	.word	0x40010000
 80099d0:	40000400 	.word	0x40000400
 80099d4:	40000800 	.word	0x40000800
 80099d8:	40000c00 	.word	0x40000c00
 80099dc:	40010400 	.word	0x40010400
 80099e0:	40014000 	.word	0x40014000
 80099e4:	40014400 	.word	0x40014400
 80099e8:	40014800 	.word	0x40014800
 80099ec:	40001800 	.word	0x40001800
 80099f0:	40001c00 	.word	0x40001c00
 80099f4:	40002000 	.word	0x40002000

080099f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	f023 0201 	bic.w	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0303 	bic.w	r3, r3, #3
 8009a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f023 0302 	bic.w	r3, r3, #2
 8009a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a20      	ldr	r2, [pc, #128]	; (8009ad0 <TIM_OC1_SetConfig+0xd8>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d003      	beq.n	8009a5c <TIM_OC1_SetConfig+0x64>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1f      	ldr	r2, [pc, #124]	; (8009ad4 <TIM_OC1_SetConfig+0xdc>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d10c      	bne.n	8009a76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f023 0308 	bic.w	r3, r3, #8
 8009a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f023 0304 	bic.w	r3, r3, #4
 8009a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a15      	ldr	r2, [pc, #84]	; (8009ad0 <TIM_OC1_SetConfig+0xd8>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d003      	beq.n	8009a86 <TIM_OC1_SetConfig+0x8e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a14      	ldr	r2, [pc, #80]	; (8009ad4 <TIM_OC1_SetConfig+0xdc>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d111      	bne.n	8009aaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	621a      	str	r2, [r3, #32]
}
 8009ac4:	bf00      	nop
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40010400 	.word	0x40010400

08009ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	f023 0210 	bic.w	r2, r3, #16
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f023 0320 	bic.w	r3, r3, #32
 8009b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a22      	ldr	r2, [pc, #136]	; (8009bbc <TIM_OC2_SetConfig+0xe4>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d003      	beq.n	8009b40 <TIM_OC2_SetConfig+0x68>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a21      	ldr	r2, [pc, #132]	; (8009bc0 <TIM_OC2_SetConfig+0xe8>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d10d      	bne.n	8009b5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	011b      	lsls	r3, r3, #4
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a17      	ldr	r2, [pc, #92]	; (8009bbc <TIM_OC2_SetConfig+0xe4>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d003      	beq.n	8009b6c <TIM_OC2_SetConfig+0x94>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a16      	ldr	r2, [pc, #88]	; (8009bc0 <TIM_OC2_SetConfig+0xe8>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d113      	bne.n	8009b94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	621a      	str	r2, [r3, #32]
}
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	40010000 	.word	0x40010000
 8009bc0:	40010400 	.word	0x40010400

08009bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f023 0303 	bic.w	r3, r3, #3
 8009bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a21      	ldr	r2, [pc, #132]	; (8009ca4 <TIM_OC3_SetConfig+0xe0>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d003      	beq.n	8009c2a <TIM_OC3_SetConfig+0x66>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a20      	ldr	r2, [pc, #128]	; (8009ca8 <TIM_OC3_SetConfig+0xe4>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d10d      	bne.n	8009c46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a16      	ldr	r2, [pc, #88]	; (8009ca4 <TIM_OC3_SetConfig+0xe0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d003      	beq.n	8009c56 <TIM_OC3_SetConfig+0x92>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a15      	ldr	r2, [pc, #84]	; (8009ca8 <TIM_OC3_SetConfig+0xe4>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d113      	bne.n	8009c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	695b      	ldr	r3, [r3, #20]
 8009c6a:	011b      	lsls	r3, r3, #4
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	685a      	ldr	r2, [r3, #4]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	621a      	str	r2, [r3, #32]
}
 8009c98:	bf00      	nop
 8009c9a:	371c      	adds	r7, #28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	40010000 	.word	0x40010000
 8009ca8:	40010400 	.word	0x40010400

08009cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	021b      	lsls	r3, r3, #8
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	031b      	lsls	r3, r3, #12
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a12      	ldr	r2, [pc, #72]	; (8009d50 <TIM_OC4_SetConfig+0xa4>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d003      	beq.n	8009d14 <TIM_OC4_SetConfig+0x68>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a11      	ldr	r2, [pc, #68]	; (8009d54 <TIM_OC4_SetConfig+0xa8>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d109      	bne.n	8009d28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	019b      	lsls	r3, r3, #6
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	621a      	str	r2, [r3, #32]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	40010000 	.word	0x40010000
 8009d54:	40010400 	.word	0x40010400

08009d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f003 031f 	and.w	r3, r3, #31
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6a1a      	ldr	r2, [r3, #32]
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	43db      	mvns	r3, r3
 8009d7a:	401a      	ands	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6a1a      	ldr	r2, [r3, #32]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f003 031f 	and.w	r3, r3, #31
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d90:	431a      	orrs	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	621a      	str	r2, [r3, #32]
}
 8009d96:	bf00      	nop
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
	...

08009da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e05a      	b.n	8009e72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a21      	ldr	r2, [pc, #132]	; (8009e80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d022      	beq.n	8009e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e08:	d01d      	beq.n	8009e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a1d      	ldr	r2, [pc, #116]	; (8009e84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d018      	beq.n	8009e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a1b      	ldr	r2, [pc, #108]	; (8009e88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d013      	beq.n	8009e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a1a      	ldr	r2, [pc, #104]	; (8009e8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00e      	beq.n	8009e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a18      	ldr	r2, [pc, #96]	; (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d009      	beq.n	8009e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a17      	ldr	r2, [pc, #92]	; (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d004      	beq.n	8009e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a15      	ldr	r2, [pc, #84]	; (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d10c      	bne.n	8009e60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	40010000 	.word	0x40010000
 8009e84:	40000400 	.word	0x40000400
 8009e88:	40000800 	.word	0x40000800
 8009e8c:	40000c00 	.word	0x40000c00
 8009e90:	40010400 	.word	0x40010400
 8009e94:	40014000 	.word	0x40014000
 8009e98:	40001800 	.word	0x40001800

08009e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e03f      	b.n	8009f56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7fc fb10 	bl	8006510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2224      	movs	r2, #36	; 0x24
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68da      	ldr	r2, [r3, #12]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fccf 	bl	800a8ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	691a      	ldr	r2, [r3, #16]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	695a      	ldr	r2, [r3, #20]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e047      	b.n	800a000 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d106      	bne.n	8009f8a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7fc fac3 	bl	8006510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2224      	movs	r2, #36	; 0x24
 8009f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68da      	ldr	r2, [r3, #12]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fa0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fc82 	bl	800a8ac <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691a      	ldr	r2, [r3, #16]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	695a      	ldr	r2, [r3, #20]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009fc6:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695a      	ldr	r2, [r3, #20]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f042 0208 	orr.w	r2, r2, #8
 8009fd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68da      	ldr	r2, [r3, #12]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fe6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b0ba      	sub	sp, #232	; 0xe8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a02e:	2300      	movs	r3, #0
 800a030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a034:	2300      	movs	r3, #0
 800a036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10f      	bne.n	800a06e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a04e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a052:	f003 0320 	and.w	r3, r3, #32
 800a056:	2b00      	cmp	r3, #0
 800a058:	d009      	beq.n	800a06e <HAL_UART_IRQHandler+0x66>
 800a05a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a05e:	f003 0320 	and.w	r3, r3, #32
 800a062:	2b00      	cmp	r3, #0
 800a064:	d003      	beq.n	800a06e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fb65 	bl	800a736 <UART_Receive_IT>
      return;
 800a06c:	e256      	b.n	800a51c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a06e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 80de 	beq.w	800a234 <HAL_UART_IRQHandler+0x22c>
 800a078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a088:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 80d1 	beq.w	800a234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <HAL_UART_IRQHandler+0xae>
 800a09e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ae:	f043 0201 	orr.w	r2, r3, #1
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00b      	beq.n	800a0da <HAL_UART_IRQHandler+0xd2>
 800a0c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d2:	f043 0202 	orr.w	r2, r3, #2
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00b      	beq.n	800a0fe <HAL_UART_IRQHandler+0xf6>
 800a0e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f6:	f043 0204 	orr.w	r2, r3, #4
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	2b00      	cmp	r3, #0
 800a108:	d011      	beq.n	800a12e <HAL_UART_IRQHandler+0x126>
 800a10a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a10e:	f003 0320 	and.w	r3, r3, #32
 800a112:	2b00      	cmp	r3, #0
 800a114:	d105      	bne.n	800a122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d005      	beq.n	800a12e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	f043 0208 	orr.w	r2, r3, #8
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 81ed 	beq.w	800a512 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a13c:	f003 0320 	and.w	r3, r3, #32
 800a140:	2b00      	cmp	r3, #0
 800a142:	d008      	beq.n	800a156 <HAL_UART_IRQHandler+0x14e>
 800a144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a148:	f003 0320 	and.w	r3, r3, #32
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 faf0 	bl	800a736 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a160:	2b40      	cmp	r3, #64	; 0x40
 800a162:	bf0c      	ite	eq
 800a164:	2301      	moveq	r3, #1
 800a166:	2300      	movne	r3, #0
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	f003 0308 	and.w	r3, r3, #8
 800a176:	2b00      	cmp	r3, #0
 800a178:	d103      	bne.n	800a182 <HAL_UART_IRQHandler+0x17a>
 800a17a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d04f      	beq.n	800a222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f9f8 	bl	800a578 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a192:	2b40      	cmp	r3, #64	; 0x40
 800a194:	d141      	bne.n	800a21a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3314      	adds	r3, #20
 800a19c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a1ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3314      	adds	r3, #20
 800a1be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a1c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a1c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a1ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a1d2:	e841 2300 	strex	r3, r2, [r1]
 800a1d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a1da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1d9      	bne.n	800a196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d013      	beq.n	800a212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ee:	4a7d      	ldr	r2, [pc, #500]	; (800a3e4 <HAL_UART_IRQHandler+0x3dc>)
 800a1f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fd fa64 	bl	80076c4 <HAL_DMA_Abort_IT>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d016      	beq.n	800a230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a210:	e00e      	b.n	800a230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f99a 	bl	800a54c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a218:	e00a      	b.n	800a230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f996 	bl	800a54c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a220:	e006      	b.n	800a230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f992 	bl	800a54c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a22e:	e170      	b.n	800a512 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a230:	bf00      	nop
    return;
 800a232:	e16e      	b.n	800a512 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a238:	2b01      	cmp	r3, #1
 800a23a:	f040 814a 	bne.w	800a4d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a242:	f003 0310 	and.w	r3, r3, #16
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 8143 	beq.w	800a4d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a250:	f003 0310 	and.w	r3, r3, #16
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 813c 	beq.w	800a4d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60bb      	str	r3, [r7, #8]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	60bb      	str	r3, [r7, #8]
 800a26e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27a:	2b40      	cmp	r3, #64	; 0x40
 800a27c:	f040 80b4 	bne.w	800a3e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a28c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 8140 	beq.w	800a516 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a29a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	f080 8139 	bcs.w	800a516 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2b6:	f000 8088 	beq.w	800a3ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	330c      	adds	r3, #12
 800a2c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2c8:	e853 3f00 	ldrex	r3, [r3]
 800a2cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a2d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	330c      	adds	r3, #12
 800a2e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a2e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a2ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a2f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a2f6:	e841 2300 	strex	r3, r2, [r1]
 800a2fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a2fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1d9      	bne.n	800a2ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3314      	adds	r3, #20
 800a30c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a318:	f023 0301 	bic.w	r3, r3, #1
 800a31c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3314      	adds	r3, #20
 800a326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a32a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a32e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a330:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a332:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a33c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e1      	bne.n	800a306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3314      	adds	r3, #20
 800a348:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3314      	adds	r3, #20
 800a362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a366:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a368:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a36c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a36e:	e841 2300 	strex	r3, r2, [r1]
 800a372:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1e3      	bne.n	800a342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2220      	movs	r2, #32
 800a37e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	330c      	adds	r3, #12
 800a38e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a392:	e853 3f00 	ldrex	r3, [r3]
 800a396:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a39a:	f023 0310 	bic.w	r3, r3, #16
 800a39e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	330c      	adds	r3, #12
 800a3a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a3ac:	65ba      	str	r2, [r7, #88]	; 0x58
 800a3ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3b4:	e841 2300 	strex	r3, r2, [r1]
 800a3b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e3      	bne.n	800a388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fd f90d 	bl	80075e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f8c0 	bl	800a560 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a3e0:	e099      	b.n	800a516 <HAL_UART_IRQHandler+0x50e>
 800a3e2:	bf00      	nop
 800a3e4:	0800a63f 	.word	0x0800a63f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 808b 	beq.w	800a51a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a404:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 8086 	beq.w	800a51a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	330c      	adds	r3, #12
 800a414:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	e853 3f00 	ldrex	r3, [r3]
 800a41c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a424:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	330c      	adds	r3, #12
 800a42e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a432:	647a      	str	r2, [r7, #68]	; 0x44
 800a434:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e3      	bne.n	800a40e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3314      	adds	r3, #20
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	623b      	str	r3, [r7, #32]
   return(result);
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	f023 0301 	bic.w	r3, r3, #1
 800a45c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3314      	adds	r3, #20
 800a466:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a46a:	633a      	str	r2, [r7, #48]	; 0x30
 800a46c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e3      	bne.n	800a446 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2220      	movs	r2, #32
 800a482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	330c      	adds	r3, #12
 800a492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f023 0310 	bic.w	r3, r3, #16
 800a4a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	330c      	adds	r3, #12
 800a4ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a4b0:	61fa      	str	r2, [r7, #28]
 800a4b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	69b9      	ldr	r1, [r7, #24]
 800a4b6:	69fa      	ldr	r2, [r7, #28]
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e3      	bne.n	800a48c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a4c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f848 	bl	800a560 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a4d0:	e023      	b.n	800a51a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <HAL_UART_IRQHandler+0x4ea>
 800a4de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f8bb 	bl	800a666 <UART_Transmit_IT>
    return;
 800a4f0:	e014      	b.n	800a51c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00e      	beq.n	800a51c <HAL_UART_IRQHandler+0x514>
 800a4fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a506:	2b00      	cmp	r3, #0
 800a508:	d008      	beq.n	800a51c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f8fb 	bl	800a706 <UART_EndTransmit_IT>
    return;
 800a510:	e004      	b.n	800a51c <HAL_UART_IRQHandler+0x514>
    return;
 800a512:	bf00      	nop
 800a514:	e002      	b.n	800a51c <HAL_UART_IRQHandler+0x514>
      return;
 800a516:	bf00      	nop
 800a518:	e000      	b.n	800a51c <HAL_UART_IRQHandler+0x514>
      return;
 800a51a:	bf00      	nop
  }
}
 800a51c:	37e8      	adds	r7, #232	; 0xe8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop

0800a524 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a578:	b480      	push	{r7}
 800a57a:	b095      	sub	sp, #84	; 0x54
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	330c      	adds	r3, #12
 800a586:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58a:	e853 3f00 	ldrex	r3, [r3]
 800a58e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a596:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	330c      	adds	r3, #12
 800a59e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5a0:	643a      	str	r2, [r7, #64]	; 0x40
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5a8:	e841 2300 	strex	r3, r2, [r1]
 800a5ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e5      	bne.n	800a580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3314      	adds	r3, #20
 800a5ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	e853 3f00 	ldrex	r3, [r3]
 800a5c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	f023 0301 	bic.w	r3, r3, #1
 800a5ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3314      	adds	r3, #20
 800a5d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5dc:	e841 2300 	strex	r3, r2, [r1]
 800a5e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1e5      	bne.n	800a5b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d119      	bne.n	800a624 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	330c      	adds	r3, #12
 800a5f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	e853 3f00 	ldrex	r3, [r3]
 800a5fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f023 0310 	bic.w	r3, r3, #16
 800a606:	647b      	str	r3, [r7, #68]	; 0x44
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	330c      	adds	r3, #12
 800a60e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a610:	61ba      	str	r2, [r7, #24]
 800a612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a614:	6979      	ldr	r1, [r7, #20]
 800a616:	69ba      	ldr	r2, [r7, #24]
 800a618:	e841 2300 	strex	r3, r2, [r1]
 800a61c:	613b      	str	r3, [r7, #16]
   return(result);
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1e5      	bne.n	800a5f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2220      	movs	r2, #32
 800a628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a632:	bf00      	nop
 800a634:	3754      	adds	r7, #84	; 0x54
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f7ff ff77 	bl	800a54c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a65e:	bf00      	nop
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a666:	b480      	push	{r7}
 800a668:	b085      	sub	sp, #20
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b21      	cmp	r3, #33	; 0x21
 800a678:	d13e      	bne.n	800a6f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a682:	d114      	bne.n	800a6ae <UART_Transmit_IT+0x48>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d110      	bne.n	800a6ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	1c9a      	adds	r2, r3, #2
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	621a      	str	r2, [r3, #32]
 800a6ac:	e008      	b.n	800a6c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	1c59      	adds	r1, r3, #1
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	6211      	str	r1, [r2, #32]
 800a6b8:	781a      	ldrb	r2, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10f      	bne.n	800a6f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68da      	ldr	r2, [r3, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	e000      	b.n	800a6fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a6f8:	2302      	movs	r3, #2
  }
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3714      	adds	r7, #20
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68da      	ldr	r2, [r3, #12]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a71c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2220      	movs	r2, #32
 800a722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff fefc 	bl	800a524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b08c      	sub	sp, #48	; 0x30
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b22      	cmp	r3, #34	; 0x22
 800a748:	f040 80ab 	bne.w	800a8a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a754:	d117      	bne.n	800a786 <UART_Receive_IT+0x50>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d113      	bne.n	800a786 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a75e:	2300      	movs	r3, #0
 800a760:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a766:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	b29b      	uxth	r3, r3
 800a770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a774:	b29a      	uxth	r2, r3
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77e:	1c9a      	adds	r2, r3, #2
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	629a      	str	r2, [r3, #40]	; 0x28
 800a784:	e026      	b.n	800a7d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a78c:	2300      	movs	r3, #0
 800a78e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a798:	d007      	beq.n	800a7aa <UART_Receive_IT+0x74>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <UART_Receive_IT+0x82>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d106      	bne.n	800a7b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b4:	701a      	strb	r2, [r3, #0]
 800a7b6:	e008      	b.n	800a7ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ce:	1c5a      	adds	r2, r3, #1
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d15a      	bne.n	800a89e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68da      	ldr	r2, [r3, #12]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0220 	bic.w	r2, r2, #32
 800a7f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68da      	ldr	r2, [r3, #12]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695a      	ldr	r2, [r3, #20]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f022 0201 	bic.w	r2, r2, #1
 800a816:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a824:	2b01      	cmp	r3, #1
 800a826:	d135      	bne.n	800a894 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	330c      	adds	r3, #12
 800a834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	613b      	str	r3, [r7, #16]
   return(result);
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	f023 0310 	bic.w	r3, r3, #16
 800a844:	627b      	str	r3, [r7, #36]	; 0x24
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	330c      	adds	r3, #12
 800a84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a84e:	623a      	str	r2, [r7, #32]
 800a850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	69f9      	ldr	r1, [r7, #28]
 800a854:	6a3a      	ldr	r2, [r7, #32]
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e5      	bne.n	800a82e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0310 	and.w	r3, r3, #16
 800a86c:	2b10      	cmp	r3, #16
 800a86e:	d10a      	bne.n	800a886 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff fe67 	bl	800a560 <HAL_UARTEx_RxEventCallback>
 800a892:	e002      	b.n	800a89a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff fe4f 	bl	800a538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	e002      	b.n	800a8a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e000      	b.n	800a8a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a8a2:	2302      	movs	r3, #2
  }
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3730      	adds	r7, #48	; 0x30
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8b0:	b0c0      	sub	sp, #256	; 0x100
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c8:	68d9      	ldr	r1, [r3, #12]
 800a8ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	ea40 0301 	orr.w	r3, r0, r1
 800a8d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8da:	689a      	ldr	r2, [r3, #8]
 800a8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	431a      	orrs	r2, r3
 800a8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f0:	69db      	ldr	r3, [r3, #28]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a904:	f021 010c 	bic.w	r1, r1, #12
 800a908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a912:	430b      	orrs	r3, r1
 800a914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a926:	6999      	ldr	r1, [r3, #24]
 800a928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	ea40 0301 	orr.w	r3, r0, r1
 800a932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	4b8f      	ldr	r3, [pc, #572]	; (800ab78 <UART_SetConfig+0x2cc>)
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d005      	beq.n	800a94c <UART_SetConfig+0xa0>
 800a940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	4b8d      	ldr	r3, [pc, #564]	; (800ab7c <UART_SetConfig+0x2d0>)
 800a948:	429a      	cmp	r2, r3
 800a94a:	d104      	bne.n	800a956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a94c:	f7fd fc7a 	bl	8008244 <HAL_RCC_GetPCLK2Freq>
 800a950:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a954:	e003      	b.n	800a95e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a956:	f7fd fc61 	bl	800821c <HAL_RCC_GetPCLK1Freq>
 800a95a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a968:	f040 810c 	bne.w	800ab84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a96c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a970:	2200      	movs	r2, #0
 800a972:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a976:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a97a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a97e:	4622      	mov	r2, r4
 800a980:	462b      	mov	r3, r5
 800a982:	1891      	adds	r1, r2, r2
 800a984:	65b9      	str	r1, [r7, #88]	; 0x58
 800a986:	415b      	adcs	r3, r3
 800a988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a98a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a98e:	4621      	mov	r1, r4
 800a990:	eb12 0801 	adds.w	r8, r2, r1
 800a994:	4629      	mov	r1, r5
 800a996:	eb43 0901 	adc.w	r9, r3, r1
 800a99a:	f04f 0200 	mov.w	r2, #0
 800a99e:	f04f 0300 	mov.w	r3, #0
 800a9a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9ae:	4690      	mov	r8, r2
 800a9b0:	4699      	mov	r9, r3
 800a9b2:	4623      	mov	r3, r4
 800a9b4:	eb18 0303 	adds.w	r3, r8, r3
 800a9b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9bc:	462b      	mov	r3, r5
 800a9be:	eb49 0303 	adc.w	r3, r9, r3
 800a9c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a9d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9da:	460b      	mov	r3, r1
 800a9dc:	18db      	adds	r3, r3, r3
 800a9de:	653b      	str	r3, [r7, #80]	; 0x50
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	eb42 0303 	adc.w	r3, r2, r3
 800a9e6:	657b      	str	r3, [r7, #84]	; 0x54
 800a9e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a9ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a9f0:	f7f6 f96a 	bl	8000cc8 <__aeabi_uldivmod>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4b61      	ldr	r3, [pc, #388]	; (800ab80 <UART_SetConfig+0x2d4>)
 800a9fa:	fba3 2302 	umull	r2, r3, r3, r2
 800a9fe:	095b      	lsrs	r3, r3, #5
 800aa00:	011c      	lsls	r4, r3, #4
 800aa02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aa10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aa14:	4642      	mov	r2, r8
 800aa16:	464b      	mov	r3, r9
 800aa18:	1891      	adds	r1, r2, r2
 800aa1a:	64b9      	str	r1, [r7, #72]	; 0x48
 800aa1c:	415b      	adcs	r3, r3
 800aa1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aa24:	4641      	mov	r1, r8
 800aa26:	eb12 0a01 	adds.w	sl, r2, r1
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	eb43 0b01 	adc.w	fp, r3, r1
 800aa30:	f04f 0200 	mov.w	r2, #0
 800aa34:	f04f 0300 	mov.w	r3, #0
 800aa38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa44:	4692      	mov	sl, r2
 800aa46:	469b      	mov	fp, r3
 800aa48:	4643      	mov	r3, r8
 800aa4a:	eb1a 0303 	adds.w	r3, sl, r3
 800aa4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa52:	464b      	mov	r3, r9
 800aa54:	eb4b 0303 	adc.w	r3, fp, r3
 800aa58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aa6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aa70:	460b      	mov	r3, r1
 800aa72:	18db      	adds	r3, r3, r3
 800aa74:	643b      	str	r3, [r7, #64]	; 0x40
 800aa76:	4613      	mov	r3, r2
 800aa78:	eb42 0303 	adc.w	r3, r2, r3
 800aa7c:	647b      	str	r3, [r7, #68]	; 0x44
 800aa7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aa82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aa86:	f7f6 f91f 	bl	8000cc8 <__aeabi_uldivmod>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	4611      	mov	r1, r2
 800aa90:	4b3b      	ldr	r3, [pc, #236]	; (800ab80 <UART_SetConfig+0x2d4>)
 800aa92:	fba3 2301 	umull	r2, r3, r3, r1
 800aa96:	095b      	lsrs	r3, r3, #5
 800aa98:	2264      	movs	r2, #100	; 0x64
 800aa9a:	fb02 f303 	mul.w	r3, r2, r3
 800aa9e:	1acb      	subs	r3, r1, r3
 800aaa0:	00db      	lsls	r3, r3, #3
 800aaa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aaa6:	4b36      	ldr	r3, [pc, #216]	; (800ab80 <UART_SetConfig+0x2d4>)
 800aaa8:	fba3 2302 	umull	r2, r3, r3, r2
 800aaac:	095b      	lsrs	r3, r3, #5
 800aaae:	005b      	lsls	r3, r3, #1
 800aab0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aab4:	441c      	add	r4, r3
 800aab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aac0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aac8:	4642      	mov	r2, r8
 800aaca:	464b      	mov	r3, r9
 800aacc:	1891      	adds	r1, r2, r2
 800aace:	63b9      	str	r1, [r7, #56]	; 0x38
 800aad0:	415b      	adcs	r3, r3
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aad8:	4641      	mov	r1, r8
 800aada:	1851      	adds	r1, r2, r1
 800aadc:	6339      	str	r1, [r7, #48]	; 0x30
 800aade:	4649      	mov	r1, r9
 800aae0:	414b      	adcs	r3, r1
 800aae2:	637b      	str	r3, [r7, #52]	; 0x34
 800aae4:	f04f 0200 	mov.w	r2, #0
 800aae8:	f04f 0300 	mov.w	r3, #0
 800aaec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aaf0:	4659      	mov	r1, fp
 800aaf2:	00cb      	lsls	r3, r1, #3
 800aaf4:	4651      	mov	r1, sl
 800aaf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aafa:	4651      	mov	r1, sl
 800aafc:	00ca      	lsls	r2, r1, #3
 800aafe:	4610      	mov	r0, r2
 800ab00:	4619      	mov	r1, r3
 800ab02:	4603      	mov	r3, r0
 800ab04:	4642      	mov	r2, r8
 800ab06:	189b      	adds	r3, r3, r2
 800ab08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab0c:	464b      	mov	r3, r9
 800ab0e:	460a      	mov	r2, r1
 800ab10:	eb42 0303 	adc.w	r3, r2, r3
 800ab14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ab28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	18db      	adds	r3, r3, r3
 800ab30:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab32:	4613      	mov	r3, r2
 800ab34:	eb42 0303 	adc.w	r3, r2, r3
 800ab38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ab42:	f7f6 f8c1 	bl	8000cc8 <__aeabi_uldivmod>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	; (800ab80 <UART_SetConfig+0x2d4>)
 800ab4c:	fba3 1302 	umull	r1, r3, r3, r2
 800ab50:	095b      	lsrs	r3, r3, #5
 800ab52:	2164      	movs	r1, #100	; 0x64
 800ab54:	fb01 f303 	mul.w	r3, r1, r3
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	00db      	lsls	r3, r3, #3
 800ab5c:	3332      	adds	r3, #50	; 0x32
 800ab5e:	4a08      	ldr	r2, [pc, #32]	; (800ab80 <UART_SetConfig+0x2d4>)
 800ab60:	fba2 2303 	umull	r2, r3, r2, r3
 800ab64:	095b      	lsrs	r3, r3, #5
 800ab66:	f003 0207 	and.w	r2, r3, #7
 800ab6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4422      	add	r2, r4
 800ab72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab74:	e105      	b.n	800ad82 <UART_SetConfig+0x4d6>
 800ab76:	bf00      	nop
 800ab78:	40011000 	.word	0x40011000
 800ab7c:	40011400 	.word	0x40011400
 800ab80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ab8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ab92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ab96:	4642      	mov	r2, r8
 800ab98:	464b      	mov	r3, r9
 800ab9a:	1891      	adds	r1, r2, r2
 800ab9c:	6239      	str	r1, [r7, #32]
 800ab9e:	415b      	adcs	r3, r3
 800aba0:	627b      	str	r3, [r7, #36]	; 0x24
 800aba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aba6:	4641      	mov	r1, r8
 800aba8:	1854      	adds	r4, r2, r1
 800abaa:	4649      	mov	r1, r9
 800abac:	eb43 0501 	adc.w	r5, r3, r1
 800abb0:	f04f 0200 	mov.w	r2, #0
 800abb4:	f04f 0300 	mov.w	r3, #0
 800abb8:	00eb      	lsls	r3, r5, #3
 800abba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abbe:	00e2      	lsls	r2, r4, #3
 800abc0:	4614      	mov	r4, r2
 800abc2:	461d      	mov	r5, r3
 800abc4:	4643      	mov	r3, r8
 800abc6:	18e3      	adds	r3, r4, r3
 800abc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800abcc:	464b      	mov	r3, r9
 800abce:	eb45 0303 	adc.w	r3, r5, r3
 800abd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800abd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800abe6:	f04f 0200 	mov.w	r2, #0
 800abea:	f04f 0300 	mov.w	r3, #0
 800abee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800abf2:	4629      	mov	r1, r5
 800abf4:	008b      	lsls	r3, r1, #2
 800abf6:	4621      	mov	r1, r4
 800abf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abfc:	4621      	mov	r1, r4
 800abfe:	008a      	lsls	r2, r1, #2
 800ac00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ac04:	f7f6 f860 	bl	8000cc8 <__aeabi_uldivmod>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4b60      	ldr	r3, [pc, #384]	; (800ad90 <UART_SetConfig+0x4e4>)
 800ac0e:	fba3 2302 	umull	r2, r3, r3, r2
 800ac12:	095b      	lsrs	r3, r3, #5
 800ac14:	011c      	lsls	r4, r3, #4
 800ac16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ac28:	4642      	mov	r2, r8
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	1891      	adds	r1, r2, r2
 800ac2e:	61b9      	str	r1, [r7, #24]
 800ac30:	415b      	adcs	r3, r3
 800ac32:	61fb      	str	r3, [r7, #28]
 800ac34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac38:	4641      	mov	r1, r8
 800ac3a:	1851      	adds	r1, r2, r1
 800ac3c:	6139      	str	r1, [r7, #16]
 800ac3e:	4649      	mov	r1, r9
 800ac40:	414b      	adcs	r3, r1
 800ac42:	617b      	str	r3, [r7, #20]
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	f04f 0300 	mov.w	r3, #0
 800ac4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac50:	4659      	mov	r1, fp
 800ac52:	00cb      	lsls	r3, r1, #3
 800ac54:	4651      	mov	r1, sl
 800ac56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac5a:	4651      	mov	r1, sl
 800ac5c:	00ca      	lsls	r2, r1, #3
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	4603      	mov	r3, r0
 800ac64:	4642      	mov	r2, r8
 800ac66:	189b      	adds	r3, r3, r2
 800ac68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac6c:	464b      	mov	r3, r9
 800ac6e:	460a      	mov	r2, r1
 800ac70:	eb42 0303 	adc.w	r3, r2, r3
 800ac74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac82:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	f04f 0300 	mov.w	r3, #0
 800ac8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ac90:	4649      	mov	r1, r9
 800ac92:	008b      	lsls	r3, r1, #2
 800ac94:	4641      	mov	r1, r8
 800ac96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac9a:	4641      	mov	r1, r8
 800ac9c:	008a      	lsls	r2, r1, #2
 800ac9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aca2:	f7f6 f811 	bl	8000cc8 <__aeabi_uldivmod>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	4b39      	ldr	r3, [pc, #228]	; (800ad90 <UART_SetConfig+0x4e4>)
 800acac:	fba3 1302 	umull	r1, r3, r3, r2
 800acb0:	095b      	lsrs	r3, r3, #5
 800acb2:	2164      	movs	r1, #100	; 0x64
 800acb4:	fb01 f303 	mul.w	r3, r1, r3
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	011b      	lsls	r3, r3, #4
 800acbc:	3332      	adds	r3, #50	; 0x32
 800acbe:	4a34      	ldr	r2, [pc, #208]	; (800ad90 <UART_SetConfig+0x4e4>)
 800acc0:	fba2 2303 	umull	r2, r3, r2, r3
 800acc4:	095b      	lsrs	r3, r3, #5
 800acc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acca:	441c      	add	r4, r3
 800accc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acd0:	2200      	movs	r2, #0
 800acd2:	673b      	str	r3, [r7, #112]	; 0x70
 800acd4:	677a      	str	r2, [r7, #116]	; 0x74
 800acd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800acda:	4642      	mov	r2, r8
 800acdc:	464b      	mov	r3, r9
 800acde:	1891      	adds	r1, r2, r2
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	415b      	adcs	r3, r3
 800ace4:	60fb      	str	r3, [r7, #12]
 800ace6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acea:	4641      	mov	r1, r8
 800acec:	1851      	adds	r1, r2, r1
 800acee:	6039      	str	r1, [r7, #0]
 800acf0:	4649      	mov	r1, r9
 800acf2:	414b      	adcs	r3, r1
 800acf4:	607b      	str	r3, [r7, #4]
 800acf6:	f04f 0200 	mov.w	r2, #0
 800acfa:	f04f 0300 	mov.w	r3, #0
 800acfe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad02:	4659      	mov	r1, fp
 800ad04:	00cb      	lsls	r3, r1, #3
 800ad06:	4651      	mov	r1, sl
 800ad08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad0c:	4651      	mov	r1, sl
 800ad0e:	00ca      	lsls	r2, r1, #3
 800ad10:	4610      	mov	r0, r2
 800ad12:	4619      	mov	r1, r3
 800ad14:	4603      	mov	r3, r0
 800ad16:	4642      	mov	r2, r8
 800ad18:	189b      	adds	r3, r3, r2
 800ad1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad1c:	464b      	mov	r3, r9
 800ad1e:	460a      	mov	r2, r1
 800ad20:	eb42 0303 	adc.w	r3, r2, r3
 800ad24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	663b      	str	r3, [r7, #96]	; 0x60
 800ad30:	667a      	str	r2, [r7, #100]	; 0x64
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ad3e:	4649      	mov	r1, r9
 800ad40:	008b      	lsls	r3, r1, #2
 800ad42:	4641      	mov	r1, r8
 800ad44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad48:	4641      	mov	r1, r8
 800ad4a:	008a      	lsls	r2, r1, #2
 800ad4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad50:	f7f5 ffba 	bl	8000cc8 <__aeabi_uldivmod>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4b0d      	ldr	r3, [pc, #52]	; (800ad90 <UART_SetConfig+0x4e4>)
 800ad5a:	fba3 1302 	umull	r1, r3, r3, r2
 800ad5e:	095b      	lsrs	r3, r3, #5
 800ad60:	2164      	movs	r1, #100	; 0x64
 800ad62:	fb01 f303 	mul.w	r3, r1, r3
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	011b      	lsls	r3, r3, #4
 800ad6a:	3332      	adds	r3, #50	; 0x32
 800ad6c:	4a08      	ldr	r2, [pc, #32]	; (800ad90 <UART_SetConfig+0x4e4>)
 800ad6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad72:	095b      	lsrs	r3, r3, #5
 800ad74:	f003 020f 	and.w	r2, r3, #15
 800ad78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4422      	add	r2, r4
 800ad80:	609a      	str	r2, [r3, #8]
}
 800ad82:	bf00      	nop
 800ad84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad8e:	bf00      	nop
 800ad90:	51eb851f 	.word	0x51eb851f

0800ad94 <_ZNSaIcEC1Ev>:
 800ad94:	4770      	bx	lr

0800ad96 <_ZNSaIcED1Ev>:
 800ad96:	4770      	bx	lr

0800ad98 <_ZSt17__throw_bad_allocv>:
 800ad98:	b508      	push	{r3, lr}
 800ad9a:	f001 fc4f 	bl	800c63c <abort>

0800ad9e <_ZSt19__throw_logic_errorPKc>:
 800ad9e:	b508      	push	{r3, lr}
 800ada0:	f001 fc4c 	bl	800c63c <abort>

0800ada4 <_ZSt24__throw_invalid_argumentPKc>:
 800ada4:	b508      	push	{r3, lr}
 800ada6:	f001 fc49 	bl	800c63c <abort>

0800adaa <_ZSt20__throw_length_errorPKc>:
 800adaa:	b508      	push	{r3, lr}
 800adac:	f001 fc46 	bl	800c63c <abort>

0800adb0 <_ZSt20__throw_out_of_rangePKc>:
 800adb0:	b508      	push	{r3, lr}
 800adb2:	f001 fc43 	bl	800c63c <abort>

0800adb6 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800adb6:	b40f      	push	{r0, r1, r2, r3}
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	f107 0418 	add.w	r4, r7, #24
 800adc2:	f854 2b04 	ldr.w	r2, [r4], #4
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	4610      	mov	r0, r2
 800adca:	f7f5 fa71 	bl	80002b0 <strlen>
 800adce:	f200 2307 	addw	r3, r0, #519	; 0x207
 800add2:	f023 0307 	bic.w	r3, r3, #7
 800add6:	ebad 0d03 	sub.w	sp, sp, r3
 800adda:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	60fc      	str	r4, [r7, #12]
 800ade2:	4623      	mov	r3, r4
 800ade4:	4668      	mov	r0, sp
 800ade6:	f000 f855 	bl	800ae94 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800adea:	f001 fc27 	bl	800c63c <abort>
	...

0800adf0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b09c      	sub	sp, #112	; 0x70
 800adf4:	4606      	mov	r6, r0
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	460c      	mov	r4, r1
 800adfa:	1ba4      	subs	r4, r4, r6
 800adfc:	490e      	ldr	r1, [pc, #56]	; (800ae38 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800adfe:	2269      	movs	r2, #105	; 0x69
 800ae00:	1d38      	adds	r0, r7, #4
 800ae02:	f001 fc6d 	bl	800c6e0 <memcpy>
 800ae06:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800ae0a:	f023 0307 	bic.w	r3, r3, #7
 800ae0e:	ebad 0d03 	sub.w	sp, sp, r3
 800ae12:	466d      	mov	r5, sp
 800ae14:	2268      	movs	r2, #104	; 0x68
 800ae16:	1d39      	adds	r1, r7, #4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f001 fc61 	bl	800c6e0 <memcpy>
 800ae1e:	4622      	mov	r2, r4
 800ae20:	4631      	mov	r1, r6
 800ae22:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800ae26:	442c      	add	r4, r5
 800ae28:	f001 fc5a 	bl	800c6e0 <memcpy>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800ae32:	4628      	mov	r0, r5
 800ae34:	f7ff ffb3 	bl	800ad9e <_ZSt19__throw_logic_errorPKc>
 800ae38:	0800f70c 	.word	0x0800f70c

0800ae3c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800ae3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	b084      	sub	sp, #16
 800ae44:	466d      	mov	r5, sp
 800ae46:	f105 040c 	add.w	r4, r5, #12
 800ae4a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800ae90 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800ae4e:	4623      	mov	r3, r4
 800ae50:	f04f 0c0a 	mov.w	ip, #10
 800ae54:	fbb2 f6fc 	udiv	r6, r2, ip
 800ae58:	fb0c 2e16 	mls	lr, ip, r6, r2
 800ae5c:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800ae60:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800ae64:	4696      	mov	lr, r2
 800ae66:	f1be 0f09 	cmp.w	lr, #9
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	d8f2      	bhi.n	800ae54 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800ae6e:	1ae4      	subs	r4, r4, r3
 800ae70:	428c      	cmp	r4, r1
 800ae72:	d809      	bhi.n	800ae88 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800ae74:	f1c4 030c 	rsb	r3, r4, #12
 800ae78:	4622      	mov	r2, r4
 800ae7a:	18e9      	adds	r1, r5, r3
 800ae7c:	f001 fc30 	bl	800c6e0 <memcpy>
 800ae80:	4620      	mov	r0, r4
 800ae82:	46bd      	mov	sp, r7
 800ae84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae88:	f04f 34ff 	mov.w	r4, #4294967295
 800ae8c:	e7f8      	b.n	800ae80 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800ae8e:	bf00      	nop
 800ae90:	0800f775 	.word	0x0800f775

0800ae94 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800ae94:	3901      	subs	r1, #1
 800ae96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9a:	4607      	mov	r7, r0
 800ae9c:	4615      	mov	r5, r2
 800ae9e:	eb00 0801 	add.w	r8, r0, r1
 800aea2:	4604      	mov	r4, r0
 800aea4:	782a      	ldrb	r2, [r5, #0]
 800aea6:	b392      	cbz	r2, 800af0e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800aea8:	4544      	cmp	r4, r8
 800aeaa:	d22a      	bcs.n	800af02 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800aeac:	2a25      	cmp	r2, #37	; 0x25
 800aeae:	d107      	bne.n	800aec0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800aeb0:	786a      	ldrb	r2, [r5, #1]
 800aeb2:	2a73      	cmp	r2, #115	; 0x73
 800aeb4:	d009      	beq.n	800aeca <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800aeb6:	2a7a      	cmp	r2, #122	; 0x7a
 800aeb8:	d012      	beq.n	800aee0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800aeba:	2a25      	cmp	r2, #37	; 0x25
 800aebc:	d100      	bne.n	800aec0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800aebe:	3501      	adds	r5, #1
 800aec0:	f815 2b01 	ldrb.w	r2, [r5], #1
 800aec4:	f804 2b01 	strb.w	r2, [r4], #1
 800aec8:	e7ec      	b.n	800aea4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800aeca:	f853 2b04 	ldr.w	r2, [r3], #4
 800aece:	3a01      	subs	r2, #1
 800aed0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800aed4:	b1c9      	cbz	r1, 800af0a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800aed6:	4544      	cmp	r4, r8
 800aed8:	d013      	beq.n	800af02 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800aeda:	f804 1b01 	strb.w	r1, [r4], #1
 800aede:	e7f7      	b.n	800aed0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800aee0:	78aa      	ldrb	r2, [r5, #2]
 800aee2:	2a75      	cmp	r2, #117	; 0x75
 800aee4:	d1ec      	bne.n	800aec0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800aee6:	461e      	mov	r6, r3
 800aee8:	eba8 0104 	sub.w	r1, r8, r4
 800aeec:	f856 2b04 	ldr.w	r2, [r6], #4
 800aef0:	4620      	mov	r0, r4
 800aef2:	f7ff ffa3 	bl	800ae3c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	dd03      	ble.n	800af02 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800aefa:	4404      	add	r4, r0
 800aefc:	3503      	adds	r5, #3
 800aefe:	4633      	mov	r3, r6
 800af00:	e7d0      	b.n	800aea4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800af02:	4621      	mov	r1, r4
 800af04:	4638      	mov	r0, r7
 800af06:	f7ff ff73 	bl	800adf0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800af0a:	3502      	adds	r5, #2
 800af0c:	e7ca      	b.n	800aea4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800af0e:	7022      	strb	r2, [r4, #0]
 800af10:	1be0      	subs	r0, r4, r7
 800af12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af16 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800af16:	b10a      	cbz	r2, 800af1c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800af18:	f001 bbe2 	b.w	800c6e0 <memcpy>
 800af1c:	4770      	bx	lr

0800af1e <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800af1e:	b10a      	cbz	r2, 800af24 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800af20:	f001 bbce 	b.w	800c6c0 <memcmp>
 800af24:	4610      	mov	r0, r2
 800af26:	4770      	bx	lr

0800af28 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 800af28:	4613      	mov	r3, r2
 800af2a:	460a      	mov	r2, r1
 800af2c:	b111      	cbz	r1, 800af34 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 800af2e:	7819      	ldrb	r1, [r3, #0]
 800af30:	f7f5 b96e 	b.w	8000210 <memchr>
 800af34:	4608      	mov	r0, r1
 800af36:	4770      	bx	lr

0800af38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800af38:	b508      	push	{r3, lr}
 800af3a:	680b      	ldr	r3, [r1, #0]
 800af3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af40:	d302      	bcc.n	800af48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800af42:	480d      	ldr	r0, [pc, #52]	; (800af78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800af44:	f7ff ff31 	bl	800adaa <_ZSt20__throw_length_errorPKc>
 800af48:	4293      	cmp	r3, r2
 800af4a:	d90b      	bls.n	800af64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800af4c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800af50:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800af54:	d206      	bcs.n	800af64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800af56:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800af5a:	bf2a      	itet	cs
 800af5c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800af60:	6008      	strcc	r0, [r1, #0]
 800af62:	600b      	strcs	r3, [r1, #0]
 800af64:	6808      	ldr	r0, [r1, #0]
 800af66:	3001      	adds	r0, #1
 800af68:	d501      	bpl.n	800af6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800af6a:	f7ff ff15 	bl	800ad98 <_ZSt17__throw_bad_allocv>
 800af6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800af72:	f000 ba87 	b.w	800b484 <_Znwj>
 800af76:	bf00      	nop
 800af78:	0800f780 	.word	0x0800f780

0800af7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800af7c:	f850 3b08 	ldr.w	r3, [r0], #8
 800af80:	4283      	cmp	r3, r0
 800af82:	d002      	beq.n	800af8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800af84:	4618      	mov	r0, r3
 800af86:	f000 ba7b 	b.w	800b480 <_ZdlPv>
 800af8a:	4770      	bx	lr

0800af8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800af8c:	b508      	push	{r3, lr}
 800af8e:	4603      	mov	r3, r0
 800af90:	4608      	mov	r0, r1
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	4298      	cmp	r0, r3
 800af96:	4611      	mov	r1, r2
 800af98:	d903      	bls.n	800afa2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 800af9a:	4602      	mov	r2, r0
 800af9c:	4801      	ldr	r0, [pc, #4]	; (800afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800af9e:	f7ff ff0a 	bl	800adb6 <_ZSt24__throw_out_of_range_fmtPKcz>
 800afa2:	bd08      	pop	{r3, pc}
 800afa4:	0800f798 	.word	0x0800f798

0800afa8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800afa8:	6840      	ldr	r0, [r0, #4]
 800afaa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800afae:	3901      	subs	r1, #1
 800afb0:	1a09      	subs	r1, r1, r0
 800afb2:	4291      	cmp	r1, r2
 800afb4:	b508      	push	{r3, lr}
 800afb6:	d202      	bcs.n	800afbe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff fef6 	bl	800adaa <_ZSt20__throw_length_errorPKc>
 800afbe:	bd08      	pop	{r3, pc}

0800afc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800afc0:	2a01      	cmp	r2, #1
 800afc2:	b410      	push	{r4}
 800afc4:	d104      	bne.n	800afd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800afc6:	780a      	ldrb	r2, [r1, #0]
 800afc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afcc:	7002      	strb	r2, [r0, #0]
 800afce:	4770      	bx	lr
 800afd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afd4:	f7ff bf9f 	b.w	800af16 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800afd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800afd8:	2a01      	cmp	r2, #1
 800afda:	b430      	push	{r4, r5}
 800afdc:	d103      	bne.n	800afe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800afde:	780b      	ldrb	r3, [r1, #0]
 800afe0:	7003      	strb	r3, [r0, #0]
 800afe2:	bc30      	pop	{r4, r5}
 800afe4:	4770      	bx	lr
 800afe6:	2a00      	cmp	r2, #0
 800afe8:	d0fb      	beq.n	800afe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800afea:	bc30      	pop	{r4, r5}
 800afec:	f001 bb86 	b.w	800c6fc <memmove>

0800aff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800aff0:	460b      	mov	r3, r1
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	b410      	push	{r4}
 800aff6:	4611      	mov	r1, r2
 800aff8:	4604      	mov	r4, r0
 800affa:	d103      	bne.n	800b004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800affc:	7022      	strb	r2, [r4, #0]
 800affe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	2b00      	cmp	r3, #0
 800b006:	d0fa      	beq.n	800affe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800b008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b00c:	461a      	mov	r2, r3
 800b00e:	f001 bb8f 	b.w	800c730 <memset>

0800b012 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800b012:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b014:	290f      	cmp	r1, #15
 800b016:	4604      	mov	r4, r0
 800b018:	9101      	str	r1, [sp, #4]
 800b01a:	4615      	mov	r5, r2
 800b01c:	d906      	bls.n	800b02c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 800b01e:	2200      	movs	r2, #0
 800b020:	a901      	add	r1, sp, #4
 800b022:	f7ff ff89 	bl	800af38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b026:	9b01      	ldr	r3, [sp, #4]
 800b028:	6020      	str	r0, [r4, #0]
 800b02a:	60a3      	str	r3, [r4, #8]
 800b02c:	9901      	ldr	r1, [sp, #4]
 800b02e:	b119      	cbz	r1, 800b038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 800b030:	6820      	ldr	r0, [r4, #0]
 800b032:	462a      	mov	r2, r5
 800b034:	f7ff ffdc 	bl	800aff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800b038:	9b01      	ldr	r3, [sp, #4]
 800b03a:	6822      	ldr	r2, [r4, #0]
 800b03c:	6063      	str	r3, [r4, #4]
 800b03e:	2100      	movs	r1, #0
 800b040:	54d1      	strb	r1, [r2, r3]
 800b042:	b003      	add	sp, #12
 800b044:	bd30      	pop	{r4, r5, pc}

0800b046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800b046:	b508      	push	{r3, lr}
 800b048:	1a52      	subs	r2, r2, r1
 800b04a:	f7ff ffb9 	bl	800afc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b04e:	bd08      	pop	{r3, pc}

0800b050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b050:	b508      	push	{r3, lr}
 800b052:	1a52      	subs	r2, r2, r1
 800b054:	f7ff ffb4 	bl	800afc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b058:	bd08      	pop	{r3, pc}

0800b05a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800b05a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b05e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b060:	461f      	mov	r7, r3
 800b062:	6843      	ldr	r3, [r0, #4]
 800b064:	eb01 0802 	add.w	r8, r1, r2
 800b068:	1ab2      	subs	r2, r6, r2
 800b06a:	441a      	add	r2, r3
 800b06c:	eba3 0908 	sub.w	r9, r3, r8
 800b070:	4603      	mov	r3, r0
 800b072:	9201      	str	r2, [sp, #4]
 800b074:	f853 2b08 	ldr.w	r2, [r3], #8
 800b078:	429a      	cmp	r2, r3
 800b07a:	bf18      	it	ne
 800b07c:	6882      	ldrne	r2, [r0, #8]
 800b07e:	460d      	mov	r5, r1
 800b080:	bf08      	it	eq
 800b082:	220f      	moveq	r2, #15
 800b084:	a901      	add	r1, sp, #4
 800b086:	4604      	mov	r4, r0
 800b088:	f7ff ff56 	bl	800af38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b08c:	4682      	mov	sl, r0
 800b08e:	b11d      	cbz	r5, 800b098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800b090:	6821      	ldr	r1, [r4, #0]
 800b092:	462a      	mov	r2, r5
 800b094:	f7ff ff94 	bl	800afc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b098:	b137      	cbz	r7, 800b0a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b09a:	b12e      	cbz	r6, 800b0a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b09c:	4632      	mov	r2, r6
 800b09e:	4639      	mov	r1, r7
 800b0a0:	eb0a 0005 	add.w	r0, sl, r5
 800b0a4:	f7ff ff8c 	bl	800afc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b0a8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ac:	d007      	beq.n	800b0be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800b0ae:	6821      	ldr	r1, [r4, #0]
 800b0b0:	4435      	add	r5, r6
 800b0b2:	464a      	mov	r2, r9
 800b0b4:	4441      	add	r1, r8
 800b0b6:	eb0a 0005 	add.w	r0, sl, r5
 800b0ba:	f7ff ff81 	bl	800afc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f7ff ff5c 	bl	800af7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b0c4:	9b01      	ldr	r3, [sp, #4]
 800b0c6:	f8c4 a000 	str.w	sl, [r4]
 800b0ca:	60a3      	str	r3, [r4, #8]
 800b0cc:	b002      	add	sp, #8
 800b0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b0d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 800b0d2:	b538      	push	{r3, r4, r5, lr}
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	4615      	mov	r5, r2
 800b0d8:	4608      	mov	r0, r1
 800b0da:	4411      	add	r1, r2
 800b0dc:	6862      	ldr	r2, [r4, #4]
 800b0de:	1a52      	subs	r2, r2, r1
 800b0e0:	d005      	beq.n	800b0ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 800b0e2:	b125      	cbz	r5, 800b0ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	4419      	add	r1, r3
 800b0e8:	4418      	add	r0, r3
 800b0ea:	f7ff ff75 	bl	800afd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800b0ee:	6862      	ldr	r2, [r4, #4]
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	1b55      	subs	r5, r2, r5
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	6065      	str	r5, [r4, #4]
 800b0f8:	555a      	strb	r2, [r3, r5]
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}

0800b0fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800b0fc:	f100 0208 	add.w	r2, r0, #8
 800b100:	6002      	str	r2, [r0, #0]
 800b102:	2200      	movs	r2, #0
 800b104:	6042      	str	r2, [r0, #4]
 800b106:	7202      	strb	r2, [r0, #8]
 800b108:	4770      	bx	lr

0800b10a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 800b10a:	b510      	push	{r4, lr}
 800b10c:	f100 0308 	add.w	r3, r0, #8
 800b110:	4604      	mov	r4, r0
 800b112:	6003      	str	r3, [r0, #0]
 800b114:	f7ff ff7d 	bl	800b012 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 800b118:	4620      	mov	r0, r4
 800b11a:	bd10      	pop	{r4, pc}

0800b11c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b11c:	b510      	push	{r4, lr}
 800b11e:	4604      	mov	r4, r0
 800b120:	f7ff ff2c 	bl	800af7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b124:	4620      	mov	r0, r4
 800b126:	bd10      	pop	{r4, pc}

0800b128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	460d      	mov	r5, r1
 800b12c:	f851 3b08 	ldr.w	r3, [r1], #8
 800b130:	686a      	ldr	r2, [r5, #4]
 800b132:	4299      	cmp	r1, r3
 800b134:	4604      	mov	r4, r0
 800b136:	6800      	ldr	r0, [r0, #0]
 800b138:	d10d      	bne.n	800b156 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 800b13a:	b10a      	cbz	r2, 800b140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 800b13c:	f7ff ff40 	bl	800afc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b140:	686b      	ldr	r3, [r5, #4]
 800b142:	6822      	ldr	r2, [r4, #0]
 800b144:	6063      	str	r3, [r4, #4]
 800b146:	2100      	movs	r1, #0
 800b148:	54d1      	strb	r1, [r2, r3]
 800b14a:	682a      	ldr	r2, [r5, #0]
 800b14c:	2300      	movs	r3, #0
 800b14e:	606b      	str	r3, [r5, #4]
 800b150:	7013      	strb	r3, [r2, #0]
 800b152:	4620      	mov	r0, r4
 800b154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b156:	e9c4 3200 	strd	r3, r2, [r4]
 800b15a:	f104 0708 	add.w	r7, r4, #8
 800b15e:	42b8      	cmp	r0, r7
 800b160:	68ab      	ldr	r3, [r5, #8]
 800b162:	bf18      	it	ne
 800b164:	68a6      	ldrne	r6, [r4, #8]
 800b166:	60a3      	str	r3, [r4, #8]
 800b168:	bf08      	it	eq
 800b16a:	2000      	moveq	r0, #0
 800b16c:	b110      	cbz	r0, 800b174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 800b16e:	6028      	str	r0, [r5, #0]
 800b170:	60ae      	str	r6, [r5, #8]
 800b172:	e7ea      	b.n	800b14a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 800b174:	6029      	str	r1, [r5, #0]
 800b176:	e7e8      	b.n	800b14a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

0800b178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 800b178:	6800      	ldr	r0, [r0, #0]
 800b17a:	4770      	bx	lr

0800b17c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800b17c:	6840      	ldr	r0, [r0, #4]
 800b17e:	4770      	bx	lr

0800b180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800b180:	6840      	ldr	r0, [r0, #4]
 800b182:	4770      	bx	lr

0800b184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800b184:	6800      	ldr	r0, [r0, #0]
 800b186:	4408      	add	r0, r1
 800b188:	4770      	bx	lr

0800b18a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800b18a:	4603      	mov	r3, r0
 800b18c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b18e:	f853 2b08 	ldr.w	r2, [r3], #8
 800b192:	6846      	ldr	r6, [r0, #4]
 800b194:	429a      	cmp	r2, r3
 800b196:	bf18      	it	ne
 800b198:	6883      	ldrne	r3, [r0, #8]
 800b19a:	f106 0501 	add.w	r5, r6, #1
 800b19e:	bf08      	it	eq
 800b1a0:	230f      	moveq	r3, #15
 800b1a2:	429d      	cmp	r5, r3
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	460f      	mov	r7, r1
 800b1a8:	d906      	bls.n	800b1b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	f7ff ff51 	bl	800b05a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	559f      	strb	r7, [r3, r6]
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	6065      	str	r5, [r4, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	555a      	strb	r2, [r3, r5]
 800b1c4:	b003      	add	sp, #12
 800b1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	f7ff ffdd 	bl	800b18a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	bd10      	pop	{r4, pc}

0800b1d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	4616      	mov	r6, r2
 800b1d8:	4a0c      	ldr	r2, [pc, #48]	; (800b20c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x38>)
 800b1da:	4604      	mov	r4, r0
 800b1dc:	460d      	mov	r5, r1
 800b1de:	f7ff fed5 	bl	800af8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800b1e2:	1c73      	adds	r3, r6, #1
 800b1e4:	d105      	bne.n	800b1f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1e>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	6065      	str	r5, [r4, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	555a      	strb	r2, [r3, r5]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	bd70      	pop	{r4, r5, r6, pc}
 800b1f2:	2e00      	cmp	r6, #0
 800b1f4:	d0fb      	beq.n	800b1ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 800b1f6:	6862      	ldr	r2, [r4, #4]
 800b1f8:	1b52      	subs	r2, r2, r5
 800b1fa:	42b2      	cmp	r2, r6
 800b1fc:	bf28      	it	cs
 800b1fe:	4632      	movcs	r2, r6
 800b200:	4629      	mov	r1, r5
 800b202:	4620      	mov	r0, r4
 800b204:	f7ff ff65 	bl	800b0d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 800b208:	e7f1      	b.n	800b1ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 800b20a:	bf00      	nop
 800b20c:	0800f7cf 	.word	0x0800f7cf

0800b210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	6803      	ldr	r3, [r0, #0]
 800b214:	6846      	ldr	r6, [r0, #4]
 800b216:	1acd      	subs	r5, r1, r3
 800b218:	4433      	add	r3, r6
 800b21a:	429a      	cmp	r2, r3
 800b21c:	4604      	mov	r4, r0
 800b21e:	d105      	bne.n	800b22c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_+0x1c>
 800b220:	2300      	movs	r3, #0
 800b222:	6045      	str	r5, [r0, #4]
 800b224:	700b      	strb	r3, [r1, #0]
 800b226:	6820      	ldr	r0, [r4, #0]
 800b228:	4428      	add	r0, r5
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
 800b22c:	1a52      	subs	r2, r2, r1
 800b22e:	4629      	mov	r1, r5
 800b230:	f7ff ff4f 	bl	800b0d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 800b234:	e7f7      	b.n	800b226 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_+0x16>

0800b236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800b236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b238:	4604      	mov	r4, r0
 800b23a:	4623      	mov	r3, r4
 800b23c:	6840      	ldr	r0, [r0, #4]
 800b23e:	f853 6b08 	ldr.w	r6, [r3], #8
 800b242:	429e      	cmp	r6, r3
 800b244:	bf18      	it	ne
 800b246:	68a3      	ldrne	r3, [r4, #8]
 800b248:	eb00 0502 	add.w	r5, r0, r2
 800b24c:	bf08      	it	eq
 800b24e:	230f      	moveq	r3, #15
 800b250:	429d      	cmp	r5, r3
 800b252:	d80a      	bhi.n	800b26a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800b254:	b112      	cbz	r2, 800b25c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800b256:	4430      	add	r0, r6
 800b258:	f7ff feb2 	bl	800afc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	6065      	str	r5, [r4, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	4620      	mov	r0, r4
 800b264:	555a      	strb	r2, [r3, r5]
 800b266:	b002      	add	sp, #8
 800b268:	bd70      	pop	{r4, r5, r6, pc}
 800b26a:	9200      	str	r2, [sp, #0]
 800b26c:	460b      	mov	r3, r1
 800b26e:	2200      	movs	r2, #0
 800b270:	4601      	mov	r1, r0
 800b272:	4620      	mov	r0, r4
 800b274:	f7ff fef1 	bl	800b05a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b278:	e7f0      	b.n	800b25c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800b27a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800b27a:	b508      	push	{r3, lr}
 800b27c:	e9d1 1200 	ldrd	r1, r2, [r1]
 800b280:	f7ff ffd9 	bl	800b236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b284:	bd08      	pop	{r3, pc}

0800b286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 800b286:	b508      	push	{r3, lr}
 800b288:	f7ff fff7 	bl	800b27a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800b28c:	bd08      	pop	{r3, pc}
	...

0800b290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800b290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b292:	4604      	mov	r4, r0
 800b294:	4608      	mov	r0, r1
 800b296:	460d      	mov	r5, r1
 800b298:	f7f5 f80a 	bl	80002b0 <strlen>
 800b29c:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800b29e:	9001      	str	r0, [sp, #4]
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f7ff fe7f 	bl	800afa8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b2aa:	9a01      	ldr	r2, [sp, #4]
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f7ff ffc1 	bl	800b236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b2b4:	b003      	add	sp, #12
 800b2b6:	bd30      	pop	{r4, r5, pc}
 800b2b8:	0800f7e3 	.word	0x0800f7e3

0800b2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 800b2bc:	b508      	push	{r3, lr}
 800b2be:	f7ff ffe7 	bl	800b290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800b2c2:	bd08      	pop	{r3, pc}

0800b2c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800b2c4:	6800      	ldr	r0, [r0, #0]
 800b2c6:	4770      	bx	lr

0800b2c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 800b2c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2cc:	460e      	mov	r6, r1
 800b2ce:	461d      	mov	r5, r3
 800b2d0:	6841      	ldr	r1, [r0, #4]
 800b2d2:	b923      	cbnz	r3, 800b2de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
 800b2d4:	4291      	cmp	r1, r2
 800b2d6:	d221      	bcs.n	800b31c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
 800b2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2dc:	e01e      	b.n	800b31c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
 800b2de:	4291      	cmp	r1, r2
 800b2e0:	d9fa      	bls.n	800b2d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 800b2e2:	f8d0 8000 	ldr.w	r8, [r0]
 800b2e6:	7833      	ldrb	r3, [r6, #0]
 800b2e8:	f88d 3007 	strb.w	r3, [sp, #7]
 800b2ec:	eb08 0701 	add.w	r7, r8, r1
 800b2f0:	eb08 0002 	add.w	r0, r8, r2
 800b2f4:	1a89      	subs	r1, r1, r2
 800b2f6:	f1c5 0901 	rsb	r9, r5, #1
 800b2fa:	42a9      	cmp	r1, r5
 800b2fc:	d3ec      	bcc.n	800b2d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 800b2fe:	f10d 0207 	add.w	r2, sp, #7
 800b302:	4449      	add	r1, r9
 800b304:	f7ff fe10 	bl	800af28 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 800b308:	4604      	mov	r4, r0
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d0e4      	beq.n	800b2d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 800b30e:	462a      	mov	r2, r5
 800b310:	4631      	mov	r1, r6
 800b312:	f7ff fe04 	bl	800af1e <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800b316:	b928      	cbnz	r0, 800b324 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
 800b318:	eba4 0208 	sub.w	r2, r4, r8
 800b31c:	4610      	mov	r0, r2
 800b31e:	b003      	add	sp, #12
 800b320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b324:	1c60      	adds	r0, r4, #1
 800b326:	1a39      	subs	r1, r7, r0
 800b328:	e7e7      	b.n	800b2fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

0800b32a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
 800b32a:	b508      	push	{r3, lr}
 800b32c:	e9d1 1300 	ldrd	r1, r3, [r1]
 800b330:	f7ff ffca 	bl	800b2c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 800b334:	bd08      	pop	{r3, pc}
	...

0800b338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800b338:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b33a:	4604      	mov	r4, r0
 800b33c:	4616      	mov	r6, r2
 800b33e:	460d      	mov	r5, r1
 800b340:	b919      	cbnz	r1, 800b34a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800b342:	b112      	cbz	r2, 800b34a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800b344:	480d      	ldr	r0, [pc, #52]	; (800b37c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800b346:	f7ff fd2a 	bl	800ad9e <_ZSt19__throw_logic_errorPKc>
 800b34a:	1b73      	subs	r3, r6, r5
 800b34c:	2b0f      	cmp	r3, #15
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	d907      	bls.n	800b362 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800b352:	2200      	movs	r2, #0
 800b354:	a901      	add	r1, sp, #4
 800b356:	4620      	mov	r0, r4
 800b358:	f7ff fdee 	bl	800af38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b35c:	9b01      	ldr	r3, [sp, #4]
 800b35e:	6020      	str	r0, [r4, #0]
 800b360:	60a3      	str	r3, [r4, #8]
 800b362:	4632      	mov	r2, r6
 800b364:	4629      	mov	r1, r5
 800b366:	6820      	ldr	r0, [r4, #0]
 800b368:	f7ff fe6d 	bl	800b046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800b36c:	9b01      	ldr	r3, [sp, #4]
 800b36e:	6822      	ldr	r2, [r4, #0]
 800b370:	6063      	str	r3, [r4, #4]
 800b372:	2100      	movs	r1, #0
 800b374:	54d1      	strb	r1, [r2, r3]
 800b376:	b002      	add	sp, #8
 800b378:	bd70      	pop	{r4, r5, r6, pc}
 800b37a:	bf00      	nop
 800b37c:	0800f7f8 	.word	0x0800f7f8

0800b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	f100 0308 	add.w	r3, r0, #8
 800b386:	6003      	str	r3, [r0, #0]
 800b388:	e9d1 5200 	ldrd	r5, r2, [r1]
 800b38c:	4604      	mov	r4, r0
 800b38e:	f04f 0300 	mov.w	r3, #0
 800b392:	442a      	add	r2, r5
 800b394:	4629      	mov	r1, r5
 800b396:	f7ff ffcf 	bl	800b338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800b39a:	4620      	mov	r0, r4
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b3a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800b3a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4616      	mov	r6, r2
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	b919      	cbnz	r1, 800b3b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b3aa:	b112      	cbz	r2, 800b3b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b3ac:	480d      	ldr	r0, [pc, #52]	; (800b3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800b3ae:	f7ff fcf6 	bl	800ad9e <_ZSt19__throw_logic_errorPKc>
 800b3b2:	1b73      	subs	r3, r6, r5
 800b3b4:	2b0f      	cmp	r3, #15
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	d907      	bls.n	800b3ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	a901      	add	r1, sp, #4
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7ff fdba 	bl	800af38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b3c4:	9b01      	ldr	r3, [sp, #4]
 800b3c6:	6020      	str	r0, [r4, #0]
 800b3c8:	60a3      	str	r3, [r4, #8]
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	6820      	ldr	r0, [r4, #0]
 800b3d0:	f7ff fe3e 	bl	800b050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800b3d4:	9b01      	ldr	r3, [sp, #4]
 800b3d6:	6822      	ldr	r2, [r4, #0]
 800b3d8:	6063      	str	r3, [r4, #4]
 800b3da:	2100      	movs	r1, #0
 800b3dc:	54d1      	strb	r1, [r2, r3]
 800b3de:	b002      	add	sp, #8
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0800f7f8 	.word	0x0800f7f8

0800b3e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	f100 0308 	add.w	r3, r0, #8
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	6003      	str	r3, [r0, #0]
 800b3f2:	460d      	mov	r5, r1
 800b3f4:	b159      	cbz	r1, 800b40e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800b3f6:	4608      	mov	r0, r1
 800b3f8:	f7f4 ff5a 	bl	80002b0 <strlen>
 800b3fc:	182a      	adds	r2, r5, r0
 800b3fe:	4620      	mov	r0, r4
 800b400:	f04f 0300 	mov.w	r3, #0
 800b404:	4629      	mov	r1, r5
 800b406:	f7ff ffcb 	bl	800b3a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800b40a:	4620      	mov	r0, r4
 800b40c:	bd38      	pop	{r3, r4, r5, pc}
 800b40e:	2201      	movs	r2, #1
 800b410:	e7f5      	b.n	800b3fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

0800b414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 800b414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b418:	460d      	mov	r5, r1
 800b41a:	4617      	mov	r7, r2
 800b41c:	4698      	mov	r8, r3
 800b41e:	f100 0308 	add.w	r3, r0, #8
 800b422:	4604      	mov	r4, r0
 800b424:	6003      	str	r3, [r0, #0]
 800b426:	4639      	mov	r1, r7
 800b428:	4a0a      	ldr	r2, [pc, #40]	; (800b454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 800b42a:	4628      	mov	r0, r5
 800b42c:	f7ff fdae 	bl	800af8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800b430:	686a      	ldr	r2, [r5, #4]
 800b432:	682e      	ldr	r6, [r5, #0]
 800b434:	1bd7      	subs	r7, r2, r7
 800b436:	1831      	adds	r1, r6, r0
 800b438:	f04f 0300 	mov.w	r3, #0
 800b43c:	4620      	mov	r0, r4
 800b43e:	4547      	cmp	r7, r8
 800b440:	bf94      	ite	ls
 800b442:	19ca      	addls	r2, r1, r7
 800b444:	eb01 0208 	addhi.w	r2, r1, r8
 800b448:	f7ff ffaa 	bl	800b3a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800b44c:	4620      	mov	r0, r4
 800b44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b452:	bf00      	nop
 800b454:	0800f822 	.word	0x0800f822

0800b458 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 800b458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b45a:	460d      	mov	r5, r1
 800b45c:	4604      	mov	r4, r0
 800b45e:	4611      	mov	r1, r2
 800b460:	4628      	mov	r0, r5
 800b462:	4a06      	ldr	r2, [pc, #24]	; (800b47c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	f7ff fd91 	bl	800af8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800b46a:	9b01      	ldr	r3, [sp, #4]
 800b46c:	4602      	mov	r2, r0
 800b46e:	4629      	mov	r1, r5
 800b470:	4620      	mov	r0, r4
 800b472:	f7ff ffcf 	bl	800b414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 800b476:	4620      	mov	r0, r4
 800b478:	b003      	add	sp, #12
 800b47a:	bd30      	pop	{r4, r5, pc}
 800b47c:	0800f83d 	.word	0x0800f83d

0800b480 <_ZdlPv>:
 800b480:	f001 b916 	b.w	800c6b0 <free>

0800b484 <_Znwj>:
 800b484:	2801      	cmp	r0, #1
 800b486:	bf38      	it	cc
 800b488:	2001      	movcc	r0, #1
 800b48a:	b510      	push	{r4, lr}
 800b48c:	4604      	mov	r4, r0
 800b48e:	4620      	mov	r0, r4
 800b490:	f001 f906 	bl	800c6a0 <malloc>
 800b494:	b930      	cbnz	r0, 800b4a4 <_Znwj+0x20>
 800b496:	f000 f807 	bl	800b4a8 <_ZSt15get_new_handlerv>
 800b49a:	b908      	cbnz	r0, 800b4a0 <_Znwj+0x1c>
 800b49c:	f001 f8ce 	bl	800c63c <abort>
 800b4a0:	4780      	blx	r0
 800b4a2:	e7f4      	b.n	800b48e <_Znwj+0xa>
 800b4a4:	bd10      	pop	{r4, pc}
	...

0800b4a8 <_ZSt15get_new_handlerv>:
 800b4a8:	4b02      	ldr	r3, [pc, #8]	; (800b4b4 <_ZSt15get_new_handlerv+0xc>)
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	f3bf 8f5b 	dmb	ish
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop
 800b4b4:	20000a2c 	.word	0x20000a2c

0800b4b8 <cos>:
 800b4b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4ba:	ec53 2b10 	vmov	r2, r3, d0
 800b4be:	4826      	ldr	r0, [pc, #152]	; (800b558 <cos+0xa0>)
 800b4c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b4c4:	4281      	cmp	r1, r0
 800b4c6:	dc06      	bgt.n	800b4d6 <cos+0x1e>
 800b4c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b550 <cos+0x98>
 800b4cc:	b005      	add	sp, #20
 800b4ce:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4d2:	f000 bacd 	b.w	800ba70 <__kernel_cos>
 800b4d6:	4821      	ldr	r0, [pc, #132]	; (800b55c <cos+0xa4>)
 800b4d8:	4281      	cmp	r1, r0
 800b4da:	dd09      	ble.n	800b4f0 <cos+0x38>
 800b4dc:	ee10 0a10 	vmov	r0, s0
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f7f4 fef1 	bl	80002c8 <__aeabi_dsub>
 800b4e6:	ec41 0b10 	vmov	d0, r0, r1
 800b4ea:	b005      	add	sp, #20
 800b4ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4f0:	4668      	mov	r0, sp
 800b4f2:	f000 f8b1 	bl	800b658 <__ieee754_rem_pio2>
 800b4f6:	f000 0003 	and.w	r0, r0, #3
 800b4fa:	2801      	cmp	r0, #1
 800b4fc:	d00b      	beq.n	800b516 <cos+0x5e>
 800b4fe:	2802      	cmp	r0, #2
 800b500:	d016      	beq.n	800b530 <cos+0x78>
 800b502:	b9e0      	cbnz	r0, 800b53e <cos+0x86>
 800b504:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b508:	ed9d 0b00 	vldr	d0, [sp]
 800b50c:	f000 fab0 	bl	800ba70 <__kernel_cos>
 800b510:	ec51 0b10 	vmov	r0, r1, d0
 800b514:	e7e7      	b.n	800b4e6 <cos+0x2e>
 800b516:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b51a:	ed9d 0b00 	vldr	d0, [sp]
 800b51e:	f000 febf 	bl	800c2a0 <__kernel_sin>
 800b522:	ec53 2b10 	vmov	r2, r3, d0
 800b526:	ee10 0a10 	vmov	r0, s0
 800b52a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b52e:	e7da      	b.n	800b4e6 <cos+0x2e>
 800b530:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b534:	ed9d 0b00 	vldr	d0, [sp]
 800b538:	f000 fa9a 	bl	800ba70 <__kernel_cos>
 800b53c:	e7f1      	b.n	800b522 <cos+0x6a>
 800b53e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b542:	ed9d 0b00 	vldr	d0, [sp]
 800b546:	2001      	movs	r0, #1
 800b548:	f000 feaa 	bl	800c2a0 <__kernel_sin>
 800b54c:	e7e0      	b.n	800b510 <cos+0x58>
 800b54e:	bf00      	nop
	...
 800b558:	3fe921fb 	.word	0x3fe921fb
 800b55c:	7fefffff 	.word	0x7fefffff

0800b560 <sin>:
 800b560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b562:	ec53 2b10 	vmov	r2, r3, d0
 800b566:	4828      	ldr	r0, [pc, #160]	; (800b608 <sin+0xa8>)
 800b568:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b56c:	4281      	cmp	r1, r0
 800b56e:	dc07      	bgt.n	800b580 <sin+0x20>
 800b570:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b600 <sin+0xa0>
 800b574:	2000      	movs	r0, #0
 800b576:	b005      	add	sp, #20
 800b578:	f85d eb04 	ldr.w	lr, [sp], #4
 800b57c:	f000 be90 	b.w	800c2a0 <__kernel_sin>
 800b580:	4822      	ldr	r0, [pc, #136]	; (800b60c <sin+0xac>)
 800b582:	4281      	cmp	r1, r0
 800b584:	dd09      	ble.n	800b59a <sin+0x3a>
 800b586:	ee10 0a10 	vmov	r0, s0
 800b58a:	4619      	mov	r1, r3
 800b58c:	f7f4 fe9c 	bl	80002c8 <__aeabi_dsub>
 800b590:	ec41 0b10 	vmov	d0, r0, r1
 800b594:	b005      	add	sp, #20
 800b596:	f85d fb04 	ldr.w	pc, [sp], #4
 800b59a:	4668      	mov	r0, sp
 800b59c:	f000 f85c 	bl	800b658 <__ieee754_rem_pio2>
 800b5a0:	f000 0003 	and.w	r0, r0, #3
 800b5a4:	2801      	cmp	r0, #1
 800b5a6:	d00c      	beq.n	800b5c2 <sin+0x62>
 800b5a8:	2802      	cmp	r0, #2
 800b5aa:	d011      	beq.n	800b5d0 <sin+0x70>
 800b5ac:	b9f0      	cbnz	r0, 800b5ec <sin+0x8c>
 800b5ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5b2:	ed9d 0b00 	vldr	d0, [sp]
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	f000 fe72 	bl	800c2a0 <__kernel_sin>
 800b5bc:	ec51 0b10 	vmov	r0, r1, d0
 800b5c0:	e7e6      	b.n	800b590 <sin+0x30>
 800b5c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5c6:	ed9d 0b00 	vldr	d0, [sp]
 800b5ca:	f000 fa51 	bl	800ba70 <__kernel_cos>
 800b5ce:	e7f5      	b.n	800b5bc <sin+0x5c>
 800b5d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5d4:	ed9d 0b00 	vldr	d0, [sp]
 800b5d8:	2001      	movs	r0, #1
 800b5da:	f000 fe61 	bl	800c2a0 <__kernel_sin>
 800b5de:	ec53 2b10 	vmov	r2, r3, d0
 800b5e2:	ee10 0a10 	vmov	r0, s0
 800b5e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b5ea:	e7d1      	b.n	800b590 <sin+0x30>
 800b5ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5f0:	ed9d 0b00 	vldr	d0, [sp]
 800b5f4:	f000 fa3c 	bl	800ba70 <__kernel_cos>
 800b5f8:	e7f1      	b.n	800b5de <sin+0x7e>
 800b5fa:	bf00      	nop
 800b5fc:	f3af 8000 	nop.w
	...
 800b608:	3fe921fb 	.word	0x3fe921fb
 800b60c:	7fefffff 	.word	0x7fefffff

0800b610 <roundf>:
 800b610:	ee10 0a10 	vmov	r0, s0
 800b614:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b618:	3a7f      	subs	r2, #127	; 0x7f
 800b61a:	2a16      	cmp	r2, #22
 800b61c:	dc15      	bgt.n	800b64a <roundf+0x3a>
 800b61e:	2a00      	cmp	r2, #0
 800b620:	da08      	bge.n	800b634 <roundf+0x24>
 800b622:	3201      	adds	r2, #1
 800b624:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b628:	d101      	bne.n	800b62e <roundf+0x1e>
 800b62a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b62e:	ee00 3a10 	vmov	s0, r3
 800b632:	4770      	bx	lr
 800b634:	4907      	ldr	r1, [pc, #28]	; (800b654 <roundf+0x44>)
 800b636:	4111      	asrs	r1, r2
 800b638:	4208      	tst	r0, r1
 800b63a:	d0fa      	beq.n	800b632 <roundf+0x22>
 800b63c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b640:	4113      	asrs	r3, r2
 800b642:	4403      	add	r3, r0
 800b644:	ea23 0301 	bic.w	r3, r3, r1
 800b648:	e7f1      	b.n	800b62e <roundf+0x1e>
 800b64a:	2a80      	cmp	r2, #128	; 0x80
 800b64c:	d1f1      	bne.n	800b632 <roundf+0x22>
 800b64e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b652:	4770      	bx	lr
 800b654:	007fffff 	.word	0x007fffff

0800b658 <__ieee754_rem_pio2>:
 800b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	ed2d 8b02 	vpush	{d8}
 800b660:	ec55 4b10 	vmov	r4, r5, d0
 800b664:	4bca      	ldr	r3, [pc, #808]	; (800b990 <__ieee754_rem_pio2+0x338>)
 800b666:	b08b      	sub	sp, #44	; 0x2c
 800b668:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b66c:	4598      	cmp	r8, r3
 800b66e:	4682      	mov	sl, r0
 800b670:	9502      	str	r5, [sp, #8]
 800b672:	dc08      	bgt.n	800b686 <__ieee754_rem_pio2+0x2e>
 800b674:	2200      	movs	r2, #0
 800b676:	2300      	movs	r3, #0
 800b678:	ed80 0b00 	vstr	d0, [r0]
 800b67c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b680:	f04f 0b00 	mov.w	fp, #0
 800b684:	e028      	b.n	800b6d8 <__ieee754_rem_pio2+0x80>
 800b686:	4bc3      	ldr	r3, [pc, #780]	; (800b994 <__ieee754_rem_pio2+0x33c>)
 800b688:	4598      	cmp	r8, r3
 800b68a:	dc78      	bgt.n	800b77e <__ieee754_rem_pio2+0x126>
 800b68c:	9b02      	ldr	r3, [sp, #8]
 800b68e:	4ec2      	ldr	r6, [pc, #776]	; (800b998 <__ieee754_rem_pio2+0x340>)
 800b690:	2b00      	cmp	r3, #0
 800b692:	ee10 0a10 	vmov	r0, s0
 800b696:	a3b0      	add	r3, pc, #704	; (adr r3, 800b958 <__ieee754_rem_pio2+0x300>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	4629      	mov	r1, r5
 800b69e:	dd39      	ble.n	800b714 <__ieee754_rem_pio2+0xbc>
 800b6a0:	f7f4 fe12 	bl	80002c8 <__aeabi_dsub>
 800b6a4:	45b0      	cmp	r8, r6
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	460d      	mov	r5, r1
 800b6aa:	d01b      	beq.n	800b6e4 <__ieee754_rem_pio2+0x8c>
 800b6ac:	a3ac      	add	r3, pc, #688	; (adr r3, 800b960 <__ieee754_rem_pio2+0x308>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 fe09 	bl	80002c8 <__aeabi_dsub>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	e9ca 2300 	strd	r2, r3, [sl]
 800b6be:	4620      	mov	r0, r4
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	f7f4 fe01 	bl	80002c8 <__aeabi_dsub>
 800b6c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b960 <__ieee754_rem_pio2+0x308>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f7f4 fdfc 	bl	80002c8 <__aeabi_dsub>
 800b6d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6d4:	f04f 0b01 	mov.w	fp, #1
 800b6d8:	4658      	mov	r0, fp
 800b6da:	b00b      	add	sp, #44	; 0x2c
 800b6dc:	ecbd 8b02 	vpop	{d8}
 800b6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b968 <__ieee754_rem_pio2+0x310>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	f7f4 fded 	bl	80002c8 <__aeabi_dsub>
 800b6ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800b970 <__ieee754_rem_pio2+0x318>)
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	460d      	mov	r5, r1
 800b6f8:	f7f4 fde6 	bl	80002c8 <__aeabi_dsub>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	e9ca 2300 	strd	r2, r3, [sl]
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f4 fdde 	bl	80002c8 <__aeabi_dsub>
 800b70c:	a398      	add	r3, pc, #608	; (adr r3, 800b970 <__ieee754_rem_pio2+0x318>)
 800b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b712:	e7db      	b.n	800b6cc <__ieee754_rem_pio2+0x74>
 800b714:	f7f4 fdda 	bl	80002cc <__adddf3>
 800b718:	45b0      	cmp	r8, r6
 800b71a:	4604      	mov	r4, r0
 800b71c:	460d      	mov	r5, r1
 800b71e:	d016      	beq.n	800b74e <__ieee754_rem_pio2+0xf6>
 800b720:	a38f      	add	r3, pc, #572	; (adr r3, 800b960 <__ieee754_rem_pio2+0x308>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 fdd1 	bl	80002cc <__adddf3>
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	e9ca 2300 	strd	r2, r3, [sl]
 800b732:	4620      	mov	r0, r4
 800b734:	4629      	mov	r1, r5
 800b736:	f7f4 fdc7 	bl	80002c8 <__aeabi_dsub>
 800b73a:	a389      	add	r3, pc, #548	; (adr r3, 800b960 <__ieee754_rem_pio2+0x308>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f7f4 fdc4 	bl	80002cc <__adddf3>
 800b744:	f04f 3bff 	mov.w	fp, #4294967295
 800b748:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b74c:	e7c4      	b.n	800b6d8 <__ieee754_rem_pio2+0x80>
 800b74e:	a386      	add	r3, pc, #536	; (adr r3, 800b968 <__ieee754_rem_pio2+0x310>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f7f4 fdba 	bl	80002cc <__adddf3>
 800b758:	a385      	add	r3, pc, #532	; (adr r3, 800b970 <__ieee754_rem_pio2+0x318>)
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	f7f4 fdb3 	bl	80002cc <__adddf3>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	e9ca 2300 	strd	r2, r3, [sl]
 800b76e:	4620      	mov	r0, r4
 800b770:	4629      	mov	r1, r5
 800b772:	f7f4 fda9 	bl	80002c8 <__aeabi_dsub>
 800b776:	a37e      	add	r3, pc, #504	; (adr r3, 800b970 <__ieee754_rem_pio2+0x318>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	e7e0      	b.n	800b740 <__ieee754_rem_pio2+0xe8>
 800b77e:	4b87      	ldr	r3, [pc, #540]	; (800b99c <__ieee754_rem_pio2+0x344>)
 800b780:	4598      	cmp	r8, r3
 800b782:	f300 80d9 	bgt.w	800b938 <__ieee754_rem_pio2+0x2e0>
 800b786:	f000 fe49 	bl	800c41c <fabs>
 800b78a:	ec55 4b10 	vmov	r4, r5, d0
 800b78e:	ee10 0a10 	vmov	r0, s0
 800b792:	a379      	add	r3, pc, #484	; (adr r3, 800b978 <__ieee754_rem_pio2+0x320>)
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f4 ff4d 	bl	8000638 <__aeabi_dmul>
 800b79e:	4b80      	ldr	r3, [pc, #512]	; (800b9a0 <__ieee754_rem_pio2+0x348>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f7f4 fd93 	bl	80002cc <__adddf3>
 800b7a6:	f7f5 f9f7 	bl	8000b98 <__aeabi_d2iz>
 800b7aa:	4683      	mov	fp, r0
 800b7ac:	f7f4 feda 	bl	8000564 <__aeabi_i2d>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	ec43 2b18 	vmov	d8, r2, r3
 800b7b8:	a367      	add	r3, pc, #412	; (adr r3, 800b958 <__ieee754_rem_pio2+0x300>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f7f4 ff3b 	bl	8000638 <__aeabi_dmul>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7f4 fd7d 	bl	80002c8 <__aeabi_dsub>
 800b7ce:	a364      	add	r3, pc, #400	; (adr r3, 800b960 <__ieee754_rem_pio2+0x308>)
 800b7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d4:	4606      	mov	r6, r0
 800b7d6:	460f      	mov	r7, r1
 800b7d8:	ec51 0b18 	vmov	r0, r1, d8
 800b7dc:	f7f4 ff2c 	bl	8000638 <__aeabi_dmul>
 800b7e0:	f1bb 0f1f 	cmp.w	fp, #31
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	460d      	mov	r5, r1
 800b7e8:	dc0d      	bgt.n	800b806 <__ieee754_rem_pio2+0x1ae>
 800b7ea:	4b6e      	ldr	r3, [pc, #440]	; (800b9a4 <__ieee754_rem_pio2+0x34c>)
 800b7ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f4:	4543      	cmp	r3, r8
 800b7f6:	d006      	beq.n	800b806 <__ieee754_rem_pio2+0x1ae>
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	462b      	mov	r3, r5
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	4639      	mov	r1, r7
 800b800:	f7f4 fd62 	bl	80002c8 <__aeabi_dsub>
 800b804:	e00f      	b.n	800b826 <__ieee754_rem_pio2+0x1ce>
 800b806:	462b      	mov	r3, r5
 800b808:	4622      	mov	r2, r4
 800b80a:	4630      	mov	r0, r6
 800b80c:	4639      	mov	r1, r7
 800b80e:	f7f4 fd5b 	bl	80002c8 <__aeabi_dsub>
 800b812:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b816:	9303      	str	r3, [sp, #12]
 800b818:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b81c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b820:	f1b8 0f10 	cmp.w	r8, #16
 800b824:	dc02      	bgt.n	800b82c <__ieee754_rem_pio2+0x1d4>
 800b826:	e9ca 0100 	strd	r0, r1, [sl]
 800b82a:	e039      	b.n	800b8a0 <__ieee754_rem_pio2+0x248>
 800b82c:	a34e      	add	r3, pc, #312	; (adr r3, 800b968 <__ieee754_rem_pio2+0x310>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	ec51 0b18 	vmov	r0, r1, d8
 800b836:	f7f4 feff 	bl	8000638 <__aeabi_dmul>
 800b83a:	4604      	mov	r4, r0
 800b83c:	460d      	mov	r5, r1
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	4630      	mov	r0, r6
 800b844:	4639      	mov	r1, r7
 800b846:	f7f4 fd3f 	bl	80002c8 <__aeabi_dsub>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4680      	mov	r8, r0
 800b850:	4689      	mov	r9, r1
 800b852:	4630      	mov	r0, r6
 800b854:	4639      	mov	r1, r7
 800b856:	f7f4 fd37 	bl	80002c8 <__aeabi_dsub>
 800b85a:	4622      	mov	r2, r4
 800b85c:	462b      	mov	r3, r5
 800b85e:	f7f4 fd33 	bl	80002c8 <__aeabi_dsub>
 800b862:	a343      	add	r3, pc, #268	; (adr r3, 800b970 <__ieee754_rem_pio2+0x318>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	4604      	mov	r4, r0
 800b86a:	460d      	mov	r5, r1
 800b86c:	ec51 0b18 	vmov	r0, r1, d8
 800b870:	f7f4 fee2 	bl	8000638 <__aeabi_dmul>
 800b874:	4622      	mov	r2, r4
 800b876:	462b      	mov	r3, r5
 800b878:	f7f4 fd26 	bl	80002c8 <__aeabi_dsub>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4604      	mov	r4, r0
 800b882:	460d      	mov	r5, r1
 800b884:	4640      	mov	r0, r8
 800b886:	4649      	mov	r1, r9
 800b888:	f7f4 fd1e 	bl	80002c8 <__aeabi_dsub>
 800b88c:	9a03      	ldr	r2, [sp, #12]
 800b88e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	2b31      	cmp	r3, #49	; 0x31
 800b896:	dc24      	bgt.n	800b8e2 <__ieee754_rem_pio2+0x28a>
 800b898:	e9ca 0100 	strd	r0, r1, [sl]
 800b89c:	4646      	mov	r6, r8
 800b89e:	464f      	mov	r7, r9
 800b8a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	4642      	mov	r2, r8
 800b8a8:	464b      	mov	r3, r9
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f4 fd0c 	bl	80002c8 <__aeabi_dsub>
 800b8b0:	462b      	mov	r3, r5
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	f7f4 fd08 	bl	80002c8 <__aeabi_dsub>
 800b8b8:	9b02      	ldr	r3, [sp, #8]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b8c0:	f6bf af0a 	bge.w	800b6d8 <__ieee754_rem_pio2+0x80>
 800b8c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b8c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b8cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8d0:	f8ca 8000 	str.w	r8, [sl]
 800b8d4:	f8ca 0008 	str.w	r0, [sl, #8]
 800b8d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b8dc:	f1cb 0b00 	rsb	fp, fp, #0
 800b8e0:	e6fa      	b.n	800b6d8 <__ieee754_rem_pio2+0x80>
 800b8e2:	a327      	add	r3, pc, #156	; (adr r3, 800b980 <__ieee754_rem_pio2+0x328>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	ec51 0b18 	vmov	r0, r1, d8
 800b8ec:	f7f4 fea4 	bl	8000638 <__aeabi_dmul>
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	f7f4 fce4 	bl	80002c8 <__aeabi_dsub>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	4606      	mov	r6, r0
 800b906:	460f      	mov	r7, r1
 800b908:	4640      	mov	r0, r8
 800b90a:	4649      	mov	r1, r9
 800b90c:	f7f4 fcdc 	bl	80002c8 <__aeabi_dsub>
 800b910:	4622      	mov	r2, r4
 800b912:	462b      	mov	r3, r5
 800b914:	f7f4 fcd8 	bl	80002c8 <__aeabi_dsub>
 800b918:	a31b      	add	r3, pc, #108	; (adr r3, 800b988 <__ieee754_rem_pio2+0x330>)
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	4604      	mov	r4, r0
 800b920:	460d      	mov	r5, r1
 800b922:	ec51 0b18 	vmov	r0, r1, d8
 800b926:	f7f4 fe87 	bl	8000638 <__aeabi_dmul>
 800b92a:	4622      	mov	r2, r4
 800b92c:	462b      	mov	r3, r5
 800b92e:	f7f4 fccb 	bl	80002c8 <__aeabi_dsub>
 800b932:	4604      	mov	r4, r0
 800b934:	460d      	mov	r5, r1
 800b936:	e75f      	b.n	800b7f8 <__ieee754_rem_pio2+0x1a0>
 800b938:	4b1b      	ldr	r3, [pc, #108]	; (800b9a8 <__ieee754_rem_pio2+0x350>)
 800b93a:	4598      	cmp	r8, r3
 800b93c:	dd36      	ble.n	800b9ac <__ieee754_rem_pio2+0x354>
 800b93e:	ee10 2a10 	vmov	r2, s0
 800b942:	462b      	mov	r3, r5
 800b944:	4620      	mov	r0, r4
 800b946:	4629      	mov	r1, r5
 800b948:	f7f4 fcbe 	bl	80002c8 <__aeabi_dsub>
 800b94c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b950:	e9ca 0100 	strd	r0, r1, [sl]
 800b954:	e694      	b.n	800b680 <__ieee754_rem_pio2+0x28>
 800b956:	bf00      	nop
 800b958:	54400000 	.word	0x54400000
 800b95c:	3ff921fb 	.word	0x3ff921fb
 800b960:	1a626331 	.word	0x1a626331
 800b964:	3dd0b461 	.word	0x3dd0b461
 800b968:	1a600000 	.word	0x1a600000
 800b96c:	3dd0b461 	.word	0x3dd0b461
 800b970:	2e037073 	.word	0x2e037073
 800b974:	3ba3198a 	.word	0x3ba3198a
 800b978:	6dc9c883 	.word	0x6dc9c883
 800b97c:	3fe45f30 	.word	0x3fe45f30
 800b980:	2e000000 	.word	0x2e000000
 800b984:	3ba3198a 	.word	0x3ba3198a
 800b988:	252049c1 	.word	0x252049c1
 800b98c:	397b839a 	.word	0x397b839a
 800b990:	3fe921fb 	.word	0x3fe921fb
 800b994:	4002d97b 	.word	0x4002d97b
 800b998:	3ff921fb 	.word	0x3ff921fb
 800b99c:	413921fb 	.word	0x413921fb
 800b9a0:	3fe00000 	.word	0x3fe00000
 800b9a4:	0800f854 	.word	0x0800f854
 800b9a8:	7fefffff 	.word	0x7fefffff
 800b9ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b9b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b9b4:	ee10 0a10 	vmov	r0, s0
 800b9b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b9bc:	ee10 6a10 	vmov	r6, s0
 800b9c0:	460f      	mov	r7, r1
 800b9c2:	f7f5 f8e9 	bl	8000b98 <__aeabi_d2iz>
 800b9c6:	f7f4 fdcd 	bl	8000564 <__aeabi_i2d>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9d6:	f7f4 fc77 	bl	80002c8 <__aeabi_dsub>
 800b9da:	4b23      	ldr	r3, [pc, #140]	; (800ba68 <__ieee754_rem_pio2+0x410>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f7f4 fe2b 	bl	8000638 <__aeabi_dmul>
 800b9e2:	460f      	mov	r7, r1
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	f7f5 f8d7 	bl	8000b98 <__aeabi_d2iz>
 800b9ea:	f7f4 fdbb 	bl	8000564 <__aeabi_i2d>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b9fa:	f7f4 fc65 	bl	80002c8 <__aeabi_dsub>
 800b9fe:	4b1a      	ldr	r3, [pc, #104]	; (800ba68 <__ieee754_rem_pio2+0x410>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	f7f4 fe19 	bl	8000638 <__aeabi_dmul>
 800ba06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba0a:	ad04      	add	r5, sp, #16
 800ba0c:	f04f 0803 	mov.w	r8, #3
 800ba10:	46a9      	mov	r9, r5
 800ba12:	2600      	movs	r6, #0
 800ba14:	2700      	movs	r7, #0
 800ba16:	4632      	mov	r2, r6
 800ba18:	463b      	mov	r3, r7
 800ba1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ba1e:	46c3      	mov	fp, r8
 800ba20:	3d08      	subs	r5, #8
 800ba22:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba26:	f7f5 f86f 	bl	8000b08 <__aeabi_dcmpeq>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d1f3      	bne.n	800ba16 <__ieee754_rem_pio2+0x3be>
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <__ieee754_rem_pio2+0x414>)
 800ba30:	9301      	str	r3, [sp, #4]
 800ba32:	2302      	movs	r3, #2
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	4622      	mov	r2, r4
 800ba38:	465b      	mov	r3, fp
 800ba3a:	4651      	mov	r1, sl
 800ba3c:	4648      	mov	r0, r9
 800ba3e:	f000 f8df 	bl	800bc00 <__kernel_rem_pio2>
 800ba42:	9b02      	ldr	r3, [sp, #8]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	4683      	mov	fp, r0
 800ba48:	f6bf ae46 	bge.w	800b6d8 <__ieee754_rem_pio2+0x80>
 800ba4c:	e9da 2100 	ldrd	r2, r1, [sl]
 800ba50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba54:	e9ca 2300 	strd	r2, r3, [sl]
 800ba58:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ba5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba60:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ba64:	e73a      	b.n	800b8dc <__ieee754_rem_pio2+0x284>
 800ba66:	bf00      	nop
 800ba68:	41700000 	.word	0x41700000
 800ba6c:	0800f8d4 	.word	0x0800f8d4

0800ba70 <__kernel_cos>:
 800ba70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	ec57 6b10 	vmov	r6, r7, d0
 800ba78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ba7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ba80:	ed8d 1b00 	vstr	d1, [sp]
 800ba84:	da07      	bge.n	800ba96 <__kernel_cos+0x26>
 800ba86:	ee10 0a10 	vmov	r0, s0
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f5 f884 	bl	8000b98 <__aeabi_d2iz>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	f000 8088 	beq.w	800bba6 <__kernel_cos+0x136>
 800ba96:	4632      	mov	r2, r6
 800ba98:	463b      	mov	r3, r7
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	f7f4 fdcb 	bl	8000638 <__aeabi_dmul>
 800baa2:	4b51      	ldr	r3, [pc, #324]	; (800bbe8 <__kernel_cos+0x178>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	4604      	mov	r4, r0
 800baa8:	460d      	mov	r5, r1
 800baaa:	f7f4 fdc5 	bl	8000638 <__aeabi_dmul>
 800baae:	a340      	add	r3, pc, #256	; (adr r3, 800bbb0 <__kernel_cos+0x140>)
 800bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab4:	4682      	mov	sl, r0
 800bab6:	468b      	mov	fp, r1
 800bab8:	4620      	mov	r0, r4
 800baba:	4629      	mov	r1, r5
 800babc:	f7f4 fdbc 	bl	8000638 <__aeabi_dmul>
 800bac0:	a33d      	add	r3, pc, #244	; (adr r3, 800bbb8 <__kernel_cos+0x148>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	f7f4 fc01 	bl	80002cc <__adddf3>
 800baca:	4622      	mov	r2, r4
 800bacc:	462b      	mov	r3, r5
 800bace:	f7f4 fdb3 	bl	8000638 <__aeabi_dmul>
 800bad2:	a33b      	add	r3, pc, #236	; (adr r3, 800bbc0 <__kernel_cos+0x150>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f7f4 fbf6 	bl	80002c8 <__aeabi_dsub>
 800badc:	4622      	mov	r2, r4
 800bade:	462b      	mov	r3, r5
 800bae0:	f7f4 fdaa 	bl	8000638 <__aeabi_dmul>
 800bae4:	a338      	add	r3, pc, #224	; (adr r3, 800bbc8 <__kernel_cos+0x158>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	f7f4 fbef 	bl	80002cc <__adddf3>
 800baee:	4622      	mov	r2, r4
 800baf0:	462b      	mov	r3, r5
 800baf2:	f7f4 fda1 	bl	8000638 <__aeabi_dmul>
 800baf6:	a336      	add	r3, pc, #216	; (adr r3, 800bbd0 <__kernel_cos+0x160>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f7f4 fbe4 	bl	80002c8 <__aeabi_dsub>
 800bb00:	4622      	mov	r2, r4
 800bb02:	462b      	mov	r3, r5
 800bb04:	f7f4 fd98 	bl	8000638 <__aeabi_dmul>
 800bb08:	a333      	add	r3, pc, #204	; (adr r3, 800bbd8 <__kernel_cos+0x168>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fbdd 	bl	80002cc <__adddf3>
 800bb12:	4622      	mov	r2, r4
 800bb14:	462b      	mov	r3, r5
 800bb16:	f7f4 fd8f 	bl	8000638 <__aeabi_dmul>
 800bb1a:	4622      	mov	r2, r4
 800bb1c:	462b      	mov	r3, r5
 800bb1e:	f7f4 fd8b 	bl	8000638 <__aeabi_dmul>
 800bb22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb26:	4604      	mov	r4, r0
 800bb28:	460d      	mov	r5, r1
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	4639      	mov	r1, r7
 800bb2e:	f7f4 fd83 	bl	8000638 <__aeabi_dmul>
 800bb32:	460b      	mov	r3, r1
 800bb34:	4602      	mov	r2, r0
 800bb36:	4629      	mov	r1, r5
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f7f4 fbc5 	bl	80002c8 <__aeabi_dsub>
 800bb3e:	4b2b      	ldr	r3, [pc, #172]	; (800bbec <__kernel_cos+0x17c>)
 800bb40:	4598      	cmp	r8, r3
 800bb42:	4606      	mov	r6, r0
 800bb44:	460f      	mov	r7, r1
 800bb46:	dc10      	bgt.n	800bb6a <__kernel_cos+0xfa>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4650      	mov	r0, sl
 800bb4e:	4659      	mov	r1, fp
 800bb50:	f7f4 fbba 	bl	80002c8 <__aeabi_dsub>
 800bb54:	460b      	mov	r3, r1
 800bb56:	4926      	ldr	r1, [pc, #152]	; (800bbf0 <__kernel_cos+0x180>)
 800bb58:	4602      	mov	r2, r0
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	f7f4 fbb4 	bl	80002c8 <__aeabi_dsub>
 800bb60:	ec41 0b10 	vmov	d0, r0, r1
 800bb64:	b003      	add	sp, #12
 800bb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6a:	4b22      	ldr	r3, [pc, #136]	; (800bbf4 <__kernel_cos+0x184>)
 800bb6c:	4920      	ldr	r1, [pc, #128]	; (800bbf0 <__kernel_cos+0x180>)
 800bb6e:	4598      	cmp	r8, r3
 800bb70:	bfcc      	ite	gt
 800bb72:	4d21      	ldrgt	r5, [pc, #132]	; (800bbf8 <__kernel_cos+0x188>)
 800bb74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bb78:	2400      	movs	r4, #0
 800bb7a:	4622      	mov	r2, r4
 800bb7c:	462b      	mov	r3, r5
 800bb7e:	2000      	movs	r0, #0
 800bb80:	f7f4 fba2 	bl	80002c8 <__aeabi_dsub>
 800bb84:	4622      	mov	r2, r4
 800bb86:	4680      	mov	r8, r0
 800bb88:	4689      	mov	r9, r1
 800bb8a:	462b      	mov	r3, r5
 800bb8c:	4650      	mov	r0, sl
 800bb8e:	4659      	mov	r1, fp
 800bb90:	f7f4 fb9a 	bl	80002c8 <__aeabi_dsub>
 800bb94:	4632      	mov	r2, r6
 800bb96:	463b      	mov	r3, r7
 800bb98:	f7f4 fb96 	bl	80002c8 <__aeabi_dsub>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4640      	mov	r0, r8
 800bba2:	4649      	mov	r1, r9
 800bba4:	e7da      	b.n	800bb5c <__kernel_cos+0xec>
 800bba6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bbe0 <__kernel_cos+0x170>
 800bbaa:	e7db      	b.n	800bb64 <__kernel_cos+0xf4>
 800bbac:	f3af 8000 	nop.w
 800bbb0:	be8838d4 	.word	0xbe8838d4
 800bbb4:	bda8fae9 	.word	0xbda8fae9
 800bbb8:	bdb4b1c4 	.word	0xbdb4b1c4
 800bbbc:	3e21ee9e 	.word	0x3e21ee9e
 800bbc0:	809c52ad 	.word	0x809c52ad
 800bbc4:	3e927e4f 	.word	0x3e927e4f
 800bbc8:	19cb1590 	.word	0x19cb1590
 800bbcc:	3efa01a0 	.word	0x3efa01a0
 800bbd0:	16c15177 	.word	0x16c15177
 800bbd4:	3f56c16c 	.word	0x3f56c16c
 800bbd8:	5555554c 	.word	0x5555554c
 800bbdc:	3fa55555 	.word	0x3fa55555
 800bbe0:	00000000 	.word	0x00000000
 800bbe4:	3ff00000 	.word	0x3ff00000
 800bbe8:	3fe00000 	.word	0x3fe00000
 800bbec:	3fd33332 	.word	0x3fd33332
 800bbf0:	3ff00000 	.word	0x3ff00000
 800bbf4:	3fe90000 	.word	0x3fe90000
 800bbf8:	3fd20000 	.word	0x3fd20000
 800bbfc:	00000000 	.word	0x00000000

0800bc00 <__kernel_rem_pio2>:
 800bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc04:	ed2d 8b02 	vpush	{d8}
 800bc08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800bc0c:	f112 0f14 	cmn.w	r2, #20
 800bc10:	9308      	str	r3, [sp, #32]
 800bc12:	9101      	str	r1, [sp, #4]
 800bc14:	4bc4      	ldr	r3, [pc, #784]	; (800bf28 <__kernel_rem_pio2+0x328>)
 800bc16:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800bc18:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc1e:	9302      	str	r3, [sp, #8]
 800bc20:	9b08      	ldr	r3, [sp, #32]
 800bc22:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc26:	bfa8      	it	ge
 800bc28:	1ed4      	subge	r4, r2, #3
 800bc2a:	9306      	str	r3, [sp, #24]
 800bc2c:	bfb2      	itee	lt
 800bc2e:	2400      	movlt	r4, #0
 800bc30:	2318      	movge	r3, #24
 800bc32:	fb94 f4f3 	sdivge	r4, r4, r3
 800bc36:	f06f 0317 	mvn.w	r3, #23
 800bc3a:	fb04 3303 	mla	r3, r4, r3, r3
 800bc3e:	eb03 0a02 	add.w	sl, r3, r2
 800bc42:	9b02      	ldr	r3, [sp, #8]
 800bc44:	9a06      	ldr	r2, [sp, #24]
 800bc46:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800bf18 <__kernel_rem_pio2+0x318>
 800bc4a:	eb03 0802 	add.w	r8, r3, r2
 800bc4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bc50:	1aa7      	subs	r7, r4, r2
 800bc52:	ae22      	add	r6, sp, #136	; 0x88
 800bc54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bc58:	2500      	movs	r5, #0
 800bc5a:	4545      	cmp	r5, r8
 800bc5c:	dd13      	ble.n	800bc86 <__kernel_rem_pio2+0x86>
 800bc5e:	9b08      	ldr	r3, [sp, #32]
 800bc60:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800bf18 <__kernel_rem_pio2+0x318>
 800bc64:	aa22      	add	r2, sp, #136	; 0x88
 800bc66:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bc6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bc6e:	f04f 0800 	mov.w	r8, #0
 800bc72:	9b02      	ldr	r3, [sp, #8]
 800bc74:	4598      	cmp	r8, r3
 800bc76:	dc2f      	bgt.n	800bcd8 <__kernel_rem_pio2+0xd8>
 800bc78:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bc7c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bc80:	462f      	mov	r7, r5
 800bc82:	2600      	movs	r6, #0
 800bc84:	e01b      	b.n	800bcbe <__kernel_rem_pio2+0xbe>
 800bc86:	42ef      	cmn	r7, r5
 800bc88:	d407      	bmi.n	800bc9a <__kernel_rem_pio2+0x9a>
 800bc8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bc8e:	f7f4 fc69 	bl	8000564 <__aeabi_i2d>
 800bc92:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bc96:	3501      	adds	r5, #1
 800bc98:	e7df      	b.n	800bc5a <__kernel_rem_pio2+0x5a>
 800bc9a:	ec51 0b18 	vmov	r0, r1, d8
 800bc9e:	e7f8      	b.n	800bc92 <__kernel_rem_pio2+0x92>
 800bca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bca4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bca8:	f7f4 fcc6 	bl	8000638 <__aeabi_dmul>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcb4:	f7f4 fb0a 	bl	80002cc <__adddf3>
 800bcb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcbc:	3601      	adds	r6, #1
 800bcbe:	9b06      	ldr	r3, [sp, #24]
 800bcc0:	429e      	cmp	r6, r3
 800bcc2:	f1a7 0708 	sub.w	r7, r7, #8
 800bcc6:	ddeb      	ble.n	800bca0 <__kernel_rem_pio2+0xa0>
 800bcc8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bccc:	f108 0801 	add.w	r8, r8, #1
 800bcd0:	ecab 7b02 	vstmia	fp!, {d7}
 800bcd4:	3508      	adds	r5, #8
 800bcd6:	e7cc      	b.n	800bc72 <__kernel_rem_pio2+0x72>
 800bcd8:	9b02      	ldr	r3, [sp, #8]
 800bcda:	aa0e      	add	r2, sp, #56	; 0x38
 800bcdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bce0:	930d      	str	r3, [sp, #52]	; 0x34
 800bce2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bce4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bce8:	9c02      	ldr	r4, [sp, #8]
 800bcea:	930c      	str	r3, [sp, #48]	; 0x30
 800bcec:	00e3      	lsls	r3, r4, #3
 800bcee:	930a      	str	r3, [sp, #40]	; 0x28
 800bcf0:	ab9a      	add	r3, sp, #616	; 0x268
 800bcf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcf6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bcfa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bcfe:	ab72      	add	r3, sp, #456	; 0x1c8
 800bd00:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bd04:	46c3      	mov	fp, r8
 800bd06:	46a1      	mov	r9, r4
 800bd08:	f1b9 0f00 	cmp.w	r9, #0
 800bd0c:	f1a5 0508 	sub.w	r5, r5, #8
 800bd10:	dc77      	bgt.n	800be02 <__kernel_rem_pio2+0x202>
 800bd12:	ec47 6b10 	vmov	d0, r6, r7
 800bd16:	4650      	mov	r0, sl
 800bd18:	f000 fc0a 	bl	800c530 <scalbn>
 800bd1c:	ec57 6b10 	vmov	r6, r7, d0
 800bd20:	2200      	movs	r2, #0
 800bd22:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bd26:	ee10 0a10 	vmov	r0, s0
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	f7f4 fc84 	bl	8000638 <__aeabi_dmul>
 800bd30:	ec41 0b10 	vmov	d0, r0, r1
 800bd34:	f000 fb7c 	bl	800c430 <floor>
 800bd38:	4b7c      	ldr	r3, [pc, #496]	; (800bf2c <__kernel_rem_pio2+0x32c>)
 800bd3a:	ec51 0b10 	vmov	r0, r1, d0
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f7f4 fc7a 	bl	8000638 <__aeabi_dmul>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 fabc 	bl	80002c8 <__aeabi_dsub>
 800bd50:	460f      	mov	r7, r1
 800bd52:	4606      	mov	r6, r0
 800bd54:	f7f4 ff20 	bl	8000b98 <__aeabi_d2iz>
 800bd58:	9004      	str	r0, [sp, #16]
 800bd5a:	f7f4 fc03 	bl	8000564 <__aeabi_i2d>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4630      	mov	r0, r6
 800bd64:	4639      	mov	r1, r7
 800bd66:	f7f4 faaf 	bl	80002c8 <__aeabi_dsub>
 800bd6a:	f1ba 0f00 	cmp.w	sl, #0
 800bd6e:	4606      	mov	r6, r0
 800bd70:	460f      	mov	r7, r1
 800bd72:	dd6d      	ble.n	800be50 <__kernel_rem_pio2+0x250>
 800bd74:	1e62      	subs	r2, r4, #1
 800bd76:	ab0e      	add	r3, sp, #56	; 0x38
 800bd78:	9d04      	ldr	r5, [sp, #16]
 800bd7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bd7e:	f1ca 0118 	rsb	r1, sl, #24
 800bd82:	fa40 f301 	asr.w	r3, r0, r1
 800bd86:	441d      	add	r5, r3
 800bd88:	408b      	lsls	r3, r1
 800bd8a:	1ac0      	subs	r0, r0, r3
 800bd8c:	ab0e      	add	r3, sp, #56	; 0x38
 800bd8e:	9504      	str	r5, [sp, #16]
 800bd90:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bd94:	f1ca 0317 	rsb	r3, sl, #23
 800bd98:	fa40 fb03 	asr.w	fp, r0, r3
 800bd9c:	f1bb 0f00 	cmp.w	fp, #0
 800bda0:	dd65      	ble.n	800be6e <__kernel_rem_pio2+0x26e>
 800bda2:	9b04      	ldr	r3, [sp, #16]
 800bda4:	2200      	movs	r2, #0
 800bda6:	3301      	adds	r3, #1
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	4615      	mov	r5, r2
 800bdac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bdb0:	4294      	cmp	r4, r2
 800bdb2:	f300 809c 	bgt.w	800beee <__kernel_rem_pio2+0x2ee>
 800bdb6:	f1ba 0f00 	cmp.w	sl, #0
 800bdba:	dd07      	ble.n	800bdcc <__kernel_rem_pio2+0x1cc>
 800bdbc:	f1ba 0f01 	cmp.w	sl, #1
 800bdc0:	f000 80c0 	beq.w	800bf44 <__kernel_rem_pio2+0x344>
 800bdc4:	f1ba 0f02 	cmp.w	sl, #2
 800bdc8:	f000 80c6 	beq.w	800bf58 <__kernel_rem_pio2+0x358>
 800bdcc:	f1bb 0f02 	cmp.w	fp, #2
 800bdd0:	d14d      	bne.n	800be6e <__kernel_rem_pio2+0x26e>
 800bdd2:	4632      	mov	r2, r6
 800bdd4:	463b      	mov	r3, r7
 800bdd6:	4956      	ldr	r1, [pc, #344]	; (800bf30 <__kernel_rem_pio2+0x330>)
 800bdd8:	2000      	movs	r0, #0
 800bdda:	f7f4 fa75 	bl	80002c8 <__aeabi_dsub>
 800bdde:	4606      	mov	r6, r0
 800bde0:	460f      	mov	r7, r1
 800bde2:	2d00      	cmp	r5, #0
 800bde4:	d043      	beq.n	800be6e <__kernel_rem_pio2+0x26e>
 800bde6:	4650      	mov	r0, sl
 800bde8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800bf20 <__kernel_rem_pio2+0x320>
 800bdec:	f000 fba0 	bl	800c530 <scalbn>
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	ec53 2b10 	vmov	r2, r3, d0
 800bdf8:	f7f4 fa66 	bl	80002c8 <__aeabi_dsub>
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	460f      	mov	r7, r1
 800be00:	e035      	b.n	800be6e <__kernel_rem_pio2+0x26e>
 800be02:	4b4c      	ldr	r3, [pc, #304]	; (800bf34 <__kernel_rem_pio2+0x334>)
 800be04:	2200      	movs	r2, #0
 800be06:	4630      	mov	r0, r6
 800be08:	4639      	mov	r1, r7
 800be0a:	f7f4 fc15 	bl	8000638 <__aeabi_dmul>
 800be0e:	f7f4 fec3 	bl	8000b98 <__aeabi_d2iz>
 800be12:	f7f4 fba7 	bl	8000564 <__aeabi_i2d>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	ec43 2b18 	vmov	d8, r2, r3
 800be1e:	4b46      	ldr	r3, [pc, #280]	; (800bf38 <__kernel_rem_pio2+0x338>)
 800be20:	2200      	movs	r2, #0
 800be22:	f7f4 fc09 	bl	8000638 <__aeabi_dmul>
 800be26:	4602      	mov	r2, r0
 800be28:	460b      	mov	r3, r1
 800be2a:	4630      	mov	r0, r6
 800be2c:	4639      	mov	r1, r7
 800be2e:	f7f4 fa4b 	bl	80002c8 <__aeabi_dsub>
 800be32:	f7f4 feb1 	bl	8000b98 <__aeabi_d2iz>
 800be36:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be3a:	f84b 0b04 	str.w	r0, [fp], #4
 800be3e:	ec51 0b18 	vmov	r0, r1, d8
 800be42:	f7f4 fa43 	bl	80002cc <__adddf3>
 800be46:	f109 39ff 	add.w	r9, r9, #4294967295
 800be4a:	4606      	mov	r6, r0
 800be4c:	460f      	mov	r7, r1
 800be4e:	e75b      	b.n	800bd08 <__kernel_rem_pio2+0x108>
 800be50:	d106      	bne.n	800be60 <__kernel_rem_pio2+0x260>
 800be52:	1e63      	subs	r3, r4, #1
 800be54:	aa0e      	add	r2, sp, #56	; 0x38
 800be56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800be5a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800be5e:	e79d      	b.n	800bd9c <__kernel_rem_pio2+0x19c>
 800be60:	4b36      	ldr	r3, [pc, #216]	; (800bf3c <__kernel_rem_pio2+0x33c>)
 800be62:	2200      	movs	r2, #0
 800be64:	f7f4 fe6e 	bl	8000b44 <__aeabi_dcmpge>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d13d      	bne.n	800bee8 <__kernel_rem_pio2+0x2e8>
 800be6c:	4683      	mov	fp, r0
 800be6e:	2200      	movs	r2, #0
 800be70:	2300      	movs	r3, #0
 800be72:	4630      	mov	r0, r6
 800be74:	4639      	mov	r1, r7
 800be76:	f7f4 fe47 	bl	8000b08 <__aeabi_dcmpeq>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	f000 80c0 	beq.w	800c000 <__kernel_rem_pio2+0x400>
 800be80:	1e65      	subs	r5, r4, #1
 800be82:	462b      	mov	r3, r5
 800be84:	2200      	movs	r2, #0
 800be86:	9902      	ldr	r1, [sp, #8]
 800be88:	428b      	cmp	r3, r1
 800be8a:	da6c      	bge.n	800bf66 <__kernel_rem_pio2+0x366>
 800be8c:	2a00      	cmp	r2, #0
 800be8e:	f000 8089 	beq.w	800bfa4 <__kernel_rem_pio2+0x3a4>
 800be92:	ab0e      	add	r3, sp, #56	; 0x38
 800be94:	f1aa 0a18 	sub.w	sl, sl, #24
 800be98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 80ad 	beq.w	800bffc <__kernel_rem_pio2+0x3fc>
 800bea2:	4650      	mov	r0, sl
 800bea4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800bf20 <__kernel_rem_pio2+0x320>
 800bea8:	f000 fb42 	bl	800c530 <scalbn>
 800beac:	ab9a      	add	r3, sp, #616	; 0x268
 800beae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800beb2:	ec57 6b10 	vmov	r6, r7, d0
 800beb6:	00ec      	lsls	r4, r5, #3
 800beb8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800bebc:	46aa      	mov	sl, r5
 800bebe:	f1ba 0f00 	cmp.w	sl, #0
 800bec2:	f280 80d6 	bge.w	800c072 <__kernel_rem_pio2+0x472>
 800bec6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800bf18 <__kernel_rem_pio2+0x318>
 800beca:	462e      	mov	r6, r5
 800becc:	2e00      	cmp	r6, #0
 800bece:	f2c0 8104 	blt.w	800c0da <__kernel_rem_pio2+0x4da>
 800bed2:	ab72      	add	r3, sp, #456	; 0x1c8
 800bed4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bed8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800bf40 <__kernel_rem_pio2+0x340>
 800bedc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bee0:	f04f 0800 	mov.w	r8, #0
 800bee4:	1baf      	subs	r7, r5, r6
 800bee6:	e0ea      	b.n	800c0be <__kernel_rem_pio2+0x4be>
 800bee8:	f04f 0b02 	mov.w	fp, #2
 800beec:	e759      	b.n	800bda2 <__kernel_rem_pio2+0x1a2>
 800beee:	f8d8 3000 	ldr.w	r3, [r8]
 800bef2:	b955      	cbnz	r5, 800bf0a <__kernel_rem_pio2+0x30a>
 800bef4:	b123      	cbz	r3, 800bf00 <__kernel_rem_pio2+0x300>
 800bef6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800befa:	f8c8 3000 	str.w	r3, [r8]
 800befe:	2301      	movs	r3, #1
 800bf00:	3201      	adds	r2, #1
 800bf02:	f108 0804 	add.w	r8, r8, #4
 800bf06:	461d      	mov	r5, r3
 800bf08:	e752      	b.n	800bdb0 <__kernel_rem_pio2+0x1b0>
 800bf0a:	1acb      	subs	r3, r1, r3
 800bf0c:	f8c8 3000 	str.w	r3, [r8]
 800bf10:	462b      	mov	r3, r5
 800bf12:	e7f5      	b.n	800bf00 <__kernel_rem_pio2+0x300>
 800bf14:	f3af 8000 	nop.w
	...
 800bf24:	3ff00000 	.word	0x3ff00000
 800bf28:	0800fa20 	.word	0x0800fa20
 800bf2c:	40200000 	.word	0x40200000
 800bf30:	3ff00000 	.word	0x3ff00000
 800bf34:	3e700000 	.word	0x3e700000
 800bf38:	41700000 	.word	0x41700000
 800bf3c:	3fe00000 	.word	0x3fe00000
 800bf40:	0800f9e0 	.word	0x0800f9e0
 800bf44:	1e62      	subs	r2, r4, #1
 800bf46:	ab0e      	add	r3, sp, #56	; 0x38
 800bf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bf50:	a90e      	add	r1, sp, #56	; 0x38
 800bf52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bf56:	e739      	b.n	800bdcc <__kernel_rem_pio2+0x1cc>
 800bf58:	1e62      	subs	r2, r4, #1
 800bf5a:	ab0e      	add	r3, sp, #56	; 0x38
 800bf5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bf64:	e7f4      	b.n	800bf50 <__kernel_rem_pio2+0x350>
 800bf66:	a90e      	add	r1, sp, #56	; 0x38
 800bf68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	430a      	orrs	r2, r1
 800bf70:	e789      	b.n	800be86 <__kernel_rem_pio2+0x286>
 800bf72:	3301      	adds	r3, #1
 800bf74:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bf78:	2900      	cmp	r1, #0
 800bf7a:	d0fa      	beq.n	800bf72 <__kernel_rem_pio2+0x372>
 800bf7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf7e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800bf82:	446a      	add	r2, sp
 800bf84:	3a98      	subs	r2, #152	; 0x98
 800bf86:	920a      	str	r2, [sp, #40]	; 0x28
 800bf88:	9a08      	ldr	r2, [sp, #32]
 800bf8a:	18e3      	adds	r3, r4, r3
 800bf8c:	18a5      	adds	r5, r4, r2
 800bf8e:	aa22      	add	r2, sp, #136	; 0x88
 800bf90:	f104 0801 	add.w	r8, r4, #1
 800bf94:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	9b04      	ldr	r3, [sp, #16]
 800bf9c:	4543      	cmp	r3, r8
 800bf9e:	da04      	bge.n	800bfaa <__kernel_rem_pio2+0x3aa>
 800bfa0:	461c      	mov	r4, r3
 800bfa2:	e6a3      	b.n	800bcec <__kernel_rem_pio2+0xec>
 800bfa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e7e4      	b.n	800bf74 <__kernel_rem_pio2+0x374>
 800bfaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bfb0:	f7f4 fad8 	bl	8000564 <__aeabi_i2d>
 800bfb4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bfb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfba:	46ab      	mov	fp, r5
 800bfbc:	461c      	mov	r4, r3
 800bfbe:	f04f 0900 	mov.w	r9, #0
 800bfc2:	2600      	movs	r6, #0
 800bfc4:	2700      	movs	r7, #0
 800bfc6:	9b06      	ldr	r3, [sp, #24]
 800bfc8:	4599      	cmp	r9, r3
 800bfca:	dd06      	ble.n	800bfda <__kernel_rem_pio2+0x3da>
 800bfcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfce:	e8e3 6702 	strd	r6, r7, [r3], #8
 800bfd2:	f108 0801 	add.w	r8, r8, #1
 800bfd6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfd8:	e7df      	b.n	800bf9a <__kernel_rem_pio2+0x39a>
 800bfda:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bfde:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bfe2:	f7f4 fb29 	bl	8000638 <__aeabi_dmul>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	4630      	mov	r0, r6
 800bfec:	4639      	mov	r1, r7
 800bfee:	f7f4 f96d 	bl	80002cc <__adddf3>
 800bff2:	f109 0901 	add.w	r9, r9, #1
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	e7e4      	b.n	800bfc6 <__kernel_rem_pio2+0x3c6>
 800bffc:	3d01      	subs	r5, #1
 800bffe:	e748      	b.n	800be92 <__kernel_rem_pio2+0x292>
 800c000:	ec47 6b10 	vmov	d0, r6, r7
 800c004:	f1ca 0000 	rsb	r0, sl, #0
 800c008:	f000 fa92 	bl	800c530 <scalbn>
 800c00c:	ec57 6b10 	vmov	r6, r7, d0
 800c010:	4ba0      	ldr	r3, [pc, #640]	; (800c294 <__kernel_rem_pio2+0x694>)
 800c012:	ee10 0a10 	vmov	r0, s0
 800c016:	2200      	movs	r2, #0
 800c018:	4639      	mov	r1, r7
 800c01a:	f7f4 fd93 	bl	8000b44 <__aeabi_dcmpge>
 800c01e:	b1f8      	cbz	r0, 800c060 <__kernel_rem_pio2+0x460>
 800c020:	4b9d      	ldr	r3, [pc, #628]	; (800c298 <__kernel_rem_pio2+0x698>)
 800c022:	2200      	movs	r2, #0
 800c024:	4630      	mov	r0, r6
 800c026:	4639      	mov	r1, r7
 800c028:	f7f4 fb06 	bl	8000638 <__aeabi_dmul>
 800c02c:	f7f4 fdb4 	bl	8000b98 <__aeabi_d2iz>
 800c030:	4680      	mov	r8, r0
 800c032:	f7f4 fa97 	bl	8000564 <__aeabi_i2d>
 800c036:	4b97      	ldr	r3, [pc, #604]	; (800c294 <__kernel_rem_pio2+0x694>)
 800c038:	2200      	movs	r2, #0
 800c03a:	f7f4 fafd 	bl	8000638 <__aeabi_dmul>
 800c03e:	460b      	mov	r3, r1
 800c040:	4602      	mov	r2, r0
 800c042:	4639      	mov	r1, r7
 800c044:	4630      	mov	r0, r6
 800c046:	f7f4 f93f 	bl	80002c8 <__aeabi_dsub>
 800c04a:	f7f4 fda5 	bl	8000b98 <__aeabi_d2iz>
 800c04e:	1c65      	adds	r5, r4, #1
 800c050:	ab0e      	add	r3, sp, #56	; 0x38
 800c052:	f10a 0a18 	add.w	sl, sl, #24
 800c056:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c05a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c05e:	e720      	b.n	800bea2 <__kernel_rem_pio2+0x2a2>
 800c060:	4630      	mov	r0, r6
 800c062:	4639      	mov	r1, r7
 800c064:	f7f4 fd98 	bl	8000b98 <__aeabi_d2iz>
 800c068:	ab0e      	add	r3, sp, #56	; 0x38
 800c06a:	4625      	mov	r5, r4
 800c06c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c070:	e717      	b.n	800bea2 <__kernel_rem_pio2+0x2a2>
 800c072:	ab0e      	add	r3, sp, #56	; 0x38
 800c074:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c078:	f7f4 fa74 	bl	8000564 <__aeabi_i2d>
 800c07c:	4632      	mov	r2, r6
 800c07e:	463b      	mov	r3, r7
 800c080:	f7f4 fada 	bl	8000638 <__aeabi_dmul>
 800c084:	4b84      	ldr	r3, [pc, #528]	; (800c298 <__kernel_rem_pio2+0x698>)
 800c086:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c08a:	2200      	movs	r2, #0
 800c08c:	4630      	mov	r0, r6
 800c08e:	4639      	mov	r1, r7
 800c090:	f7f4 fad2 	bl	8000638 <__aeabi_dmul>
 800c094:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c098:	4606      	mov	r6, r0
 800c09a:	460f      	mov	r7, r1
 800c09c:	e70f      	b.n	800bebe <__kernel_rem_pio2+0x2be>
 800c09e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c0a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c0a6:	f7f4 fac7 	bl	8000638 <__aeabi_dmul>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0b2:	f7f4 f90b 	bl	80002cc <__adddf3>
 800c0b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c0ba:	f108 0801 	add.w	r8, r8, #1
 800c0be:	9b02      	ldr	r3, [sp, #8]
 800c0c0:	4598      	cmp	r8, r3
 800c0c2:	dc01      	bgt.n	800c0c8 <__kernel_rem_pio2+0x4c8>
 800c0c4:	45b8      	cmp	r8, r7
 800c0c6:	ddea      	ble.n	800c09e <__kernel_rem_pio2+0x49e>
 800c0c8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c0cc:	ab4a      	add	r3, sp, #296	; 0x128
 800c0ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c0d2:	ed87 7b00 	vstr	d7, [r7]
 800c0d6:	3e01      	subs	r6, #1
 800c0d8:	e6f8      	b.n	800becc <__kernel_rem_pio2+0x2cc>
 800c0da:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	dc0b      	bgt.n	800c0f8 <__kernel_rem_pio2+0x4f8>
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dc35      	bgt.n	800c150 <__kernel_rem_pio2+0x550>
 800c0e4:	d059      	beq.n	800c19a <__kernel_rem_pio2+0x59a>
 800c0e6:	9b04      	ldr	r3, [sp, #16]
 800c0e8:	f003 0007 	and.w	r0, r3, #7
 800c0ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c0f0:	ecbd 8b02 	vpop	{d8}
 800c0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c0fa:	2b03      	cmp	r3, #3
 800c0fc:	d1f3      	bne.n	800c0e6 <__kernel_rem_pio2+0x4e6>
 800c0fe:	ab4a      	add	r3, sp, #296	; 0x128
 800c100:	4423      	add	r3, r4
 800c102:	9306      	str	r3, [sp, #24]
 800c104:	461c      	mov	r4, r3
 800c106:	469a      	mov	sl, r3
 800c108:	9502      	str	r5, [sp, #8]
 800c10a:	9b02      	ldr	r3, [sp, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f1aa 0a08 	sub.w	sl, sl, #8
 800c112:	dc6b      	bgt.n	800c1ec <__kernel_rem_pio2+0x5ec>
 800c114:	46aa      	mov	sl, r5
 800c116:	f1ba 0f01 	cmp.w	sl, #1
 800c11a:	f1a4 0408 	sub.w	r4, r4, #8
 800c11e:	f300 8085 	bgt.w	800c22c <__kernel_rem_pio2+0x62c>
 800c122:	9c06      	ldr	r4, [sp, #24]
 800c124:	2000      	movs	r0, #0
 800c126:	3408      	adds	r4, #8
 800c128:	2100      	movs	r1, #0
 800c12a:	2d01      	cmp	r5, #1
 800c12c:	f300 809d 	bgt.w	800c26a <__kernel_rem_pio2+0x66a>
 800c130:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c134:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c138:	f1bb 0f00 	cmp.w	fp, #0
 800c13c:	f040 809b 	bne.w	800c276 <__kernel_rem_pio2+0x676>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	e9c3 5600 	strd	r5, r6, [r3]
 800c146:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c14a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c14e:	e7ca      	b.n	800c0e6 <__kernel_rem_pio2+0x4e6>
 800c150:	3408      	adds	r4, #8
 800c152:	ab4a      	add	r3, sp, #296	; 0x128
 800c154:	441c      	add	r4, r3
 800c156:	462e      	mov	r6, r5
 800c158:	2000      	movs	r0, #0
 800c15a:	2100      	movs	r1, #0
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	da36      	bge.n	800c1ce <__kernel_rem_pio2+0x5ce>
 800c160:	f1bb 0f00 	cmp.w	fp, #0
 800c164:	d039      	beq.n	800c1da <__kernel_rem_pio2+0x5da>
 800c166:	4602      	mov	r2, r0
 800c168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c16c:	9c01      	ldr	r4, [sp, #4]
 800c16e:	e9c4 2300 	strd	r2, r3, [r4]
 800c172:	4602      	mov	r2, r0
 800c174:	460b      	mov	r3, r1
 800c176:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c17a:	f7f4 f8a5 	bl	80002c8 <__aeabi_dsub>
 800c17e:	ae4c      	add	r6, sp, #304	; 0x130
 800c180:	2401      	movs	r4, #1
 800c182:	42a5      	cmp	r5, r4
 800c184:	da2c      	bge.n	800c1e0 <__kernel_rem_pio2+0x5e0>
 800c186:	f1bb 0f00 	cmp.w	fp, #0
 800c18a:	d002      	beq.n	800c192 <__kernel_rem_pio2+0x592>
 800c18c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c190:	4619      	mov	r1, r3
 800c192:	9b01      	ldr	r3, [sp, #4]
 800c194:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c198:	e7a5      	b.n	800c0e6 <__kernel_rem_pio2+0x4e6>
 800c19a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c19e:	eb0d 0403 	add.w	r4, sp, r3
 800c1a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	2d00      	cmp	r5, #0
 800c1ac:	da09      	bge.n	800c1c2 <__kernel_rem_pio2+0x5c2>
 800c1ae:	f1bb 0f00 	cmp.w	fp, #0
 800c1b2:	d002      	beq.n	800c1ba <__kernel_rem_pio2+0x5ba>
 800c1b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	9b01      	ldr	r3, [sp, #4]
 800c1bc:	e9c3 0100 	strd	r0, r1, [r3]
 800c1c0:	e791      	b.n	800c0e6 <__kernel_rem_pio2+0x4e6>
 800c1c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c1c6:	f7f4 f881 	bl	80002cc <__adddf3>
 800c1ca:	3d01      	subs	r5, #1
 800c1cc:	e7ed      	b.n	800c1aa <__kernel_rem_pio2+0x5aa>
 800c1ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c1d2:	f7f4 f87b 	bl	80002cc <__adddf3>
 800c1d6:	3e01      	subs	r6, #1
 800c1d8:	e7c0      	b.n	800c15c <__kernel_rem_pio2+0x55c>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	e7c5      	b.n	800c16c <__kernel_rem_pio2+0x56c>
 800c1e0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c1e4:	f7f4 f872 	bl	80002cc <__adddf3>
 800c1e8:	3401      	adds	r4, #1
 800c1ea:	e7ca      	b.n	800c182 <__kernel_rem_pio2+0x582>
 800c1ec:	e9da 8900 	ldrd	r8, r9, [sl]
 800c1f0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c1f4:	9b02      	ldr	r3, [sp, #8]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	9302      	str	r3, [sp, #8]
 800c1fa:	4632      	mov	r2, r6
 800c1fc:	463b      	mov	r3, r7
 800c1fe:	4640      	mov	r0, r8
 800c200:	4649      	mov	r1, r9
 800c202:	f7f4 f863 	bl	80002cc <__adddf3>
 800c206:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c20a:	4602      	mov	r2, r0
 800c20c:	460b      	mov	r3, r1
 800c20e:	4640      	mov	r0, r8
 800c210:	4649      	mov	r1, r9
 800c212:	f7f4 f859 	bl	80002c8 <__aeabi_dsub>
 800c216:	4632      	mov	r2, r6
 800c218:	463b      	mov	r3, r7
 800c21a:	f7f4 f857 	bl	80002cc <__adddf3>
 800c21e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c222:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c226:	ed8a 7b00 	vstr	d7, [sl]
 800c22a:	e76e      	b.n	800c10a <__kernel_rem_pio2+0x50a>
 800c22c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c230:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c234:	4640      	mov	r0, r8
 800c236:	4632      	mov	r2, r6
 800c238:	463b      	mov	r3, r7
 800c23a:	4649      	mov	r1, r9
 800c23c:	f7f4 f846 	bl	80002cc <__adddf3>
 800c240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	4640      	mov	r0, r8
 800c24a:	4649      	mov	r1, r9
 800c24c:	f7f4 f83c 	bl	80002c8 <__aeabi_dsub>
 800c250:	4632      	mov	r2, r6
 800c252:	463b      	mov	r3, r7
 800c254:	f7f4 f83a 	bl	80002cc <__adddf3>
 800c258:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c25c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c260:	ed84 7b00 	vstr	d7, [r4]
 800c264:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c268:	e755      	b.n	800c116 <__kernel_rem_pio2+0x516>
 800c26a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c26e:	f7f4 f82d 	bl	80002cc <__adddf3>
 800c272:	3d01      	subs	r5, #1
 800c274:	e759      	b.n	800c12a <__kernel_rem_pio2+0x52a>
 800c276:	9b01      	ldr	r3, [sp, #4]
 800c278:	9a01      	ldr	r2, [sp, #4]
 800c27a:	601d      	str	r5, [r3, #0]
 800c27c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c280:	605c      	str	r4, [r3, #4]
 800c282:	609f      	str	r7, [r3, #8]
 800c284:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c288:	60d3      	str	r3, [r2, #12]
 800c28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c28e:	6110      	str	r0, [r2, #16]
 800c290:	6153      	str	r3, [r2, #20]
 800c292:	e728      	b.n	800c0e6 <__kernel_rem_pio2+0x4e6>
 800c294:	41700000 	.word	0x41700000
 800c298:	3e700000 	.word	0x3e700000
 800c29c:	00000000 	.word	0x00000000

0800c2a0 <__kernel_sin>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	ed2d 8b04 	vpush	{d8-d9}
 800c2a8:	eeb0 8a41 	vmov.f32	s16, s2
 800c2ac:	eef0 8a61 	vmov.f32	s17, s3
 800c2b0:	ec55 4b10 	vmov	r4, r5, d0
 800c2b4:	b083      	sub	sp, #12
 800c2b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c2ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c2be:	9001      	str	r0, [sp, #4]
 800c2c0:	da06      	bge.n	800c2d0 <__kernel_sin+0x30>
 800c2c2:	ee10 0a10 	vmov	r0, s0
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f4 fc66 	bl	8000b98 <__aeabi_d2iz>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d051      	beq.n	800c374 <__kernel_sin+0xd4>
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	462b      	mov	r3, r5
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	f7f4 f9ae 	bl	8000638 <__aeabi_dmul>
 800c2dc:	4682      	mov	sl, r0
 800c2de:	468b      	mov	fp, r1
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f7f4 f9a6 	bl	8000638 <__aeabi_dmul>
 800c2ec:	a341      	add	r3, pc, #260	; (adr r3, 800c3f4 <__kernel_sin+0x154>)
 800c2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f2:	4680      	mov	r8, r0
 800c2f4:	4689      	mov	r9, r1
 800c2f6:	4650      	mov	r0, sl
 800c2f8:	4659      	mov	r1, fp
 800c2fa:	f7f4 f99d 	bl	8000638 <__aeabi_dmul>
 800c2fe:	a33f      	add	r3, pc, #252	; (adr r3, 800c3fc <__kernel_sin+0x15c>)
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	f7f3 ffe0 	bl	80002c8 <__aeabi_dsub>
 800c308:	4652      	mov	r2, sl
 800c30a:	465b      	mov	r3, fp
 800c30c:	f7f4 f994 	bl	8000638 <__aeabi_dmul>
 800c310:	a33c      	add	r3, pc, #240	; (adr r3, 800c404 <__kernel_sin+0x164>)
 800c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c316:	f7f3 ffd9 	bl	80002cc <__adddf3>
 800c31a:	4652      	mov	r2, sl
 800c31c:	465b      	mov	r3, fp
 800c31e:	f7f4 f98b 	bl	8000638 <__aeabi_dmul>
 800c322:	a33a      	add	r3, pc, #232	; (adr r3, 800c40c <__kernel_sin+0x16c>)
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f7f3 ffce 	bl	80002c8 <__aeabi_dsub>
 800c32c:	4652      	mov	r2, sl
 800c32e:	465b      	mov	r3, fp
 800c330:	f7f4 f982 	bl	8000638 <__aeabi_dmul>
 800c334:	a337      	add	r3, pc, #220	; (adr r3, 800c414 <__kernel_sin+0x174>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	f7f3 ffc7 	bl	80002cc <__adddf3>
 800c33e:	9b01      	ldr	r3, [sp, #4]
 800c340:	4606      	mov	r6, r0
 800c342:	460f      	mov	r7, r1
 800c344:	b9eb      	cbnz	r3, 800c382 <__kernel_sin+0xe2>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4650      	mov	r0, sl
 800c34c:	4659      	mov	r1, fp
 800c34e:	f7f4 f973 	bl	8000638 <__aeabi_dmul>
 800c352:	a325      	add	r3, pc, #148	; (adr r3, 800c3e8 <__kernel_sin+0x148>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f3 ffb6 	bl	80002c8 <__aeabi_dsub>
 800c35c:	4642      	mov	r2, r8
 800c35e:	464b      	mov	r3, r9
 800c360:	f7f4 f96a 	bl	8000638 <__aeabi_dmul>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4620      	mov	r0, r4
 800c36a:	4629      	mov	r1, r5
 800c36c:	f7f3 ffae 	bl	80002cc <__adddf3>
 800c370:	4604      	mov	r4, r0
 800c372:	460d      	mov	r5, r1
 800c374:	ec45 4b10 	vmov	d0, r4, r5
 800c378:	b003      	add	sp, #12
 800c37a:	ecbd 8b04 	vpop	{d8-d9}
 800c37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c382:	4b1b      	ldr	r3, [pc, #108]	; (800c3f0 <__kernel_sin+0x150>)
 800c384:	ec51 0b18 	vmov	r0, r1, d8
 800c388:	2200      	movs	r2, #0
 800c38a:	f7f4 f955 	bl	8000638 <__aeabi_dmul>
 800c38e:	4632      	mov	r2, r6
 800c390:	ec41 0b19 	vmov	d9, r0, r1
 800c394:	463b      	mov	r3, r7
 800c396:	4640      	mov	r0, r8
 800c398:	4649      	mov	r1, r9
 800c39a:	f7f4 f94d 	bl	8000638 <__aeabi_dmul>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	ec51 0b19 	vmov	r0, r1, d9
 800c3a6:	f7f3 ff8f 	bl	80002c8 <__aeabi_dsub>
 800c3aa:	4652      	mov	r2, sl
 800c3ac:	465b      	mov	r3, fp
 800c3ae:	f7f4 f943 	bl	8000638 <__aeabi_dmul>
 800c3b2:	ec53 2b18 	vmov	r2, r3, d8
 800c3b6:	f7f3 ff87 	bl	80002c8 <__aeabi_dsub>
 800c3ba:	a30b      	add	r3, pc, #44	; (adr r3, 800c3e8 <__kernel_sin+0x148>)
 800c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	460f      	mov	r7, r1
 800c3c4:	4640      	mov	r0, r8
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	f7f4 f936 	bl	8000638 <__aeabi_dmul>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	f7f3 ff7a 	bl	80002cc <__adddf3>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7f3 ff72 	bl	80002c8 <__aeabi_dsub>
 800c3e4:	e7c4      	b.n	800c370 <__kernel_sin+0xd0>
 800c3e6:	bf00      	nop
 800c3e8:	55555549 	.word	0x55555549
 800c3ec:	3fc55555 	.word	0x3fc55555
 800c3f0:	3fe00000 	.word	0x3fe00000
 800c3f4:	5acfd57c 	.word	0x5acfd57c
 800c3f8:	3de5d93a 	.word	0x3de5d93a
 800c3fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c400:	3e5ae5e6 	.word	0x3e5ae5e6
 800c404:	57b1fe7d 	.word	0x57b1fe7d
 800c408:	3ec71de3 	.word	0x3ec71de3
 800c40c:	19c161d5 	.word	0x19c161d5
 800c410:	3f2a01a0 	.word	0x3f2a01a0
 800c414:	1110f8a6 	.word	0x1110f8a6
 800c418:	3f811111 	.word	0x3f811111

0800c41c <fabs>:
 800c41c:	ec51 0b10 	vmov	r0, r1, d0
 800c420:	ee10 2a10 	vmov	r2, s0
 800c424:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c428:	ec43 2b10 	vmov	d0, r2, r3
 800c42c:	4770      	bx	lr
	...

0800c430 <floor>:
 800c430:	ec51 0b10 	vmov	r0, r1, d0
 800c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c438:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c43c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c440:	2e13      	cmp	r6, #19
 800c442:	ee10 5a10 	vmov	r5, s0
 800c446:	ee10 8a10 	vmov	r8, s0
 800c44a:	460c      	mov	r4, r1
 800c44c:	dc32      	bgt.n	800c4b4 <floor+0x84>
 800c44e:	2e00      	cmp	r6, #0
 800c450:	da14      	bge.n	800c47c <floor+0x4c>
 800c452:	a333      	add	r3, pc, #204	; (adr r3, 800c520 <floor+0xf0>)
 800c454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c458:	f7f3 ff38 	bl	80002cc <__adddf3>
 800c45c:	2200      	movs	r2, #0
 800c45e:	2300      	movs	r3, #0
 800c460:	f7f4 fb7a 	bl	8000b58 <__aeabi_dcmpgt>
 800c464:	b138      	cbz	r0, 800c476 <floor+0x46>
 800c466:	2c00      	cmp	r4, #0
 800c468:	da57      	bge.n	800c51a <floor+0xea>
 800c46a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c46e:	431d      	orrs	r5, r3
 800c470:	d001      	beq.n	800c476 <floor+0x46>
 800c472:	4c2d      	ldr	r4, [pc, #180]	; (800c528 <floor+0xf8>)
 800c474:	2500      	movs	r5, #0
 800c476:	4621      	mov	r1, r4
 800c478:	4628      	mov	r0, r5
 800c47a:	e025      	b.n	800c4c8 <floor+0x98>
 800c47c:	4f2b      	ldr	r7, [pc, #172]	; (800c52c <floor+0xfc>)
 800c47e:	4137      	asrs	r7, r6
 800c480:	ea01 0307 	and.w	r3, r1, r7
 800c484:	4303      	orrs	r3, r0
 800c486:	d01f      	beq.n	800c4c8 <floor+0x98>
 800c488:	a325      	add	r3, pc, #148	; (adr r3, 800c520 <floor+0xf0>)
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	f7f3 ff1d 	bl	80002cc <__adddf3>
 800c492:	2200      	movs	r2, #0
 800c494:	2300      	movs	r3, #0
 800c496:	f7f4 fb5f 	bl	8000b58 <__aeabi_dcmpgt>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d0eb      	beq.n	800c476 <floor+0x46>
 800c49e:	2c00      	cmp	r4, #0
 800c4a0:	bfbe      	ittt	lt
 800c4a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c4a6:	fa43 f606 	asrlt.w	r6, r3, r6
 800c4aa:	19a4      	addlt	r4, r4, r6
 800c4ac:	ea24 0407 	bic.w	r4, r4, r7
 800c4b0:	2500      	movs	r5, #0
 800c4b2:	e7e0      	b.n	800c476 <floor+0x46>
 800c4b4:	2e33      	cmp	r6, #51	; 0x33
 800c4b6:	dd0b      	ble.n	800c4d0 <floor+0xa0>
 800c4b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c4bc:	d104      	bne.n	800c4c8 <floor+0x98>
 800c4be:	ee10 2a10 	vmov	r2, s0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	f7f3 ff02 	bl	80002cc <__adddf3>
 800c4c8:	ec41 0b10 	vmov	d0, r0, r1
 800c4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4d8:	fa23 f707 	lsr.w	r7, r3, r7
 800c4dc:	4207      	tst	r7, r0
 800c4de:	d0f3      	beq.n	800c4c8 <floor+0x98>
 800c4e0:	a30f      	add	r3, pc, #60	; (adr r3, 800c520 <floor+0xf0>)
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	f7f3 fef1 	bl	80002cc <__adddf3>
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f7f4 fb33 	bl	8000b58 <__aeabi_dcmpgt>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d0bf      	beq.n	800c476 <floor+0x46>
 800c4f6:	2c00      	cmp	r4, #0
 800c4f8:	da02      	bge.n	800c500 <floor+0xd0>
 800c4fa:	2e14      	cmp	r6, #20
 800c4fc:	d103      	bne.n	800c506 <floor+0xd6>
 800c4fe:	3401      	adds	r4, #1
 800c500:	ea25 0507 	bic.w	r5, r5, r7
 800c504:	e7b7      	b.n	800c476 <floor+0x46>
 800c506:	2301      	movs	r3, #1
 800c508:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c50c:	fa03 f606 	lsl.w	r6, r3, r6
 800c510:	4435      	add	r5, r6
 800c512:	4545      	cmp	r5, r8
 800c514:	bf38      	it	cc
 800c516:	18e4      	addcc	r4, r4, r3
 800c518:	e7f2      	b.n	800c500 <floor+0xd0>
 800c51a:	2500      	movs	r5, #0
 800c51c:	462c      	mov	r4, r5
 800c51e:	e7aa      	b.n	800c476 <floor+0x46>
 800c520:	8800759c 	.word	0x8800759c
 800c524:	7e37e43c 	.word	0x7e37e43c
 800c528:	bff00000 	.word	0xbff00000
 800c52c:	000fffff 	.word	0x000fffff

0800c530 <scalbn>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	ec55 4b10 	vmov	r4, r5, d0
 800c536:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c53a:	4606      	mov	r6, r0
 800c53c:	462b      	mov	r3, r5
 800c53e:	b99a      	cbnz	r2, 800c568 <scalbn+0x38>
 800c540:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c544:	4323      	orrs	r3, r4
 800c546:	d036      	beq.n	800c5b6 <scalbn+0x86>
 800c548:	4b39      	ldr	r3, [pc, #228]	; (800c630 <scalbn+0x100>)
 800c54a:	4629      	mov	r1, r5
 800c54c:	ee10 0a10 	vmov	r0, s0
 800c550:	2200      	movs	r2, #0
 800c552:	f7f4 f871 	bl	8000638 <__aeabi_dmul>
 800c556:	4b37      	ldr	r3, [pc, #220]	; (800c634 <scalbn+0x104>)
 800c558:	429e      	cmp	r6, r3
 800c55a:	4604      	mov	r4, r0
 800c55c:	460d      	mov	r5, r1
 800c55e:	da10      	bge.n	800c582 <scalbn+0x52>
 800c560:	a32b      	add	r3, pc, #172	; (adr r3, 800c610 <scalbn+0xe0>)
 800c562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c566:	e03a      	b.n	800c5de <scalbn+0xae>
 800c568:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c56c:	428a      	cmp	r2, r1
 800c56e:	d10c      	bne.n	800c58a <scalbn+0x5a>
 800c570:	ee10 2a10 	vmov	r2, s0
 800c574:	4620      	mov	r0, r4
 800c576:	4629      	mov	r1, r5
 800c578:	f7f3 fea8 	bl	80002cc <__adddf3>
 800c57c:	4604      	mov	r4, r0
 800c57e:	460d      	mov	r5, r1
 800c580:	e019      	b.n	800c5b6 <scalbn+0x86>
 800c582:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c586:	460b      	mov	r3, r1
 800c588:	3a36      	subs	r2, #54	; 0x36
 800c58a:	4432      	add	r2, r6
 800c58c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c590:	428a      	cmp	r2, r1
 800c592:	dd08      	ble.n	800c5a6 <scalbn+0x76>
 800c594:	2d00      	cmp	r5, #0
 800c596:	a120      	add	r1, pc, #128	; (adr r1, 800c618 <scalbn+0xe8>)
 800c598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c59c:	da1c      	bge.n	800c5d8 <scalbn+0xa8>
 800c59e:	a120      	add	r1, pc, #128	; (adr r1, 800c620 <scalbn+0xf0>)
 800c5a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5a4:	e018      	b.n	800c5d8 <scalbn+0xa8>
 800c5a6:	2a00      	cmp	r2, #0
 800c5a8:	dd08      	ble.n	800c5bc <scalbn+0x8c>
 800c5aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5b6:	ec45 4b10 	vmov	d0, r4, r5
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}
 800c5bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c5c0:	da19      	bge.n	800c5f6 <scalbn+0xc6>
 800c5c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c5c6:	429e      	cmp	r6, r3
 800c5c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c5cc:	dd0a      	ble.n	800c5e4 <scalbn+0xb4>
 800c5ce:	a112      	add	r1, pc, #72	; (adr r1, 800c618 <scalbn+0xe8>)
 800c5d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1e2      	bne.n	800c59e <scalbn+0x6e>
 800c5d8:	a30f      	add	r3, pc, #60	; (adr r3, 800c618 <scalbn+0xe8>)
 800c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5de:	f7f4 f82b 	bl	8000638 <__aeabi_dmul>
 800c5e2:	e7cb      	b.n	800c57c <scalbn+0x4c>
 800c5e4:	a10a      	add	r1, pc, #40	; (adr r1, 800c610 <scalbn+0xe0>)
 800c5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d0b8      	beq.n	800c560 <scalbn+0x30>
 800c5ee:	a10e      	add	r1, pc, #56	; (adr r1, 800c628 <scalbn+0xf8>)
 800c5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5f4:	e7b4      	b.n	800c560 <scalbn+0x30>
 800c5f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5fa:	3236      	adds	r2, #54	; 0x36
 800c5fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c600:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c604:	4620      	mov	r0, r4
 800c606:	4b0c      	ldr	r3, [pc, #48]	; (800c638 <scalbn+0x108>)
 800c608:	2200      	movs	r2, #0
 800c60a:	e7e8      	b.n	800c5de <scalbn+0xae>
 800c60c:	f3af 8000 	nop.w
 800c610:	c2f8f359 	.word	0xc2f8f359
 800c614:	01a56e1f 	.word	0x01a56e1f
 800c618:	8800759c 	.word	0x8800759c
 800c61c:	7e37e43c 	.word	0x7e37e43c
 800c620:	8800759c 	.word	0x8800759c
 800c624:	fe37e43c 	.word	0xfe37e43c
 800c628:	c2f8f359 	.word	0xc2f8f359
 800c62c:	81a56e1f 	.word	0x81a56e1f
 800c630:	43500000 	.word	0x43500000
 800c634:	ffff3cb0 	.word	0xffff3cb0
 800c638:	3c900000 	.word	0x3c900000

0800c63c <abort>:
 800c63c:	b508      	push	{r3, lr}
 800c63e:	2006      	movs	r0, #6
 800c640:	f000 f996 	bl	800c970 <raise>
 800c644:	2001      	movs	r0, #1
 800c646:	f7f9 f9bf 	bl	80059c8 <_exit>
	...

0800c64c <__errno>:
 800c64c:	4b01      	ldr	r3, [pc, #4]	; (800c654 <__errno+0x8>)
 800c64e:	6818      	ldr	r0, [r3, #0]
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	200000ec 	.word	0x200000ec

0800c658 <__libc_init_array>:
 800c658:	b570      	push	{r4, r5, r6, lr}
 800c65a:	4d0d      	ldr	r5, [pc, #52]	; (800c690 <__libc_init_array+0x38>)
 800c65c:	4c0d      	ldr	r4, [pc, #52]	; (800c694 <__libc_init_array+0x3c>)
 800c65e:	1b64      	subs	r4, r4, r5
 800c660:	10a4      	asrs	r4, r4, #2
 800c662:	2600      	movs	r6, #0
 800c664:	42a6      	cmp	r6, r4
 800c666:	d109      	bne.n	800c67c <__libc_init_array+0x24>
 800c668:	4d0b      	ldr	r5, [pc, #44]	; (800c698 <__libc_init_array+0x40>)
 800c66a:	4c0c      	ldr	r4, [pc, #48]	; (800c69c <__libc_init_array+0x44>)
 800c66c:	f002 ff58 	bl	800f520 <_init>
 800c670:	1b64      	subs	r4, r4, r5
 800c672:	10a4      	asrs	r4, r4, #2
 800c674:	2600      	movs	r6, #0
 800c676:	42a6      	cmp	r6, r4
 800c678:	d105      	bne.n	800c686 <__libc_init_array+0x2e>
 800c67a:	bd70      	pop	{r4, r5, r6, pc}
 800c67c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c680:	4798      	blx	r3
 800c682:	3601      	adds	r6, #1
 800c684:	e7ee      	b.n	800c664 <__libc_init_array+0xc>
 800c686:	f855 3b04 	ldr.w	r3, [r5], #4
 800c68a:	4798      	blx	r3
 800c68c:	3601      	adds	r6, #1
 800c68e:	e7f2      	b.n	800c676 <__libc_init_array+0x1e>
 800c690:	0800fe64 	.word	0x0800fe64
 800c694:	0800fe64 	.word	0x0800fe64
 800c698:	0800fe64 	.word	0x0800fe64
 800c69c:	0800fe6c 	.word	0x0800fe6c

0800c6a0 <malloc>:
 800c6a0:	4b02      	ldr	r3, [pc, #8]	; (800c6ac <malloc+0xc>)
 800c6a2:	4601      	mov	r1, r0
 800c6a4:	6818      	ldr	r0, [r3, #0]
 800c6a6:	f000 b8b7 	b.w	800c818 <_malloc_r>
 800c6aa:	bf00      	nop
 800c6ac:	200000ec 	.word	0x200000ec

0800c6b0 <free>:
 800c6b0:	4b02      	ldr	r3, [pc, #8]	; (800c6bc <free+0xc>)
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	6818      	ldr	r0, [r3, #0]
 800c6b6:	f000 b843 	b.w	800c740 <_free_r>
 800c6ba:	bf00      	nop
 800c6bc:	200000ec 	.word	0x200000ec

0800c6c0 <memcmp>:
 800c6c0:	b510      	push	{r4, lr}
 800c6c2:	3901      	subs	r1, #1
 800c6c4:	4402      	add	r2, r0
 800c6c6:	4290      	cmp	r0, r2
 800c6c8:	d101      	bne.n	800c6ce <memcmp+0xe>
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	e005      	b.n	800c6da <memcmp+0x1a>
 800c6ce:	7803      	ldrb	r3, [r0, #0]
 800c6d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	d001      	beq.n	800c6dc <memcmp+0x1c>
 800c6d8:	1b18      	subs	r0, r3, r4
 800c6da:	bd10      	pop	{r4, pc}
 800c6dc:	3001      	adds	r0, #1
 800c6de:	e7f2      	b.n	800c6c6 <memcmp+0x6>

0800c6e0 <memcpy>:
 800c6e0:	440a      	add	r2, r1
 800c6e2:	4291      	cmp	r1, r2
 800c6e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6e8:	d100      	bne.n	800c6ec <memcpy+0xc>
 800c6ea:	4770      	bx	lr
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6f6:	4291      	cmp	r1, r2
 800c6f8:	d1f9      	bne.n	800c6ee <memcpy+0xe>
 800c6fa:	bd10      	pop	{r4, pc}

0800c6fc <memmove>:
 800c6fc:	4288      	cmp	r0, r1
 800c6fe:	b510      	push	{r4, lr}
 800c700:	eb01 0402 	add.w	r4, r1, r2
 800c704:	d902      	bls.n	800c70c <memmove+0x10>
 800c706:	4284      	cmp	r4, r0
 800c708:	4623      	mov	r3, r4
 800c70a:	d807      	bhi.n	800c71c <memmove+0x20>
 800c70c:	1e43      	subs	r3, r0, #1
 800c70e:	42a1      	cmp	r1, r4
 800c710:	d008      	beq.n	800c724 <memmove+0x28>
 800c712:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c716:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c71a:	e7f8      	b.n	800c70e <memmove+0x12>
 800c71c:	4402      	add	r2, r0
 800c71e:	4601      	mov	r1, r0
 800c720:	428a      	cmp	r2, r1
 800c722:	d100      	bne.n	800c726 <memmove+0x2a>
 800c724:	bd10      	pop	{r4, pc}
 800c726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c72a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c72e:	e7f7      	b.n	800c720 <memmove+0x24>

0800c730 <memset>:
 800c730:	4402      	add	r2, r0
 800c732:	4603      	mov	r3, r0
 800c734:	4293      	cmp	r3, r2
 800c736:	d100      	bne.n	800c73a <memset+0xa>
 800c738:	4770      	bx	lr
 800c73a:	f803 1b01 	strb.w	r1, [r3], #1
 800c73e:	e7f9      	b.n	800c734 <memset+0x4>

0800c740 <_free_r>:
 800c740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c742:	2900      	cmp	r1, #0
 800c744:	d044      	beq.n	800c7d0 <_free_r+0x90>
 800c746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c74a:	9001      	str	r0, [sp, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f1a1 0404 	sub.w	r4, r1, #4
 800c752:	bfb8      	it	lt
 800c754:	18e4      	addlt	r4, r4, r3
 800c756:	f001 fb27 	bl	800dda8 <__malloc_lock>
 800c75a:	4a1e      	ldr	r2, [pc, #120]	; (800c7d4 <_free_r+0x94>)
 800c75c:	9801      	ldr	r0, [sp, #4]
 800c75e:	6813      	ldr	r3, [r2, #0]
 800c760:	b933      	cbnz	r3, 800c770 <_free_r+0x30>
 800c762:	6063      	str	r3, [r4, #4]
 800c764:	6014      	str	r4, [r2, #0]
 800c766:	b003      	add	sp, #12
 800c768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c76c:	f001 bb22 	b.w	800ddb4 <__malloc_unlock>
 800c770:	42a3      	cmp	r3, r4
 800c772:	d908      	bls.n	800c786 <_free_r+0x46>
 800c774:	6825      	ldr	r5, [r4, #0]
 800c776:	1961      	adds	r1, r4, r5
 800c778:	428b      	cmp	r3, r1
 800c77a:	bf01      	itttt	eq
 800c77c:	6819      	ldreq	r1, [r3, #0]
 800c77e:	685b      	ldreq	r3, [r3, #4]
 800c780:	1949      	addeq	r1, r1, r5
 800c782:	6021      	streq	r1, [r4, #0]
 800c784:	e7ed      	b.n	800c762 <_free_r+0x22>
 800c786:	461a      	mov	r2, r3
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	b10b      	cbz	r3, 800c790 <_free_r+0x50>
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	d9fa      	bls.n	800c786 <_free_r+0x46>
 800c790:	6811      	ldr	r1, [r2, #0]
 800c792:	1855      	adds	r5, r2, r1
 800c794:	42a5      	cmp	r5, r4
 800c796:	d10b      	bne.n	800c7b0 <_free_r+0x70>
 800c798:	6824      	ldr	r4, [r4, #0]
 800c79a:	4421      	add	r1, r4
 800c79c:	1854      	adds	r4, r2, r1
 800c79e:	42a3      	cmp	r3, r4
 800c7a0:	6011      	str	r1, [r2, #0]
 800c7a2:	d1e0      	bne.n	800c766 <_free_r+0x26>
 800c7a4:	681c      	ldr	r4, [r3, #0]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	6053      	str	r3, [r2, #4]
 800c7aa:	4421      	add	r1, r4
 800c7ac:	6011      	str	r1, [r2, #0]
 800c7ae:	e7da      	b.n	800c766 <_free_r+0x26>
 800c7b0:	d902      	bls.n	800c7b8 <_free_r+0x78>
 800c7b2:	230c      	movs	r3, #12
 800c7b4:	6003      	str	r3, [r0, #0]
 800c7b6:	e7d6      	b.n	800c766 <_free_r+0x26>
 800c7b8:	6825      	ldr	r5, [r4, #0]
 800c7ba:	1961      	adds	r1, r4, r5
 800c7bc:	428b      	cmp	r3, r1
 800c7be:	bf04      	itt	eq
 800c7c0:	6819      	ldreq	r1, [r3, #0]
 800c7c2:	685b      	ldreq	r3, [r3, #4]
 800c7c4:	6063      	str	r3, [r4, #4]
 800c7c6:	bf04      	itt	eq
 800c7c8:	1949      	addeq	r1, r1, r5
 800c7ca:	6021      	streq	r1, [r4, #0]
 800c7cc:	6054      	str	r4, [r2, #4]
 800c7ce:	e7ca      	b.n	800c766 <_free_r+0x26>
 800c7d0:	b003      	add	sp, #12
 800c7d2:	bd30      	pop	{r4, r5, pc}
 800c7d4:	20000a30 	.word	0x20000a30

0800c7d8 <sbrk_aligned>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	4e0e      	ldr	r6, [pc, #56]	; (800c814 <sbrk_aligned+0x3c>)
 800c7dc:	460c      	mov	r4, r1
 800c7de:	6831      	ldr	r1, [r6, #0]
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	b911      	cbnz	r1, 800c7ea <sbrk_aligned+0x12>
 800c7e4:	f000 f88c 	bl	800c900 <_sbrk_r>
 800c7e8:	6030      	str	r0, [r6, #0]
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	f000 f887 	bl	800c900 <_sbrk_r>
 800c7f2:	1c43      	adds	r3, r0, #1
 800c7f4:	d00a      	beq.n	800c80c <sbrk_aligned+0x34>
 800c7f6:	1cc4      	adds	r4, r0, #3
 800c7f8:	f024 0403 	bic.w	r4, r4, #3
 800c7fc:	42a0      	cmp	r0, r4
 800c7fe:	d007      	beq.n	800c810 <sbrk_aligned+0x38>
 800c800:	1a21      	subs	r1, r4, r0
 800c802:	4628      	mov	r0, r5
 800c804:	f000 f87c 	bl	800c900 <_sbrk_r>
 800c808:	3001      	adds	r0, #1
 800c80a:	d101      	bne.n	800c810 <sbrk_aligned+0x38>
 800c80c:	f04f 34ff 	mov.w	r4, #4294967295
 800c810:	4620      	mov	r0, r4
 800c812:	bd70      	pop	{r4, r5, r6, pc}
 800c814:	20000a34 	.word	0x20000a34

0800c818 <_malloc_r>:
 800c818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c81c:	1ccd      	adds	r5, r1, #3
 800c81e:	f025 0503 	bic.w	r5, r5, #3
 800c822:	3508      	adds	r5, #8
 800c824:	2d0c      	cmp	r5, #12
 800c826:	bf38      	it	cc
 800c828:	250c      	movcc	r5, #12
 800c82a:	2d00      	cmp	r5, #0
 800c82c:	4607      	mov	r7, r0
 800c82e:	db01      	blt.n	800c834 <_malloc_r+0x1c>
 800c830:	42a9      	cmp	r1, r5
 800c832:	d905      	bls.n	800c840 <_malloc_r+0x28>
 800c834:	230c      	movs	r3, #12
 800c836:	603b      	str	r3, [r7, #0]
 800c838:	2600      	movs	r6, #0
 800c83a:	4630      	mov	r0, r6
 800c83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c840:	4e2e      	ldr	r6, [pc, #184]	; (800c8fc <_malloc_r+0xe4>)
 800c842:	f001 fab1 	bl	800dda8 <__malloc_lock>
 800c846:	6833      	ldr	r3, [r6, #0]
 800c848:	461c      	mov	r4, r3
 800c84a:	bb34      	cbnz	r4, 800c89a <_malloc_r+0x82>
 800c84c:	4629      	mov	r1, r5
 800c84e:	4638      	mov	r0, r7
 800c850:	f7ff ffc2 	bl	800c7d8 <sbrk_aligned>
 800c854:	1c43      	adds	r3, r0, #1
 800c856:	4604      	mov	r4, r0
 800c858:	d14d      	bne.n	800c8f6 <_malloc_r+0xde>
 800c85a:	6834      	ldr	r4, [r6, #0]
 800c85c:	4626      	mov	r6, r4
 800c85e:	2e00      	cmp	r6, #0
 800c860:	d140      	bne.n	800c8e4 <_malloc_r+0xcc>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	4631      	mov	r1, r6
 800c866:	4638      	mov	r0, r7
 800c868:	eb04 0803 	add.w	r8, r4, r3
 800c86c:	f000 f848 	bl	800c900 <_sbrk_r>
 800c870:	4580      	cmp	r8, r0
 800c872:	d13a      	bne.n	800c8ea <_malloc_r+0xd2>
 800c874:	6821      	ldr	r1, [r4, #0]
 800c876:	3503      	adds	r5, #3
 800c878:	1a6d      	subs	r5, r5, r1
 800c87a:	f025 0503 	bic.w	r5, r5, #3
 800c87e:	3508      	adds	r5, #8
 800c880:	2d0c      	cmp	r5, #12
 800c882:	bf38      	it	cc
 800c884:	250c      	movcc	r5, #12
 800c886:	4629      	mov	r1, r5
 800c888:	4638      	mov	r0, r7
 800c88a:	f7ff ffa5 	bl	800c7d8 <sbrk_aligned>
 800c88e:	3001      	adds	r0, #1
 800c890:	d02b      	beq.n	800c8ea <_malloc_r+0xd2>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	442b      	add	r3, r5
 800c896:	6023      	str	r3, [r4, #0]
 800c898:	e00e      	b.n	800c8b8 <_malloc_r+0xa0>
 800c89a:	6822      	ldr	r2, [r4, #0]
 800c89c:	1b52      	subs	r2, r2, r5
 800c89e:	d41e      	bmi.n	800c8de <_malloc_r+0xc6>
 800c8a0:	2a0b      	cmp	r2, #11
 800c8a2:	d916      	bls.n	800c8d2 <_malloc_r+0xba>
 800c8a4:	1961      	adds	r1, r4, r5
 800c8a6:	42a3      	cmp	r3, r4
 800c8a8:	6025      	str	r5, [r4, #0]
 800c8aa:	bf18      	it	ne
 800c8ac:	6059      	strne	r1, [r3, #4]
 800c8ae:	6863      	ldr	r3, [r4, #4]
 800c8b0:	bf08      	it	eq
 800c8b2:	6031      	streq	r1, [r6, #0]
 800c8b4:	5162      	str	r2, [r4, r5]
 800c8b6:	604b      	str	r3, [r1, #4]
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	f104 060b 	add.w	r6, r4, #11
 800c8be:	f001 fa79 	bl	800ddb4 <__malloc_unlock>
 800c8c2:	f026 0607 	bic.w	r6, r6, #7
 800c8c6:	1d23      	adds	r3, r4, #4
 800c8c8:	1af2      	subs	r2, r6, r3
 800c8ca:	d0b6      	beq.n	800c83a <_malloc_r+0x22>
 800c8cc:	1b9b      	subs	r3, r3, r6
 800c8ce:	50a3      	str	r3, [r4, r2]
 800c8d0:	e7b3      	b.n	800c83a <_malloc_r+0x22>
 800c8d2:	6862      	ldr	r2, [r4, #4]
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	bf0c      	ite	eq
 800c8d8:	6032      	streq	r2, [r6, #0]
 800c8da:	605a      	strne	r2, [r3, #4]
 800c8dc:	e7ec      	b.n	800c8b8 <_malloc_r+0xa0>
 800c8de:	4623      	mov	r3, r4
 800c8e0:	6864      	ldr	r4, [r4, #4]
 800c8e2:	e7b2      	b.n	800c84a <_malloc_r+0x32>
 800c8e4:	4634      	mov	r4, r6
 800c8e6:	6876      	ldr	r6, [r6, #4]
 800c8e8:	e7b9      	b.n	800c85e <_malloc_r+0x46>
 800c8ea:	230c      	movs	r3, #12
 800c8ec:	603b      	str	r3, [r7, #0]
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	f001 fa60 	bl	800ddb4 <__malloc_unlock>
 800c8f4:	e7a1      	b.n	800c83a <_malloc_r+0x22>
 800c8f6:	6025      	str	r5, [r4, #0]
 800c8f8:	e7de      	b.n	800c8b8 <_malloc_r+0xa0>
 800c8fa:	bf00      	nop
 800c8fc:	20000a30 	.word	0x20000a30

0800c900 <_sbrk_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d06      	ldr	r5, [pc, #24]	; (800c91c <_sbrk_r+0x1c>)
 800c904:	2300      	movs	r3, #0
 800c906:	4604      	mov	r4, r0
 800c908:	4608      	mov	r0, r1
 800c90a:	602b      	str	r3, [r5, #0]
 800c90c:	f7f9 f8d4 	bl	8005ab8 <_sbrk>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d102      	bne.n	800c91a <_sbrk_r+0x1a>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	b103      	cbz	r3, 800c91a <_sbrk_r+0x1a>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	20000a38 	.word	0x20000a38

0800c920 <_raise_r>:
 800c920:	291f      	cmp	r1, #31
 800c922:	b538      	push	{r3, r4, r5, lr}
 800c924:	4604      	mov	r4, r0
 800c926:	460d      	mov	r5, r1
 800c928:	d904      	bls.n	800c934 <_raise_r+0x14>
 800c92a:	2316      	movs	r3, #22
 800c92c:	6003      	str	r3, [r0, #0]
 800c92e:	f04f 30ff 	mov.w	r0, #4294967295
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c936:	b112      	cbz	r2, 800c93e <_raise_r+0x1e>
 800c938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c93c:	b94b      	cbnz	r3, 800c952 <_raise_r+0x32>
 800c93e:	4620      	mov	r0, r4
 800c940:	f000 f830 	bl	800c9a4 <_getpid_r>
 800c944:	462a      	mov	r2, r5
 800c946:	4601      	mov	r1, r0
 800c948:	4620      	mov	r0, r4
 800c94a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c94e:	f000 b817 	b.w	800c980 <_kill_r>
 800c952:	2b01      	cmp	r3, #1
 800c954:	d00a      	beq.n	800c96c <_raise_r+0x4c>
 800c956:	1c59      	adds	r1, r3, #1
 800c958:	d103      	bne.n	800c962 <_raise_r+0x42>
 800c95a:	2316      	movs	r3, #22
 800c95c:	6003      	str	r3, [r0, #0]
 800c95e:	2001      	movs	r0, #1
 800c960:	e7e7      	b.n	800c932 <_raise_r+0x12>
 800c962:	2400      	movs	r4, #0
 800c964:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c968:	4628      	mov	r0, r5
 800c96a:	4798      	blx	r3
 800c96c:	2000      	movs	r0, #0
 800c96e:	e7e0      	b.n	800c932 <_raise_r+0x12>

0800c970 <raise>:
 800c970:	4b02      	ldr	r3, [pc, #8]	; (800c97c <raise+0xc>)
 800c972:	4601      	mov	r1, r0
 800c974:	6818      	ldr	r0, [r3, #0]
 800c976:	f7ff bfd3 	b.w	800c920 <_raise_r>
 800c97a:	bf00      	nop
 800c97c:	200000ec 	.word	0x200000ec

0800c980 <_kill_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4d07      	ldr	r5, [pc, #28]	; (800c9a0 <_kill_r+0x20>)
 800c984:	2300      	movs	r3, #0
 800c986:	4604      	mov	r4, r0
 800c988:	4608      	mov	r0, r1
 800c98a:	4611      	mov	r1, r2
 800c98c:	602b      	str	r3, [r5, #0]
 800c98e:	f7f9 f80b 	bl	80059a8 <_kill>
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	d102      	bne.n	800c99c <_kill_r+0x1c>
 800c996:	682b      	ldr	r3, [r5, #0]
 800c998:	b103      	cbz	r3, 800c99c <_kill_r+0x1c>
 800c99a:	6023      	str	r3, [r4, #0]
 800c99c:	bd38      	pop	{r3, r4, r5, pc}
 800c99e:	bf00      	nop
 800c9a0:	20000a38 	.word	0x20000a38

0800c9a4 <_getpid_r>:
 800c9a4:	f7f8 bff8 	b.w	8005998 <_getpid>

0800c9a8 <sulp>:
 800c9a8:	b570      	push	{r4, r5, r6, lr}
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	ec45 4b10 	vmov	d0, r4, r5
 800c9b2:	4616      	mov	r6, r2
 800c9b4:	f001 fd76 	bl	800e4a4 <__ulp>
 800c9b8:	ec51 0b10 	vmov	r0, r1, d0
 800c9bc:	b17e      	cbz	r6, 800c9de <sulp+0x36>
 800c9be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c9c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	dd09      	ble.n	800c9de <sulp+0x36>
 800c9ca:	051b      	lsls	r3, r3, #20
 800c9cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c9d0:	2400      	movs	r4, #0
 800c9d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c9d6:	4622      	mov	r2, r4
 800c9d8:	462b      	mov	r3, r5
 800c9da:	f7f3 fe2d 	bl	8000638 <__aeabi_dmul>
 800c9de:	bd70      	pop	{r4, r5, r6, pc}

0800c9e0 <_strtod_l>:
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	ed2d 8b02 	vpush	{d8}
 800c9e8:	b09d      	sub	sp, #116	; 0x74
 800c9ea:	461f      	mov	r7, r3
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	9318      	str	r3, [sp, #96]	; 0x60
 800c9f0:	4ba2      	ldr	r3, [pc, #648]	; (800cc7c <_strtod_l+0x29c>)
 800c9f2:	9213      	str	r2, [sp, #76]	; 0x4c
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	9305      	str	r3, [sp, #20]
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	4688      	mov	r8, r1
 800c9fe:	f7f3 fc57 	bl	80002b0 <strlen>
 800ca02:	f04f 0a00 	mov.w	sl, #0
 800ca06:	4605      	mov	r5, r0
 800ca08:	f04f 0b00 	mov.w	fp, #0
 800ca0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ca10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca12:	781a      	ldrb	r2, [r3, #0]
 800ca14:	2a2b      	cmp	r2, #43	; 0x2b
 800ca16:	d04e      	beq.n	800cab6 <_strtod_l+0xd6>
 800ca18:	d83b      	bhi.n	800ca92 <_strtod_l+0xb2>
 800ca1a:	2a0d      	cmp	r2, #13
 800ca1c:	d834      	bhi.n	800ca88 <_strtod_l+0xa8>
 800ca1e:	2a08      	cmp	r2, #8
 800ca20:	d834      	bhi.n	800ca8c <_strtod_l+0xac>
 800ca22:	2a00      	cmp	r2, #0
 800ca24:	d03e      	beq.n	800caa4 <_strtod_l+0xc4>
 800ca26:	2300      	movs	r3, #0
 800ca28:	930a      	str	r3, [sp, #40]	; 0x28
 800ca2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ca2c:	7833      	ldrb	r3, [r6, #0]
 800ca2e:	2b30      	cmp	r3, #48	; 0x30
 800ca30:	f040 80b0 	bne.w	800cb94 <_strtod_l+0x1b4>
 800ca34:	7873      	ldrb	r3, [r6, #1]
 800ca36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca3a:	2b58      	cmp	r3, #88	; 0x58
 800ca3c:	d168      	bne.n	800cb10 <_strtod_l+0x130>
 800ca3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca40:	9301      	str	r3, [sp, #4]
 800ca42:	ab18      	add	r3, sp, #96	; 0x60
 800ca44:	9702      	str	r7, [sp, #8]
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	4a8d      	ldr	r2, [pc, #564]	; (800cc80 <_strtod_l+0x2a0>)
 800ca4a:	ab19      	add	r3, sp, #100	; 0x64
 800ca4c:	a917      	add	r1, sp, #92	; 0x5c
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 fe90 	bl	800d774 <__gethex>
 800ca54:	f010 0707 	ands.w	r7, r0, #7
 800ca58:	4605      	mov	r5, r0
 800ca5a:	d005      	beq.n	800ca68 <_strtod_l+0x88>
 800ca5c:	2f06      	cmp	r7, #6
 800ca5e:	d12c      	bne.n	800caba <_strtod_l+0xda>
 800ca60:	3601      	adds	r6, #1
 800ca62:	2300      	movs	r3, #0
 800ca64:	9617      	str	r6, [sp, #92]	; 0x5c
 800ca66:	930a      	str	r3, [sp, #40]	; 0x28
 800ca68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f040 8590 	bne.w	800d590 <_strtod_l+0xbb0>
 800ca70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca72:	b1eb      	cbz	r3, 800cab0 <_strtod_l+0xd0>
 800ca74:	4652      	mov	r2, sl
 800ca76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca7a:	ec43 2b10 	vmov	d0, r2, r3
 800ca7e:	b01d      	add	sp, #116	; 0x74
 800ca80:	ecbd 8b02 	vpop	{d8}
 800ca84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca88:	2a20      	cmp	r2, #32
 800ca8a:	d1cc      	bne.n	800ca26 <_strtod_l+0x46>
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca90:	e7be      	b.n	800ca10 <_strtod_l+0x30>
 800ca92:	2a2d      	cmp	r2, #45	; 0x2d
 800ca94:	d1c7      	bne.n	800ca26 <_strtod_l+0x46>
 800ca96:	2201      	movs	r2, #1
 800ca98:	920a      	str	r2, [sp, #40]	; 0x28
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca9e:	785b      	ldrb	r3, [r3, #1]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1c2      	bne.n	800ca2a <_strtod_l+0x4a>
 800caa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800caa6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f040 856e 	bne.w	800d58c <_strtod_l+0xbac>
 800cab0:	4652      	mov	r2, sl
 800cab2:	465b      	mov	r3, fp
 800cab4:	e7e1      	b.n	800ca7a <_strtod_l+0x9a>
 800cab6:	2200      	movs	r2, #0
 800cab8:	e7ee      	b.n	800ca98 <_strtod_l+0xb8>
 800caba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cabc:	b13a      	cbz	r2, 800cace <_strtod_l+0xee>
 800cabe:	2135      	movs	r1, #53	; 0x35
 800cac0:	a81a      	add	r0, sp, #104	; 0x68
 800cac2:	f001 fdfa 	bl	800e6ba <__copybits>
 800cac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cac8:	4620      	mov	r0, r4
 800caca:	f001 f9b9 	bl	800de40 <_Bfree>
 800cace:	3f01      	subs	r7, #1
 800cad0:	2f04      	cmp	r7, #4
 800cad2:	d806      	bhi.n	800cae2 <_strtod_l+0x102>
 800cad4:	e8df f007 	tbb	[pc, r7]
 800cad8:	1714030a 	.word	0x1714030a
 800cadc:	0a          	.byte	0x0a
 800cadd:	00          	.byte	0x00
 800cade:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cae2:	0728      	lsls	r0, r5, #28
 800cae4:	d5c0      	bpl.n	800ca68 <_strtod_l+0x88>
 800cae6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800caea:	e7bd      	b.n	800ca68 <_strtod_l+0x88>
 800caec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800caf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800caf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800caf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cafa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cafe:	e7f0      	b.n	800cae2 <_strtod_l+0x102>
 800cb00:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cc84 <_strtod_l+0x2a4>
 800cb04:	e7ed      	b.n	800cae2 <_strtod_l+0x102>
 800cb06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cb0a:	f04f 3aff 	mov.w	sl, #4294967295
 800cb0e:	e7e8      	b.n	800cae2 <_strtod_l+0x102>
 800cb10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb12:	1c5a      	adds	r2, r3, #1
 800cb14:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb16:	785b      	ldrb	r3, [r3, #1]
 800cb18:	2b30      	cmp	r3, #48	; 0x30
 800cb1a:	d0f9      	beq.n	800cb10 <_strtod_l+0x130>
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d0a3      	beq.n	800ca68 <_strtod_l+0x88>
 800cb20:	2301      	movs	r3, #1
 800cb22:	f04f 0900 	mov.w	r9, #0
 800cb26:	9304      	str	r3, [sp, #16]
 800cb28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb2a:	9308      	str	r3, [sp, #32]
 800cb2c:	f8cd 901c 	str.w	r9, [sp, #28]
 800cb30:	464f      	mov	r7, r9
 800cb32:	220a      	movs	r2, #10
 800cb34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cb36:	7806      	ldrb	r6, [r0, #0]
 800cb38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cb3c:	b2d9      	uxtb	r1, r3
 800cb3e:	2909      	cmp	r1, #9
 800cb40:	d92a      	bls.n	800cb98 <_strtod_l+0x1b8>
 800cb42:	9905      	ldr	r1, [sp, #20]
 800cb44:	462a      	mov	r2, r5
 800cb46:	f001 fe21 	bl	800e78c <strncmp>
 800cb4a:	b398      	cbz	r0, 800cbb4 <_strtod_l+0x1d4>
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	4632      	mov	r2, r6
 800cb50:	463d      	mov	r5, r7
 800cb52:	9005      	str	r0, [sp, #20]
 800cb54:	4603      	mov	r3, r0
 800cb56:	2a65      	cmp	r2, #101	; 0x65
 800cb58:	d001      	beq.n	800cb5e <_strtod_l+0x17e>
 800cb5a:	2a45      	cmp	r2, #69	; 0x45
 800cb5c:	d118      	bne.n	800cb90 <_strtod_l+0x1b0>
 800cb5e:	b91d      	cbnz	r5, 800cb68 <_strtod_l+0x188>
 800cb60:	9a04      	ldr	r2, [sp, #16]
 800cb62:	4302      	orrs	r2, r0
 800cb64:	d09e      	beq.n	800caa4 <_strtod_l+0xc4>
 800cb66:	2500      	movs	r5, #0
 800cb68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cb6c:	f108 0201 	add.w	r2, r8, #1
 800cb70:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb72:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cb76:	2a2b      	cmp	r2, #43	; 0x2b
 800cb78:	d075      	beq.n	800cc66 <_strtod_l+0x286>
 800cb7a:	2a2d      	cmp	r2, #45	; 0x2d
 800cb7c:	d07b      	beq.n	800cc76 <_strtod_l+0x296>
 800cb7e:	f04f 0c00 	mov.w	ip, #0
 800cb82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cb86:	2909      	cmp	r1, #9
 800cb88:	f240 8082 	bls.w	800cc90 <_strtod_l+0x2b0>
 800cb8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cb90:	2600      	movs	r6, #0
 800cb92:	e09d      	b.n	800ccd0 <_strtod_l+0x2f0>
 800cb94:	2300      	movs	r3, #0
 800cb96:	e7c4      	b.n	800cb22 <_strtod_l+0x142>
 800cb98:	2f08      	cmp	r7, #8
 800cb9a:	bfd8      	it	le
 800cb9c:	9907      	ldrle	r1, [sp, #28]
 800cb9e:	f100 0001 	add.w	r0, r0, #1
 800cba2:	bfda      	itte	le
 800cba4:	fb02 3301 	mlale	r3, r2, r1, r3
 800cba8:	9307      	strle	r3, [sp, #28]
 800cbaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cbae:	3701      	adds	r7, #1
 800cbb0:	9017      	str	r0, [sp, #92]	; 0x5c
 800cbb2:	e7bf      	b.n	800cb34 <_strtod_l+0x154>
 800cbb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbb6:	195a      	adds	r2, r3, r5
 800cbb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800cbba:	5d5a      	ldrb	r2, [r3, r5]
 800cbbc:	2f00      	cmp	r7, #0
 800cbbe:	d037      	beq.n	800cc30 <_strtod_l+0x250>
 800cbc0:	9005      	str	r0, [sp, #20]
 800cbc2:	463d      	mov	r5, r7
 800cbc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cbc8:	2b09      	cmp	r3, #9
 800cbca:	d912      	bls.n	800cbf2 <_strtod_l+0x212>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e7c2      	b.n	800cb56 <_strtod_l+0x176>
 800cbd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbd2:	1c5a      	adds	r2, r3, #1
 800cbd4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cbd6:	785a      	ldrb	r2, [r3, #1]
 800cbd8:	3001      	adds	r0, #1
 800cbda:	2a30      	cmp	r2, #48	; 0x30
 800cbdc:	d0f8      	beq.n	800cbd0 <_strtod_l+0x1f0>
 800cbde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cbe2:	2b08      	cmp	r3, #8
 800cbe4:	f200 84d9 	bhi.w	800d59a <_strtod_l+0xbba>
 800cbe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbea:	9005      	str	r0, [sp, #20]
 800cbec:	2000      	movs	r0, #0
 800cbee:	9308      	str	r3, [sp, #32]
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	3a30      	subs	r2, #48	; 0x30
 800cbf4:	f100 0301 	add.w	r3, r0, #1
 800cbf8:	d014      	beq.n	800cc24 <_strtod_l+0x244>
 800cbfa:	9905      	ldr	r1, [sp, #20]
 800cbfc:	4419      	add	r1, r3
 800cbfe:	9105      	str	r1, [sp, #20]
 800cc00:	462b      	mov	r3, r5
 800cc02:	eb00 0e05 	add.w	lr, r0, r5
 800cc06:	210a      	movs	r1, #10
 800cc08:	4573      	cmp	r3, lr
 800cc0a:	d113      	bne.n	800cc34 <_strtod_l+0x254>
 800cc0c:	182b      	adds	r3, r5, r0
 800cc0e:	2b08      	cmp	r3, #8
 800cc10:	f105 0501 	add.w	r5, r5, #1
 800cc14:	4405      	add	r5, r0
 800cc16:	dc1c      	bgt.n	800cc52 <_strtod_l+0x272>
 800cc18:	9907      	ldr	r1, [sp, #28]
 800cc1a:	230a      	movs	r3, #10
 800cc1c:	fb03 2301 	mla	r3, r3, r1, r2
 800cc20:	9307      	str	r3, [sp, #28]
 800cc22:	2300      	movs	r3, #0
 800cc24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cc26:	1c51      	adds	r1, r2, #1
 800cc28:	9117      	str	r1, [sp, #92]	; 0x5c
 800cc2a:	7852      	ldrb	r2, [r2, #1]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	e7c9      	b.n	800cbc4 <_strtod_l+0x1e4>
 800cc30:	4638      	mov	r0, r7
 800cc32:	e7d2      	b.n	800cbda <_strtod_l+0x1fa>
 800cc34:	2b08      	cmp	r3, #8
 800cc36:	dc04      	bgt.n	800cc42 <_strtod_l+0x262>
 800cc38:	9e07      	ldr	r6, [sp, #28]
 800cc3a:	434e      	muls	r6, r1
 800cc3c:	9607      	str	r6, [sp, #28]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	e7e2      	b.n	800cc08 <_strtod_l+0x228>
 800cc42:	f103 0c01 	add.w	ip, r3, #1
 800cc46:	f1bc 0f10 	cmp.w	ip, #16
 800cc4a:	bfd8      	it	le
 800cc4c:	fb01 f909 	mulle.w	r9, r1, r9
 800cc50:	e7f5      	b.n	800cc3e <_strtod_l+0x25e>
 800cc52:	2d10      	cmp	r5, #16
 800cc54:	bfdc      	itt	le
 800cc56:	230a      	movle	r3, #10
 800cc58:	fb03 2909 	mlale	r9, r3, r9, r2
 800cc5c:	e7e1      	b.n	800cc22 <_strtod_l+0x242>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9305      	str	r3, [sp, #20]
 800cc62:	2301      	movs	r3, #1
 800cc64:	e77c      	b.n	800cb60 <_strtod_l+0x180>
 800cc66:	f04f 0c00 	mov.w	ip, #0
 800cc6a:	f108 0202 	add.w	r2, r8, #2
 800cc6e:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc70:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cc74:	e785      	b.n	800cb82 <_strtod_l+0x1a2>
 800cc76:	f04f 0c01 	mov.w	ip, #1
 800cc7a:	e7f6      	b.n	800cc6a <_strtod_l+0x28a>
 800cc7c:	0800fb08 	.word	0x0800fb08
 800cc80:	0800fa40 	.word	0x0800fa40
 800cc84:	7ff00000 	.word	0x7ff00000
 800cc88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cc8a:	1c51      	adds	r1, r2, #1
 800cc8c:	9117      	str	r1, [sp, #92]	; 0x5c
 800cc8e:	7852      	ldrb	r2, [r2, #1]
 800cc90:	2a30      	cmp	r2, #48	; 0x30
 800cc92:	d0f9      	beq.n	800cc88 <_strtod_l+0x2a8>
 800cc94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cc98:	2908      	cmp	r1, #8
 800cc9a:	f63f af79 	bhi.w	800cb90 <_strtod_l+0x1b0>
 800cc9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cca2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cca4:	9206      	str	r2, [sp, #24]
 800cca6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cca8:	1c51      	adds	r1, r2, #1
 800ccaa:	9117      	str	r1, [sp, #92]	; 0x5c
 800ccac:	7852      	ldrb	r2, [r2, #1]
 800ccae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ccb2:	2e09      	cmp	r6, #9
 800ccb4:	d937      	bls.n	800cd26 <_strtod_l+0x346>
 800ccb6:	9e06      	ldr	r6, [sp, #24]
 800ccb8:	1b89      	subs	r1, r1, r6
 800ccba:	2908      	cmp	r1, #8
 800ccbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ccc0:	dc02      	bgt.n	800ccc8 <_strtod_l+0x2e8>
 800ccc2:	4576      	cmp	r6, lr
 800ccc4:	bfa8      	it	ge
 800ccc6:	4676      	movge	r6, lr
 800ccc8:	f1bc 0f00 	cmp.w	ip, #0
 800cccc:	d000      	beq.n	800ccd0 <_strtod_l+0x2f0>
 800ccce:	4276      	negs	r6, r6
 800ccd0:	2d00      	cmp	r5, #0
 800ccd2:	d14d      	bne.n	800cd70 <_strtod_l+0x390>
 800ccd4:	9904      	ldr	r1, [sp, #16]
 800ccd6:	4301      	orrs	r1, r0
 800ccd8:	f47f aec6 	bne.w	800ca68 <_strtod_l+0x88>
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f47f aee1 	bne.w	800caa4 <_strtod_l+0xc4>
 800cce2:	2a69      	cmp	r2, #105	; 0x69
 800cce4:	d027      	beq.n	800cd36 <_strtod_l+0x356>
 800cce6:	dc24      	bgt.n	800cd32 <_strtod_l+0x352>
 800cce8:	2a49      	cmp	r2, #73	; 0x49
 800ccea:	d024      	beq.n	800cd36 <_strtod_l+0x356>
 800ccec:	2a4e      	cmp	r2, #78	; 0x4e
 800ccee:	f47f aed9 	bne.w	800caa4 <_strtod_l+0xc4>
 800ccf2:	499f      	ldr	r1, [pc, #636]	; (800cf70 <_strtod_l+0x590>)
 800ccf4:	a817      	add	r0, sp, #92	; 0x5c
 800ccf6:	f000 ff95 	bl	800dc24 <__match>
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	f43f aed2 	beq.w	800caa4 <_strtod_l+0xc4>
 800cd00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	2b28      	cmp	r3, #40	; 0x28
 800cd06:	d12d      	bne.n	800cd64 <_strtod_l+0x384>
 800cd08:	499a      	ldr	r1, [pc, #616]	; (800cf74 <_strtod_l+0x594>)
 800cd0a:	aa1a      	add	r2, sp, #104	; 0x68
 800cd0c:	a817      	add	r0, sp, #92	; 0x5c
 800cd0e:	f000 ff9d 	bl	800dc4c <__hexnan>
 800cd12:	2805      	cmp	r0, #5
 800cd14:	d126      	bne.n	800cd64 <_strtod_l+0x384>
 800cd16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cd1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cd20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cd24:	e6a0      	b.n	800ca68 <_strtod_l+0x88>
 800cd26:	210a      	movs	r1, #10
 800cd28:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cd2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cd30:	e7b9      	b.n	800cca6 <_strtod_l+0x2c6>
 800cd32:	2a6e      	cmp	r2, #110	; 0x6e
 800cd34:	e7db      	b.n	800ccee <_strtod_l+0x30e>
 800cd36:	4990      	ldr	r1, [pc, #576]	; (800cf78 <_strtod_l+0x598>)
 800cd38:	a817      	add	r0, sp, #92	; 0x5c
 800cd3a:	f000 ff73 	bl	800dc24 <__match>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f43f aeb0 	beq.w	800caa4 <_strtod_l+0xc4>
 800cd44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd46:	498d      	ldr	r1, [pc, #564]	; (800cf7c <_strtod_l+0x59c>)
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	a817      	add	r0, sp, #92	; 0x5c
 800cd4c:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd4e:	f000 ff69 	bl	800dc24 <__match>
 800cd52:	b910      	cbnz	r0, 800cd5a <_strtod_l+0x37a>
 800cd54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd56:	3301      	adds	r3, #1
 800cd58:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cf8c <_strtod_l+0x5ac>
 800cd5e:	f04f 0a00 	mov.w	sl, #0
 800cd62:	e681      	b.n	800ca68 <_strtod_l+0x88>
 800cd64:	4886      	ldr	r0, [pc, #536]	; (800cf80 <_strtod_l+0x5a0>)
 800cd66:	f001 fd03 	bl	800e770 <nan>
 800cd6a:	ec5b ab10 	vmov	sl, fp, d0
 800cd6e:	e67b      	b.n	800ca68 <_strtod_l+0x88>
 800cd70:	9b05      	ldr	r3, [sp, #20]
 800cd72:	9807      	ldr	r0, [sp, #28]
 800cd74:	1af3      	subs	r3, r6, r3
 800cd76:	2f00      	cmp	r7, #0
 800cd78:	bf08      	it	eq
 800cd7a:	462f      	moveq	r7, r5
 800cd7c:	2d10      	cmp	r5, #16
 800cd7e:	9306      	str	r3, [sp, #24]
 800cd80:	46a8      	mov	r8, r5
 800cd82:	bfa8      	it	ge
 800cd84:	f04f 0810 	movge.w	r8, #16
 800cd88:	f7f3 fbdc 	bl	8000544 <__aeabi_ui2d>
 800cd8c:	2d09      	cmp	r5, #9
 800cd8e:	4682      	mov	sl, r0
 800cd90:	468b      	mov	fp, r1
 800cd92:	dd13      	ble.n	800cdbc <_strtod_l+0x3dc>
 800cd94:	4b7b      	ldr	r3, [pc, #492]	; (800cf84 <_strtod_l+0x5a4>)
 800cd96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cd9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cd9e:	f7f3 fc4b 	bl	8000638 <__aeabi_dmul>
 800cda2:	4682      	mov	sl, r0
 800cda4:	4648      	mov	r0, r9
 800cda6:	468b      	mov	fp, r1
 800cda8:	f7f3 fbcc 	bl	8000544 <__aeabi_ui2d>
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4650      	mov	r0, sl
 800cdb2:	4659      	mov	r1, fp
 800cdb4:	f7f3 fa8a 	bl	80002cc <__adddf3>
 800cdb8:	4682      	mov	sl, r0
 800cdba:	468b      	mov	fp, r1
 800cdbc:	2d0f      	cmp	r5, #15
 800cdbe:	dc38      	bgt.n	800ce32 <_strtod_l+0x452>
 800cdc0:	9b06      	ldr	r3, [sp, #24]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f43f ae50 	beq.w	800ca68 <_strtod_l+0x88>
 800cdc8:	dd24      	ble.n	800ce14 <_strtod_l+0x434>
 800cdca:	2b16      	cmp	r3, #22
 800cdcc:	dc0b      	bgt.n	800cde6 <_strtod_l+0x406>
 800cdce:	496d      	ldr	r1, [pc, #436]	; (800cf84 <_strtod_l+0x5a4>)
 800cdd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cdd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdd8:	4652      	mov	r2, sl
 800cdda:	465b      	mov	r3, fp
 800cddc:	f7f3 fc2c 	bl	8000638 <__aeabi_dmul>
 800cde0:	4682      	mov	sl, r0
 800cde2:	468b      	mov	fp, r1
 800cde4:	e640      	b.n	800ca68 <_strtod_l+0x88>
 800cde6:	9a06      	ldr	r2, [sp, #24]
 800cde8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cdec:	4293      	cmp	r3, r2
 800cdee:	db20      	blt.n	800ce32 <_strtod_l+0x452>
 800cdf0:	4c64      	ldr	r4, [pc, #400]	; (800cf84 <_strtod_l+0x5a4>)
 800cdf2:	f1c5 050f 	rsb	r5, r5, #15
 800cdf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cdfa:	4652      	mov	r2, sl
 800cdfc:	465b      	mov	r3, fp
 800cdfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce02:	f7f3 fc19 	bl	8000638 <__aeabi_dmul>
 800ce06:	9b06      	ldr	r3, [sp, #24]
 800ce08:	1b5d      	subs	r5, r3, r5
 800ce0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ce0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce12:	e7e3      	b.n	800cddc <_strtod_l+0x3fc>
 800ce14:	9b06      	ldr	r3, [sp, #24]
 800ce16:	3316      	adds	r3, #22
 800ce18:	db0b      	blt.n	800ce32 <_strtod_l+0x452>
 800ce1a:	9b05      	ldr	r3, [sp, #20]
 800ce1c:	1b9e      	subs	r6, r3, r6
 800ce1e:	4b59      	ldr	r3, [pc, #356]	; (800cf84 <_strtod_l+0x5a4>)
 800ce20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ce24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce28:	4650      	mov	r0, sl
 800ce2a:	4659      	mov	r1, fp
 800ce2c:	f7f3 fd2e 	bl	800088c <__aeabi_ddiv>
 800ce30:	e7d6      	b.n	800cde0 <_strtod_l+0x400>
 800ce32:	9b06      	ldr	r3, [sp, #24]
 800ce34:	eba5 0808 	sub.w	r8, r5, r8
 800ce38:	4498      	add	r8, r3
 800ce3a:	f1b8 0f00 	cmp.w	r8, #0
 800ce3e:	dd74      	ble.n	800cf2a <_strtod_l+0x54a>
 800ce40:	f018 030f 	ands.w	r3, r8, #15
 800ce44:	d00a      	beq.n	800ce5c <_strtod_l+0x47c>
 800ce46:	494f      	ldr	r1, [pc, #316]	; (800cf84 <_strtod_l+0x5a4>)
 800ce48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce4c:	4652      	mov	r2, sl
 800ce4e:	465b      	mov	r3, fp
 800ce50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce54:	f7f3 fbf0 	bl	8000638 <__aeabi_dmul>
 800ce58:	4682      	mov	sl, r0
 800ce5a:	468b      	mov	fp, r1
 800ce5c:	f038 080f 	bics.w	r8, r8, #15
 800ce60:	d04f      	beq.n	800cf02 <_strtod_l+0x522>
 800ce62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ce66:	dd22      	ble.n	800ceae <_strtod_l+0x4ce>
 800ce68:	2500      	movs	r5, #0
 800ce6a:	462e      	mov	r6, r5
 800ce6c:	9507      	str	r5, [sp, #28]
 800ce6e:	9505      	str	r5, [sp, #20]
 800ce70:	2322      	movs	r3, #34	; 0x22
 800ce72:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cf8c <_strtod_l+0x5ac>
 800ce76:	6023      	str	r3, [r4, #0]
 800ce78:	f04f 0a00 	mov.w	sl, #0
 800ce7c:	9b07      	ldr	r3, [sp, #28]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f43f adf2 	beq.w	800ca68 <_strtod_l+0x88>
 800ce84:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce86:	4620      	mov	r0, r4
 800ce88:	f000 ffda 	bl	800de40 <_Bfree>
 800ce8c:	9905      	ldr	r1, [sp, #20]
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 ffd6 	bl	800de40 <_Bfree>
 800ce94:	4631      	mov	r1, r6
 800ce96:	4620      	mov	r0, r4
 800ce98:	f000 ffd2 	bl	800de40 <_Bfree>
 800ce9c:	9907      	ldr	r1, [sp, #28]
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f000 ffce 	bl	800de40 <_Bfree>
 800cea4:	4629      	mov	r1, r5
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 ffca 	bl	800de40 <_Bfree>
 800ceac:	e5dc      	b.n	800ca68 <_strtod_l+0x88>
 800ceae:	4b36      	ldr	r3, [pc, #216]	; (800cf88 <_strtod_l+0x5a8>)
 800ceb0:	9304      	str	r3, [sp, #16]
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ceb8:	4650      	mov	r0, sl
 800ceba:	4659      	mov	r1, fp
 800cebc:	4699      	mov	r9, r3
 800cebe:	f1b8 0f01 	cmp.w	r8, #1
 800cec2:	dc21      	bgt.n	800cf08 <_strtod_l+0x528>
 800cec4:	b10b      	cbz	r3, 800ceca <_strtod_l+0x4ea>
 800cec6:	4682      	mov	sl, r0
 800cec8:	468b      	mov	fp, r1
 800ceca:	4b2f      	ldr	r3, [pc, #188]	; (800cf88 <_strtod_l+0x5a8>)
 800cecc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ced0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ced4:	4652      	mov	r2, sl
 800ced6:	465b      	mov	r3, fp
 800ced8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cedc:	f7f3 fbac 	bl	8000638 <__aeabi_dmul>
 800cee0:	4b2a      	ldr	r3, [pc, #168]	; (800cf8c <_strtod_l+0x5ac>)
 800cee2:	460a      	mov	r2, r1
 800cee4:	400b      	ands	r3, r1
 800cee6:	492a      	ldr	r1, [pc, #168]	; (800cf90 <_strtod_l+0x5b0>)
 800cee8:	428b      	cmp	r3, r1
 800ceea:	4682      	mov	sl, r0
 800ceec:	d8bc      	bhi.n	800ce68 <_strtod_l+0x488>
 800ceee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cef2:	428b      	cmp	r3, r1
 800cef4:	bf86      	itte	hi
 800cef6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cf94 <_strtod_l+0x5b4>
 800cefa:	f04f 3aff 	movhi.w	sl, #4294967295
 800cefe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cf02:	2300      	movs	r3, #0
 800cf04:	9304      	str	r3, [sp, #16]
 800cf06:	e084      	b.n	800d012 <_strtod_l+0x632>
 800cf08:	f018 0f01 	tst.w	r8, #1
 800cf0c:	d005      	beq.n	800cf1a <_strtod_l+0x53a>
 800cf0e:	9b04      	ldr	r3, [sp, #16]
 800cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf14:	f7f3 fb90 	bl	8000638 <__aeabi_dmul>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	9a04      	ldr	r2, [sp, #16]
 800cf1c:	3208      	adds	r2, #8
 800cf1e:	f109 0901 	add.w	r9, r9, #1
 800cf22:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cf26:	9204      	str	r2, [sp, #16]
 800cf28:	e7c9      	b.n	800cebe <_strtod_l+0x4de>
 800cf2a:	d0ea      	beq.n	800cf02 <_strtod_l+0x522>
 800cf2c:	f1c8 0800 	rsb	r8, r8, #0
 800cf30:	f018 020f 	ands.w	r2, r8, #15
 800cf34:	d00a      	beq.n	800cf4c <_strtod_l+0x56c>
 800cf36:	4b13      	ldr	r3, [pc, #76]	; (800cf84 <_strtod_l+0x5a4>)
 800cf38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf3c:	4650      	mov	r0, sl
 800cf3e:	4659      	mov	r1, fp
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	f7f3 fca2 	bl	800088c <__aeabi_ddiv>
 800cf48:	4682      	mov	sl, r0
 800cf4a:	468b      	mov	fp, r1
 800cf4c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cf50:	d0d7      	beq.n	800cf02 <_strtod_l+0x522>
 800cf52:	f1b8 0f1f 	cmp.w	r8, #31
 800cf56:	dd1f      	ble.n	800cf98 <_strtod_l+0x5b8>
 800cf58:	2500      	movs	r5, #0
 800cf5a:	462e      	mov	r6, r5
 800cf5c:	9507      	str	r5, [sp, #28]
 800cf5e:	9505      	str	r5, [sp, #20]
 800cf60:	2322      	movs	r3, #34	; 0x22
 800cf62:	f04f 0a00 	mov.w	sl, #0
 800cf66:	f04f 0b00 	mov.w	fp, #0
 800cf6a:	6023      	str	r3, [r4, #0]
 800cf6c:	e786      	b.n	800ce7c <_strtod_l+0x49c>
 800cf6e:	bf00      	nop
 800cf70:	0800fa3d 	.word	0x0800fa3d
 800cf74:	0800fa54 	.word	0x0800fa54
 800cf78:	0800fa34 	.word	0x0800fa34
 800cf7c:	0800fa37 	.word	0x0800fa37
 800cf80:	0800fcc7 	.word	0x0800fcc7
 800cf84:	0800fbb8 	.word	0x0800fbb8
 800cf88:	0800fb90 	.word	0x0800fb90
 800cf8c:	7ff00000 	.word	0x7ff00000
 800cf90:	7ca00000 	.word	0x7ca00000
 800cf94:	7fefffff 	.word	0x7fefffff
 800cf98:	f018 0310 	ands.w	r3, r8, #16
 800cf9c:	bf18      	it	ne
 800cf9e:	236a      	movne	r3, #106	; 0x6a
 800cfa0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d350 <_strtod_l+0x970>
 800cfa4:	9304      	str	r3, [sp, #16]
 800cfa6:	4650      	mov	r0, sl
 800cfa8:	4659      	mov	r1, fp
 800cfaa:	2300      	movs	r3, #0
 800cfac:	f018 0f01 	tst.w	r8, #1
 800cfb0:	d004      	beq.n	800cfbc <_strtod_l+0x5dc>
 800cfb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cfb6:	f7f3 fb3f 	bl	8000638 <__aeabi_dmul>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cfc0:	f109 0908 	add.w	r9, r9, #8
 800cfc4:	d1f2      	bne.n	800cfac <_strtod_l+0x5cc>
 800cfc6:	b10b      	cbz	r3, 800cfcc <_strtod_l+0x5ec>
 800cfc8:	4682      	mov	sl, r0
 800cfca:	468b      	mov	fp, r1
 800cfcc:	9b04      	ldr	r3, [sp, #16]
 800cfce:	b1c3      	cbz	r3, 800d002 <_strtod_l+0x622>
 800cfd0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cfd4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	4659      	mov	r1, fp
 800cfdc:	dd11      	ble.n	800d002 <_strtod_l+0x622>
 800cfde:	2b1f      	cmp	r3, #31
 800cfe0:	f340 8124 	ble.w	800d22c <_strtod_l+0x84c>
 800cfe4:	2b34      	cmp	r3, #52	; 0x34
 800cfe6:	bfde      	ittt	le
 800cfe8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cfec:	f04f 33ff 	movle.w	r3, #4294967295
 800cff0:	fa03 f202 	lslle.w	r2, r3, r2
 800cff4:	f04f 0a00 	mov.w	sl, #0
 800cff8:	bfcc      	ite	gt
 800cffa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cffe:	ea02 0b01 	andle.w	fp, r2, r1
 800d002:	2200      	movs	r2, #0
 800d004:	2300      	movs	r3, #0
 800d006:	4650      	mov	r0, sl
 800d008:	4659      	mov	r1, fp
 800d00a:	f7f3 fd7d 	bl	8000b08 <__aeabi_dcmpeq>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d1a2      	bne.n	800cf58 <_strtod_l+0x578>
 800d012:	9b07      	ldr	r3, [sp, #28]
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	9908      	ldr	r1, [sp, #32]
 800d018:	462b      	mov	r3, r5
 800d01a:	463a      	mov	r2, r7
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 ff77 	bl	800df10 <__s2b>
 800d022:	9007      	str	r0, [sp, #28]
 800d024:	2800      	cmp	r0, #0
 800d026:	f43f af1f 	beq.w	800ce68 <_strtod_l+0x488>
 800d02a:	9b05      	ldr	r3, [sp, #20]
 800d02c:	1b9e      	subs	r6, r3, r6
 800d02e:	9b06      	ldr	r3, [sp, #24]
 800d030:	2b00      	cmp	r3, #0
 800d032:	bfb4      	ite	lt
 800d034:	4633      	movlt	r3, r6
 800d036:	2300      	movge	r3, #0
 800d038:	930c      	str	r3, [sp, #48]	; 0x30
 800d03a:	9b06      	ldr	r3, [sp, #24]
 800d03c:	2500      	movs	r5, #0
 800d03e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d042:	9312      	str	r3, [sp, #72]	; 0x48
 800d044:	462e      	mov	r6, r5
 800d046:	9b07      	ldr	r3, [sp, #28]
 800d048:	4620      	mov	r0, r4
 800d04a:	6859      	ldr	r1, [r3, #4]
 800d04c:	f000 feb8 	bl	800ddc0 <_Balloc>
 800d050:	9005      	str	r0, [sp, #20]
 800d052:	2800      	cmp	r0, #0
 800d054:	f43f af0c 	beq.w	800ce70 <_strtod_l+0x490>
 800d058:	9b07      	ldr	r3, [sp, #28]
 800d05a:	691a      	ldr	r2, [r3, #16]
 800d05c:	3202      	adds	r2, #2
 800d05e:	f103 010c 	add.w	r1, r3, #12
 800d062:	0092      	lsls	r2, r2, #2
 800d064:	300c      	adds	r0, #12
 800d066:	f7ff fb3b 	bl	800c6e0 <memcpy>
 800d06a:	ec4b ab10 	vmov	d0, sl, fp
 800d06e:	aa1a      	add	r2, sp, #104	; 0x68
 800d070:	a919      	add	r1, sp, #100	; 0x64
 800d072:	4620      	mov	r0, r4
 800d074:	f001 fa92 	bl	800e59c <__d2b>
 800d078:	ec4b ab18 	vmov	d8, sl, fp
 800d07c:	9018      	str	r0, [sp, #96]	; 0x60
 800d07e:	2800      	cmp	r0, #0
 800d080:	f43f aef6 	beq.w	800ce70 <_strtod_l+0x490>
 800d084:	2101      	movs	r1, #1
 800d086:	4620      	mov	r0, r4
 800d088:	f000 ffdc 	bl	800e044 <__i2b>
 800d08c:	4606      	mov	r6, r0
 800d08e:	2800      	cmp	r0, #0
 800d090:	f43f aeee 	beq.w	800ce70 <_strtod_l+0x490>
 800d094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d096:	9904      	ldr	r1, [sp, #16]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bfab      	itete	ge
 800d09c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d09e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d0a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d0a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d0a6:	bfac      	ite	ge
 800d0a8:	eb03 0902 	addge.w	r9, r3, r2
 800d0ac:	1ad7      	sublt	r7, r2, r3
 800d0ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d0b0:	eba3 0801 	sub.w	r8, r3, r1
 800d0b4:	4490      	add	r8, r2
 800d0b6:	4ba1      	ldr	r3, [pc, #644]	; (800d33c <_strtod_l+0x95c>)
 800d0b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d0bc:	4598      	cmp	r8, r3
 800d0be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d0c2:	f280 80c7 	bge.w	800d254 <_strtod_l+0x874>
 800d0c6:	eba3 0308 	sub.w	r3, r3, r8
 800d0ca:	2b1f      	cmp	r3, #31
 800d0cc:	eba2 0203 	sub.w	r2, r2, r3
 800d0d0:	f04f 0101 	mov.w	r1, #1
 800d0d4:	f300 80b1 	bgt.w	800d23a <_strtod_l+0x85a>
 800d0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d0dc:	930d      	str	r3, [sp, #52]	; 0x34
 800d0de:	2300      	movs	r3, #0
 800d0e0:	9308      	str	r3, [sp, #32]
 800d0e2:	eb09 0802 	add.w	r8, r9, r2
 800d0e6:	9b04      	ldr	r3, [sp, #16]
 800d0e8:	45c1      	cmp	r9, r8
 800d0ea:	4417      	add	r7, r2
 800d0ec:	441f      	add	r7, r3
 800d0ee:	464b      	mov	r3, r9
 800d0f0:	bfa8      	it	ge
 800d0f2:	4643      	movge	r3, r8
 800d0f4:	42bb      	cmp	r3, r7
 800d0f6:	bfa8      	it	ge
 800d0f8:	463b      	movge	r3, r7
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	bfc2      	ittt	gt
 800d0fe:	eba8 0803 	subgt.w	r8, r8, r3
 800d102:	1aff      	subgt	r7, r7, r3
 800d104:	eba9 0903 	subgt.w	r9, r9, r3
 800d108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	dd17      	ble.n	800d13e <_strtod_l+0x75e>
 800d10e:	4631      	mov	r1, r6
 800d110:	461a      	mov	r2, r3
 800d112:	4620      	mov	r0, r4
 800d114:	f001 f856 	bl	800e1c4 <__pow5mult>
 800d118:	4606      	mov	r6, r0
 800d11a:	2800      	cmp	r0, #0
 800d11c:	f43f aea8 	beq.w	800ce70 <_strtod_l+0x490>
 800d120:	4601      	mov	r1, r0
 800d122:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d124:	4620      	mov	r0, r4
 800d126:	f000 ffa3 	bl	800e070 <__multiply>
 800d12a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d12c:	2800      	cmp	r0, #0
 800d12e:	f43f ae9f 	beq.w	800ce70 <_strtod_l+0x490>
 800d132:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d134:	4620      	mov	r0, r4
 800d136:	f000 fe83 	bl	800de40 <_Bfree>
 800d13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d13c:	9318      	str	r3, [sp, #96]	; 0x60
 800d13e:	f1b8 0f00 	cmp.w	r8, #0
 800d142:	f300 808c 	bgt.w	800d25e <_strtod_l+0x87e>
 800d146:	9b06      	ldr	r3, [sp, #24]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	dd08      	ble.n	800d15e <_strtod_l+0x77e>
 800d14c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d14e:	9905      	ldr	r1, [sp, #20]
 800d150:	4620      	mov	r0, r4
 800d152:	f001 f837 	bl	800e1c4 <__pow5mult>
 800d156:	9005      	str	r0, [sp, #20]
 800d158:	2800      	cmp	r0, #0
 800d15a:	f43f ae89 	beq.w	800ce70 <_strtod_l+0x490>
 800d15e:	2f00      	cmp	r7, #0
 800d160:	dd08      	ble.n	800d174 <_strtod_l+0x794>
 800d162:	9905      	ldr	r1, [sp, #20]
 800d164:	463a      	mov	r2, r7
 800d166:	4620      	mov	r0, r4
 800d168:	f001 f886 	bl	800e278 <__lshift>
 800d16c:	9005      	str	r0, [sp, #20]
 800d16e:	2800      	cmp	r0, #0
 800d170:	f43f ae7e 	beq.w	800ce70 <_strtod_l+0x490>
 800d174:	f1b9 0f00 	cmp.w	r9, #0
 800d178:	dd08      	ble.n	800d18c <_strtod_l+0x7ac>
 800d17a:	4631      	mov	r1, r6
 800d17c:	464a      	mov	r2, r9
 800d17e:	4620      	mov	r0, r4
 800d180:	f001 f87a 	bl	800e278 <__lshift>
 800d184:	4606      	mov	r6, r0
 800d186:	2800      	cmp	r0, #0
 800d188:	f43f ae72 	beq.w	800ce70 <_strtod_l+0x490>
 800d18c:	9a05      	ldr	r2, [sp, #20]
 800d18e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d190:	4620      	mov	r0, r4
 800d192:	f001 f8fd 	bl	800e390 <__mdiff>
 800d196:	4605      	mov	r5, r0
 800d198:	2800      	cmp	r0, #0
 800d19a:	f43f ae69 	beq.w	800ce70 <_strtod_l+0x490>
 800d19e:	68c3      	ldr	r3, [r0, #12]
 800d1a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	60c3      	str	r3, [r0, #12]
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	f001 f8d6 	bl	800e358 <__mcmp>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	da60      	bge.n	800d272 <_strtod_l+0x892>
 800d1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1b2:	ea53 030a 	orrs.w	r3, r3, sl
 800d1b6:	f040 8082 	bne.w	800d2be <_strtod_l+0x8de>
 800d1ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d17d      	bne.n	800d2be <_strtod_l+0x8de>
 800d1c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d1c6:	0d1b      	lsrs	r3, r3, #20
 800d1c8:	051b      	lsls	r3, r3, #20
 800d1ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d1ce:	d976      	bls.n	800d2be <_strtod_l+0x8de>
 800d1d0:	696b      	ldr	r3, [r5, #20]
 800d1d2:	b913      	cbnz	r3, 800d1da <_strtod_l+0x7fa>
 800d1d4:	692b      	ldr	r3, [r5, #16]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	dd71      	ble.n	800d2be <_strtod_l+0x8de>
 800d1da:	4629      	mov	r1, r5
 800d1dc:	2201      	movs	r2, #1
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f001 f84a 	bl	800e278 <__lshift>
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	f001 f8b6 	bl	800e358 <__mcmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	dd66      	ble.n	800d2be <_strtod_l+0x8de>
 800d1f0:	9904      	ldr	r1, [sp, #16]
 800d1f2:	4a53      	ldr	r2, [pc, #332]	; (800d340 <_strtod_l+0x960>)
 800d1f4:	465b      	mov	r3, fp
 800d1f6:	2900      	cmp	r1, #0
 800d1f8:	f000 8081 	beq.w	800d2fe <_strtod_l+0x91e>
 800d1fc:	ea02 010b 	and.w	r1, r2, fp
 800d200:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d204:	dc7b      	bgt.n	800d2fe <_strtod_l+0x91e>
 800d206:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d20a:	f77f aea9 	ble.w	800cf60 <_strtod_l+0x580>
 800d20e:	4b4d      	ldr	r3, [pc, #308]	; (800d344 <_strtod_l+0x964>)
 800d210:	4650      	mov	r0, sl
 800d212:	4659      	mov	r1, fp
 800d214:	2200      	movs	r2, #0
 800d216:	f7f3 fa0f 	bl	8000638 <__aeabi_dmul>
 800d21a:	460b      	mov	r3, r1
 800d21c:	4303      	orrs	r3, r0
 800d21e:	bf08      	it	eq
 800d220:	2322      	moveq	r3, #34	; 0x22
 800d222:	4682      	mov	sl, r0
 800d224:	468b      	mov	fp, r1
 800d226:	bf08      	it	eq
 800d228:	6023      	streq	r3, [r4, #0]
 800d22a:	e62b      	b.n	800ce84 <_strtod_l+0x4a4>
 800d22c:	f04f 32ff 	mov.w	r2, #4294967295
 800d230:	fa02 f303 	lsl.w	r3, r2, r3
 800d234:	ea03 0a0a 	and.w	sl, r3, sl
 800d238:	e6e3      	b.n	800d002 <_strtod_l+0x622>
 800d23a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d23e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d242:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d246:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d24a:	fa01 f308 	lsl.w	r3, r1, r8
 800d24e:	9308      	str	r3, [sp, #32]
 800d250:	910d      	str	r1, [sp, #52]	; 0x34
 800d252:	e746      	b.n	800d0e2 <_strtod_l+0x702>
 800d254:	2300      	movs	r3, #0
 800d256:	9308      	str	r3, [sp, #32]
 800d258:	2301      	movs	r3, #1
 800d25a:	930d      	str	r3, [sp, #52]	; 0x34
 800d25c:	e741      	b.n	800d0e2 <_strtod_l+0x702>
 800d25e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d260:	4642      	mov	r2, r8
 800d262:	4620      	mov	r0, r4
 800d264:	f001 f808 	bl	800e278 <__lshift>
 800d268:	9018      	str	r0, [sp, #96]	; 0x60
 800d26a:	2800      	cmp	r0, #0
 800d26c:	f47f af6b 	bne.w	800d146 <_strtod_l+0x766>
 800d270:	e5fe      	b.n	800ce70 <_strtod_l+0x490>
 800d272:	465f      	mov	r7, fp
 800d274:	d16e      	bne.n	800d354 <_strtod_l+0x974>
 800d276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d27c:	b342      	cbz	r2, 800d2d0 <_strtod_l+0x8f0>
 800d27e:	4a32      	ldr	r2, [pc, #200]	; (800d348 <_strtod_l+0x968>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d128      	bne.n	800d2d6 <_strtod_l+0x8f6>
 800d284:	9b04      	ldr	r3, [sp, #16]
 800d286:	4651      	mov	r1, sl
 800d288:	b1eb      	cbz	r3, 800d2c6 <_strtod_l+0x8e6>
 800d28a:	4b2d      	ldr	r3, [pc, #180]	; (800d340 <_strtod_l+0x960>)
 800d28c:	403b      	ands	r3, r7
 800d28e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d292:	f04f 32ff 	mov.w	r2, #4294967295
 800d296:	d819      	bhi.n	800d2cc <_strtod_l+0x8ec>
 800d298:	0d1b      	lsrs	r3, r3, #20
 800d29a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d29e:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a2:	4299      	cmp	r1, r3
 800d2a4:	d117      	bne.n	800d2d6 <_strtod_l+0x8f6>
 800d2a6:	4b29      	ldr	r3, [pc, #164]	; (800d34c <_strtod_l+0x96c>)
 800d2a8:	429f      	cmp	r7, r3
 800d2aa:	d102      	bne.n	800d2b2 <_strtod_l+0x8d2>
 800d2ac:	3101      	adds	r1, #1
 800d2ae:	f43f addf 	beq.w	800ce70 <_strtod_l+0x490>
 800d2b2:	4b23      	ldr	r3, [pc, #140]	; (800d340 <_strtod_l+0x960>)
 800d2b4:	403b      	ands	r3, r7
 800d2b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d2ba:	f04f 0a00 	mov.w	sl, #0
 800d2be:	9b04      	ldr	r3, [sp, #16]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1a4      	bne.n	800d20e <_strtod_l+0x82e>
 800d2c4:	e5de      	b.n	800ce84 <_strtod_l+0x4a4>
 800d2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ca:	e7ea      	b.n	800d2a2 <_strtod_l+0x8c2>
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	e7e8      	b.n	800d2a2 <_strtod_l+0x8c2>
 800d2d0:	ea53 030a 	orrs.w	r3, r3, sl
 800d2d4:	d08c      	beq.n	800d1f0 <_strtod_l+0x810>
 800d2d6:	9b08      	ldr	r3, [sp, #32]
 800d2d8:	b1db      	cbz	r3, 800d312 <_strtod_l+0x932>
 800d2da:	423b      	tst	r3, r7
 800d2dc:	d0ef      	beq.n	800d2be <_strtod_l+0x8de>
 800d2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2e0:	9a04      	ldr	r2, [sp, #16]
 800d2e2:	4650      	mov	r0, sl
 800d2e4:	4659      	mov	r1, fp
 800d2e6:	b1c3      	cbz	r3, 800d31a <_strtod_l+0x93a>
 800d2e8:	f7ff fb5e 	bl	800c9a8 <sulp>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	ec51 0b18 	vmov	r0, r1, d8
 800d2f4:	f7f2 ffea 	bl	80002cc <__adddf3>
 800d2f8:	4682      	mov	sl, r0
 800d2fa:	468b      	mov	fp, r1
 800d2fc:	e7df      	b.n	800d2be <_strtod_l+0x8de>
 800d2fe:	4013      	ands	r3, r2
 800d300:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d304:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d308:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d30c:	f04f 3aff 	mov.w	sl, #4294967295
 800d310:	e7d5      	b.n	800d2be <_strtod_l+0x8de>
 800d312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d314:	ea13 0f0a 	tst.w	r3, sl
 800d318:	e7e0      	b.n	800d2dc <_strtod_l+0x8fc>
 800d31a:	f7ff fb45 	bl	800c9a8 <sulp>
 800d31e:	4602      	mov	r2, r0
 800d320:	460b      	mov	r3, r1
 800d322:	ec51 0b18 	vmov	r0, r1, d8
 800d326:	f7f2 ffcf 	bl	80002c8 <__aeabi_dsub>
 800d32a:	2200      	movs	r2, #0
 800d32c:	2300      	movs	r3, #0
 800d32e:	4682      	mov	sl, r0
 800d330:	468b      	mov	fp, r1
 800d332:	f7f3 fbe9 	bl	8000b08 <__aeabi_dcmpeq>
 800d336:	2800      	cmp	r0, #0
 800d338:	d0c1      	beq.n	800d2be <_strtod_l+0x8de>
 800d33a:	e611      	b.n	800cf60 <_strtod_l+0x580>
 800d33c:	fffffc02 	.word	0xfffffc02
 800d340:	7ff00000 	.word	0x7ff00000
 800d344:	39500000 	.word	0x39500000
 800d348:	000fffff 	.word	0x000fffff
 800d34c:	7fefffff 	.word	0x7fefffff
 800d350:	0800fa68 	.word	0x0800fa68
 800d354:	4631      	mov	r1, r6
 800d356:	4628      	mov	r0, r5
 800d358:	f001 f97c 	bl	800e654 <__ratio>
 800d35c:	ec59 8b10 	vmov	r8, r9, d0
 800d360:	ee10 0a10 	vmov	r0, s0
 800d364:	2200      	movs	r2, #0
 800d366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d36a:	4649      	mov	r1, r9
 800d36c:	f7f3 fbe0 	bl	8000b30 <__aeabi_dcmple>
 800d370:	2800      	cmp	r0, #0
 800d372:	d07a      	beq.n	800d46a <_strtod_l+0xa8a>
 800d374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d376:	2b00      	cmp	r3, #0
 800d378:	d04a      	beq.n	800d410 <_strtod_l+0xa30>
 800d37a:	4b95      	ldr	r3, [pc, #596]	; (800d5d0 <_strtod_l+0xbf0>)
 800d37c:	2200      	movs	r2, #0
 800d37e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d382:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d5d0 <_strtod_l+0xbf0>
 800d386:	f04f 0800 	mov.w	r8, #0
 800d38a:	4b92      	ldr	r3, [pc, #584]	; (800d5d4 <_strtod_l+0xbf4>)
 800d38c:	403b      	ands	r3, r7
 800d38e:	930d      	str	r3, [sp, #52]	; 0x34
 800d390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d392:	4b91      	ldr	r3, [pc, #580]	; (800d5d8 <_strtod_l+0xbf8>)
 800d394:	429a      	cmp	r2, r3
 800d396:	f040 80b0 	bne.w	800d4fa <_strtod_l+0xb1a>
 800d39a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d39e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d3a2:	ec4b ab10 	vmov	d0, sl, fp
 800d3a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d3aa:	f001 f87b 	bl	800e4a4 <__ulp>
 800d3ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d3b2:	ec53 2b10 	vmov	r2, r3, d0
 800d3b6:	f7f3 f93f 	bl	8000638 <__aeabi_dmul>
 800d3ba:	4652      	mov	r2, sl
 800d3bc:	465b      	mov	r3, fp
 800d3be:	f7f2 ff85 	bl	80002cc <__adddf3>
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	4983      	ldr	r1, [pc, #524]	; (800d5d4 <_strtod_l+0xbf4>)
 800d3c6:	4a85      	ldr	r2, [pc, #532]	; (800d5dc <_strtod_l+0xbfc>)
 800d3c8:	4019      	ands	r1, r3
 800d3ca:	4291      	cmp	r1, r2
 800d3cc:	4682      	mov	sl, r0
 800d3ce:	d960      	bls.n	800d492 <_strtod_l+0xab2>
 800d3d0:	ee18 3a90 	vmov	r3, s17
 800d3d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d104      	bne.n	800d3e6 <_strtod_l+0xa06>
 800d3dc:	ee18 3a10 	vmov	r3, s16
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	f43f ad45 	beq.w	800ce70 <_strtod_l+0x490>
 800d3e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d5e8 <_strtod_l+0xc08>
 800d3ea:	f04f 3aff 	mov.w	sl, #4294967295
 800d3ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f000 fd25 	bl	800de40 <_Bfree>
 800d3f6:	9905      	ldr	r1, [sp, #20]
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f000 fd21 	bl	800de40 <_Bfree>
 800d3fe:	4631      	mov	r1, r6
 800d400:	4620      	mov	r0, r4
 800d402:	f000 fd1d 	bl	800de40 <_Bfree>
 800d406:	4629      	mov	r1, r5
 800d408:	4620      	mov	r0, r4
 800d40a:	f000 fd19 	bl	800de40 <_Bfree>
 800d40e:	e61a      	b.n	800d046 <_strtod_l+0x666>
 800d410:	f1ba 0f00 	cmp.w	sl, #0
 800d414:	d11b      	bne.n	800d44e <_strtod_l+0xa6e>
 800d416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d41a:	b9f3      	cbnz	r3, 800d45a <_strtod_l+0xa7a>
 800d41c:	4b6c      	ldr	r3, [pc, #432]	; (800d5d0 <_strtod_l+0xbf0>)
 800d41e:	2200      	movs	r2, #0
 800d420:	4640      	mov	r0, r8
 800d422:	4649      	mov	r1, r9
 800d424:	f7f3 fb7a 	bl	8000b1c <__aeabi_dcmplt>
 800d428:	b9d0      	cbnz	r0, 800d460 <_strtod_l+0xa80>
 800d42a:	4640      	mov	r0, r8
 800d42c:	4649      	mov	r1, r9
 800d42e:	4b6c      	ldr	r3, [pc, #432]	; (800d5e0 <_strtod_l+0xc00>)
 800d430:	2200      	movs	r2, #0
 800d432:	f7f3 f901 	bl	8000638 <__aeabi_dmul>
 800d436:	4680      	mov	r8, r0
 800d438:	4689      	mov	r9, r1
 800d43a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d43e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d442:	9315      	str	r3, [sp, #84]	; 0x54
 800d444:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d448:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d44c:	e79d      	b.n	800d38a <_strtod_l+0x9aa>
 800d44e:	f1ba 0f01 	cmp.w	sl, #1
 800d452:	d102      	bne.n	800d45a <_strtod_l+0xa7a>
 800d454:	2f00      	cmp	r7, #0
 800d456:	f43f ad83 	beq.w	800cf60 <_strtod_l+0x580>
 800d45a:	4b62      	ldr	r3, [pc, #392]	; (800d5e4 <_strtod_l+0xc04>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	e78e      	b.n	800d37e <_strtod_l+0x99e>
 800d460:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d5e0 <_strtod_l+0xc00>
 800d464:	f04f 0800 	mov.w	r8, #0
 800d468:	e7e7      	b.n	800d43a <_strtod_l+0xa5a>
 800d46a:	4b5d      	ldr	r3, [pc, #372]	; (800d5e0 <_strtod_l+0xc00>)
 800d46c:	4640      	mov	r0, r8
 800d46e:	4649      	mov	r1, r9
 800d470:	2200      	movs	r2, #0
 800d472:	f7f3 f8e1 	bl	8000638 <__aeabi_dmul>
 800d476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d478:	4680      	mov	r8, r0
 800d47a:	4689      	mov	r9, r1
 800d47c:	b933      	cbnz	r3, 800d48c <_strtod_l+0xaac>
 800d47e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d482:	900e      	str	r0, [sp, #56]	; 0x38
 800d484:	930f      	str	r3, [sp, #60]	; 0x3c
 800d486:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d48a:	e7dd      	b.n	800d448 <_strtod_l+0xa68>
 800d48c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d490:	e7f9      	b.n	800d486 <_strtod_l+0xaa6>
 800d492:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d496:	9b04      	ldr	r3, [sp, #16]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1a8      	bne.n	800d3ee <_strtod_l+0xa0e>
 800d49c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4a2:	0d1b      	lsrs	r3, r3, #20
 800d4a4:	051b      	lsls	r3, r3, #20
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d1a1      	bne.n	800d3ee <_strtod_l+0xa0e>
 800d4aa:	4640      	mov	r0, r8
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	f7f3 fc23 	bl	8000cf8 <__aeabi_d2lz>
 800d4b2:	f7f3 f893 	bl	80005dc <__aeabi_l2d>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	4640      	mov	r0, r8
 800d4bc:	4649      	mov	r1, r9
 800d4be:	f7f2 ff03 	bl	80002c8 <__aeabi_dsub>
 800d4c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4c8:	ea43 030a 	orr.w	r3, r3, sl
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	4680      	mov	r8, r0
 800d4d0:	4689      	mov	r9, r1
 800d4d2:	d055      	beq.n	800d580 <_strtod_l+0xba0>
 800d4d4:	a336      	add	r3, pc, #216	; (adr r3, 800d5b0 <_strtod_l+0xbd0>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	f7f3 fb1f 	bl	8000b1c <__aeabi_dcmplt>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	f47f acd0 	bne.w	800ce84 <_strtod_l+0x4a4>
 800d4e4:	a334      	add	r3, pc, #208	; (adr r3, 800d5b8 <_strtod_l+0xbd8>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	4640      	mov	r0, r8
 800d4ec:	4649      	mov	r1, r9
 800d4ee:	f7f3 fb33 	bl	8000b58 <__aeabi_dcmpgt>
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	f43f af7b 	beq.w	800d3ee <_strtod_l+0xa0e>
 800d4f8:	e4c4      	b.n	800ce84 <_strtod_l+0x4a4>
 800d4fa:	9b04      	ldr	r3, [sp, #16]
 800d4fc:	b333      	cbz	r3, 800d54c <_strtod_l+0xb6c>
 800d4fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d500:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d504:	d822      	bhi.n	800d54c <_strtod_l+0xb6c>
 800d506:	a32e      	add	r3, pc, #184	; (adr r3, 800d5c0 <_strtod_l+0xbe0>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	4640      	mov	r0, r8
 800d50e:	4649      	mov	r1, r9
 800d510:	f7f3 fb0e 	bl	8000b30 <__aeabi_dcmple>
 800d514:	b1a0      	cbz	r0, 800d540 <_strtod_l+0xb60>
 800d516:	4649      	mov	r1, r9
 800d518:	4640      	mov	r0, r8
 800d51a:	f7f3 fb65 	bl	8000be8 <__aeabi_d2uiz>
 800d51e:	2801      	cmp	r0, #1
 800d520:	bf38      	it	cc
 800d522:	2001      	movcc	r0, #1
 800d524:	f7f3 f80e 	bl	8000544 <__aeabi_ui2d>
 800d528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d52a:	4680      	mov	r8, r0
 800d52c:	4689      	mov	r9, r1
 800d52e:	bb23      	cbnz	r3, 800d57a <_strtod_l+0xb9a>
 800d530:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d534:	9010      	str	r0, [sp, #64]	; 0x40
 800d536:	9311      	str	r3, [sp, #68]	; 0x44
 800d538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d53c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d544:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d548:	1a9b      	subs	r3, r3, r2
 800d54a:	9309      	str	r3, [sp, #36]	; 0x24
 800d54c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d550:	eeb0 0a48 	vmov.f32	s0, s16
 800d554:	eef0 0a68 	vmov.f32	s1, s17
 800d558:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d55c:	f000 ffa2 	bl	800e4a4 <__ulp>
 800d560:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d564:	ec53 2b10 	vmov	r2, r3, d0
 800d568:	f7f3 f866 	bl	8000638 <__aeabi_dmul>
 800d56c:	ec53 2b18 	vmov	r2, r3, d8
 800d570:	f7f2 feac 	bl	80002cc <__adddf3>
 800d574:	4682      	mov	sl, r0
 800d576:	468b      	mov	fp, r1
 800d578:	e78d      	b.n	800d496 <_strtod_l+0xab6>
 800d57a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d57e:	e7db      	b.n	800d538 <_strtod_l+0xb58>
 800d580:	a311      	add	r3, pc, #68	; (adr r3, 800d5c8 <_strtod_l+0xbe8>)
 800d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d586:	f7f3 fac9 	bl	8000b1c <__aeabi_dcmplt>
 800d58a:	e7b2      	b.n	800d4f2 <_strtod_l+0xb12>
 800d58c:	2300      	movs	r3, #0
 800d58e:	930a      	str	r3, [sp, #40]	; 0x28
 800d590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d592:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d594:	6013      	str	r3, [r2, #0]
 800d596:	f7ff ba6b 	b.w	800ca70 <_strtod_l+0x90>
 800d59a:	2a65      	cmp	r2, #101	; 0x65
 800d59c:	f43f ab5f 	beq.w	800cc5e <_strtod_l+0x27e>
 800d5a0:	2a45      	cmp	r2, #69	; 0x45
 800d5a2:	f43f ab5c 	beq.w	800cc5e <_strtod_l+0x27e>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	f7ff bb94 	b.w	800ccd4 <_strtod_l+0x2f4>
 800d5ac:	f3af 8000 	nop.w
 800d5b0:	94a03595 	.word	0x94a03595
 800d5b4:	3fdfffff 	.word	0x3fdfffff
 800d5b8:	35afe535 	.word	0x35afe535
 800d5bc:	3fe00000 	.word	0x3fe00000
 800d5c0:	ffc00000 	.word	0xffc00000
 800d5c4:	41dfffff 	.word	0x41dfffff
 800d5c8:	94a03595 	.word	0x94a03595
 800d5cc:	3fcfffff 	.word	0x3fcfffff
 800d5d0:	3ff00000 	.word	0x3ff00000
 800d5d4:	7ff00000 	.word	0x7ff00000
 800d5d8:	7fe00000 	.word	0x7fe00000
 800d5dc:	7c9fffff 	.word	0x7c9fffff
 800d5e0:	3fe00000 	.word	0x3fe00000
 800d5e4:	bff00000 	.word	0xbff00000
 800d5e8:	7fefffff 	.word	0x7fefffff

0800d5ec <strtof>:
 800d5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800d6a0 <strtof+0xb4>
 800d5f4:	4b26      	ldr	r3, [pc, #152]	; (800d690 <strtof+0xa4>)
 800d5f6:	460a      	mov	r2, r1
 800d5f8:	ed2d 8b02 	vpush	{d8}
 800d5fc:	4601      	mov	r1, r0
 800d5fe:	f8d8 0000 	ldr.w	r0, [r8]
 800d602:	f7ff f9ed 	bl	800c9e0 <_strtod_l>
 800d606:	ec55 4b10 	vmov	r4, r5, d0
 800d60a:	ee10 2a10 	vmov	r2, s0
 800d60e:	ee10 0a10 	vmov	r0, s0
 800d612:	462b      	mov	r3, r5
 800d614:	4629      	mov	r1, r5
 800d616:	f7f3 faa9 	bl	8000b6c <__aeabi_dcmpun>
 800d61a:	b190      	cbz	r0, 800d642 <strtof+0x56>
 800d61c:	2d00      	cmp	r5, #0
 800d61e:	481d      	ldr	r0, [pc, #116]	; (800d694 <strtof+0xa8>)
 800d620:	da09      	bge.n	800d636 <strtof+0x4a>
 800d622:	f001 f8ad 	bl	800e780 <nanf>
 800d626:	eeb1 8a40 	vneg.f32	s16, s0
 800d62a:	eeb0 0a48 	vmov.f32	s0, s16
 800d62e:	ecbd 8b02 	vpop	{d8}
 800d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d636:	ecbd 8b02 	vpop	{d8}
 800d63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d63e:	f001 b89f 	b.w	800e780 <nanf>
 800d642:	4620      	mov	r0, r4
 800d644:	4629      	mov	r1, r5
 800d646:	f7f3 faef 	bl	8000c28 <__aeabi_d2f>
 800d64a:	ee08 0a10 	vmov	s16, r0
 800d64e:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d698 <strtof+0xac>
 800d652:	eeb0 7ac8 	vabs.f32	s14, s16
 800d656:	eeb4 7a67 	vcmp.f32	s14, s15
 800d65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65e:	dde4      	ble.n	800d62a <strtof+0x3e>
 800d660:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800d664:	4b0d      	ldr	r3, [pc, #52]	; (800d69c <strtof+0xb0>)
 800d666:	f04f 32ff 	mov.w	r2, #4294967295
 800d66a:	4620      	mov	r0, r4
 800d66c:	4639      	mov	r1, r7
 800d66e:	f7f3 fa7d 	bl	8000b6c <__aeabi_dcmpun>
 800d672:	b940      	cbnz	r0, 800d686 <strtof+0x9a>
 800d674:	4b09      	ldr	r3, [pc, #36]	; (800d69c <strtof+0xb0>)
 800d676:	f04f 32ff 	mov.w	r2, #4294967295
 800d67a:	4620      	mov	r0, r4
 800d67c:	4639      	mov	r1, r7
 800d67e:	f7f3 fa57 	bl	8000b30 <__aeabi_dcmple>
 800d682:	2800      	cmp	r0, #0
 800d684:	d0d1      	beq.n	800d62a <strtof+0x3e>
 800d686:	f8d8 3000 	ldr.w	r3, [r8]
 800d68a:	2222      	movs	r2, #34	; 0x22
 800d68c:	601a      	str	r2, [r3, #0]
 800d68e:	e7cc      	b.n	800d62a <strtof+0x3e>
 800d690:	20000154 	.word	0x20000154
 800d694:	0800fcc7 	.word	0x0800fcc7
 800d698:	7f7fffff 	.word	0x7f7fffff
 800d69c:	7fefffff 	.word	0x7fefffff
 800d6a0:	200000ec 	.word	0x200000ec

0800d6a4 <rshift>:
 800d6a4:	6903      	ldr	r3, [r0, #16]
 800d6a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d6aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d6b2:	f100 0414 	add.w	r4, r0, #20
 800d6b6:	dd45      	ble.n	800d744 <rshift+0xa0>
 800d6b8:	f011 011f 	ands.w	r1, r1, #31
 800d6bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d6c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d6c4:	d10c      	bne.n	800d6e0 <rshift+0x3c>
 800d6c6:	f100 0710 	add.w	r7, r0, #16
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	42b1      	cmp	r1, r6
 800d6ce:	d334      	bcc.n	800d73a <rshift+0x96>
 800d6d0:	1a9b      	subs	r3, r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	1eea      	subs	r2, r5, #3
 800d6d6:	4296      	cmp	r6, r2
 800d6d8:	bf38      	it	cc
 800d6da:	2300      	movcc	r3, #0
 800d6dc:	4423      	add	r3, r4
 800d6de:	e015      	b.n	800d70c <rshift+0x68>
 800d6e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6e4:	f1c1 0820 	rsb	r8, r1, #32
 800d6e8:	40cf      	lsrs	r7, r1
 800d6ea:	f105 0e04 	add.w	lr, r5, #4
 800d6ee:	46a1      	mov	r9, r4
 800d6f0:	4576      	cmp	r6, lr
 800d6f2:	46f4      	mov	ip, lr
 800d6f4:	d815      	bhi.n	800d722 <rshift+0x7e>
 800d6f6:	1a9a      	subs	r2, r3, r2
 800d6f8:	0092      	lsls	r2, r2, #2
 800d6fa:	3a04      	subs	r2, #4
 800d6fc:	3501      	adds	r5, #1
 800d6fe:	42ae      	cmp	r6, r5
 800d700:	bf38      	it	cc
 800d702:	2200      	movcc	r2, #0
 800d704:	18a3      	adds	r3, r4, r2
 800d706:	50a7      	str	r7, [r4, r2]
 800d708:	b107      	cbz	r7, 800d70c <rshift+0x68>
 800d70a:	3304      	adds	r3, #4
 800d70c:	1b1a      	subs	r2, r3, r4
 800d70e:	42a3      	cmp	r3, r4
 800d710:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d714:	bf08      	it	eq
 800d716:	2300      	moveq	r3, #0
 800d718:	6102      	str	r2, [r0, #16]
 800d71a:	bf08      	it	eq
 800d71c:	6143      	streq	r3, [r0, #20]
 800d71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d722:	f8dc c000 	ldr.w	ip, [ip]
 800d726:	fa0c fc08 	lsl.w	ip, ip, r8
 800d72a:	ea4c 0707 	orr.w	r7, ip, r7
 800d72e:	f849 7b04 	str.w	r7, [r9], #4
 800d732:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d736:	40cf      	lsrs	r7, r1
 800d738:	e7da      	b.n	800d6f0 <rshift+0x4c>
 800d73a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d73e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d742:	e7c3      	b.n	800d6cc <rshift+0x28>
 800d744:	4623      	mov	r3, r4
 800d746:	e7e1      	b.n	800d70c <rshift+0x68>

0800d748 <__hexdig_fun>:
 800d748:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d74c:	2b09      	cmp	r3, #9
 800d74e:	d802      	bhi.n	800d756 <__hexdig_fun+0xe>
 800d750:	3820      	subs	r0, #32
 800d752:	b2c0      	uxtb	r0, r0
 800d754:	4770      	bx	lr
 800d756:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d75a:	2b05      	cmp	r3, #5
 800d75c:	d801      	bhi.n	800d762 <__hexdig_fun+0x1a>
 800d75e:	3847      	subs	r0, #71	; 0x47
 800d760:	e7f7      	b.n	800d752 <__hexdig_fun+0xa>
 800d762:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d766:	2b05      	cmp	r3, #5
 800d768:	d801      	bhi.n	800d76e <__hexdig_fun+0x26>
 800d76a:	3827      	subs	r0, #39	; 0x27
 800d76c:	e7f1      	b.n	800d752 <__hexdig_fun+0xa>
 800d76e:	2000      	movs	r0, #0
 800d770:	4770      	bx	lr
	...

0800d774 <__gethex>:
 800d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	ed2d 8b02 	vpush	{d8}
 800d77c:	b089      	sub	sp, #36	; 0x24
 800d77e:	ee08 0a10 	vmov	s16, r0
 800d782:	9304      	str	r3, [sp, #16]
 800d784:	4bb4      	ldr	r3, [pc, #720]	; (800da58 <__gethex+0x2e4>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	4618      	mov	r0, r3
 800d78c:	468b      	mov	fp, r1
 800d78e:	4690      	mov	r8, r2
 800d790:	f7f2 fd8e 	bl	80002b0 <strlen>
 800d794:	9b01      	ldr	r3, [sp, #4]
 800d796:	f8db 2000 	ldr.w	r2, [fp]
 800d79a:	4403      	add	r3, r0
 800d79c:	4682      	mov	sl, r0
 800d79e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d7a2:	9305      	str	r3, [sp, #20]
 800d7a4:	1c93      	adds	r3, r2, #2
 800d7a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d7aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d7ae:	32fe      	adds	r2, #254	; 0xfe
 800d7b0:	18d1      	adds	r1, r2, r3
 800d7b2:	461f      	mov	r7, r3
 800d7b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d7b8:	9100      	str	r1, [sp, #0]
 800d7ba:	2830      	cmp	r0, #48	; 0x30
 800d7bc:	d0f8      	beq.n	800d7b0 <__gethex+0x3c>
 800d7be:	f7ff ffc3 	bl	800d748 <__hexdig_fun>
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d13a      	bne.n	800d83e <__gethex+0xca>
 800d7c8:	9901      	ldr	r1, [sp, #4]
 800d7ca:	4652      	mov	r2, sl
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	f000 ffdd 	bl	800e78c <strncmp>
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d168      	bne.n	800d8aa <__gethex+0x136>
 800d7d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d7dc:	eb07 060a 	add.w	r6, r7, sl
 800d7e0:	f7ff ffb2 	bl	800d748 <__hexdig_fun>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d062      	beq.n	800d8ae <__gethex+0x13a>
 800d7e8:	4633      	mov	r3, r6
 800d7ea:	7818      	ldrb	r0, [r3, #0]
 800d7ec:	2830      	cmp	r0, #48	; 0x30
 800d7ee:	461f      	mov	r7, r3
 800d7f0:	f103 0301 	add.w	r3, r3, #1
 800d7f4:	d0f9      	beq.n	800d7ea <__gethex+0x76>
 800d7f6:	f7ff ffa7 	bl	800d748 <__hexdig_fun>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	fab0 f480 	clz	r4, r0
 800d800:	0964      	lsrs	r4, r4, #5
 800d802:	4635      	mov	r5, r6
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	463a      	mov	r2, r7
 800d808:	4616      	mov	r6, r2
 800d80a:	3201      	adds	r2, #1
 800d80c:	7830      	ldrb	r0, [r6, #0]
 800d80e:	f7ff ff9b 	bl	800d748 <__hexdig_fun>
 800d812:	2800      	cmp	r0, #0
 800d814:	d1f8      	bne.n	800d808 <__gethex+0x94>
 800d816:	9901      	ldr	r1, [sp, #4]
 800d818:	4652      	mov	r2, sl
 800d81a:	4630      	mov	r0, r6
 800d81c:	f000 ffb6 	bl	800e78c <strncmp>
 800d820:	b980      	cbnz	r0, 800d844 <__gethex+0xd0>
 800d822:	b94d      	cbnz	r5, 800d838 <__gethex+0xc4>
 800d824:	eb06 050a 	add.w	r5, r6, sl
 800d828:	462a      	mov	r2, r5
 800d82a:	4616      	mov	r6, r2
 800d82c:	3201      	adds	r2, #1
 800d82e:	7830      	ldrb	r0, [r6, #0]
 800d830:	f7ff ff8a 	bl	800d748 <__hexdig_fun>
 800d834:	2800      	cmp	r0, #0
 800d836:	d1f8      	bne.n	800d82a <__gethex+0xb6>
 800d838:	1bad      	subs	r5, r5, r6
 800d83a:	00ad      	lsls	r5, r5, #2
 800d83c:	e004      	b.n	800d848 <__gethex+0xd4>
 800d83e:	2400      	movs	r4, #0
 800d840:	4625      	mov	r5, r4
 800d842:	e7e0      	b.n	800d806 <__gethex+0x92>
 800d844:	2d00      	cmp	r5, #0
 800d846:	d1f7      	bne.n	800d838 <__gethex+0xc4>
 800d848:	7833      	ldrb	r3, [r6, #0]
 800d84a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d84e:	2b50      	cmp	r3, #80	; 0x50
 800d850:	d13b      	bne.n	800d8ca <__gethex+0x156>
 800d852:	7873      	ldrb	r3, [r6, #1]
 800d854:	2b2b      	cmp	r3, #43	; 0x2b
 800d856:	d02c      	beq.n	800d8b2 <__gethex+0x13e>
 800d858:	2b2d      	cmp	r3, #45	; 0x2d
 800d85a:	d02e      	beq.n	800d8ba <__gethex+0x146>
 800d85c:	1c71      	adds	r1, r6, #1
 800d85e:	f04f 0900 	mov.w	r9, #0
 800d862:	7808      	ldrb	r0, [r1, #0]
 800d864:	f7ff ff70 	bl	800d748 <__hexdig_fun>
 800d868:	1e43      	subs	r3, r0, #1
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	2b18      	cmp	r3, #24
 800d86e:	d82c      	bhi.n	800d8ca <__gethex+0x156>
 800d870:	f1a0 0210 	sub.w	r2, r0, #16
 800d874:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d878:	f7ff ff66 	bl	800d748 <__hexdig_fun>
 800d87c:	1e43      	subs	r3, r0, #1
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	2b18      	cmp	r3, #24
 800d882:	d91d      	bls.n	800d8c0 <__gethex+0x14c>
 800d884:	f1b9 0f00 	cmp.w	r9, #0
 800d888:	d000      	beq.n	800d88c <__gethex+0x118>
 800d88a:	4252      	negs	r2, r2
 800d88c:	4415      	add	r5, r2
 800d88e:	f8cb 1000 	str.w	r1, [fp]
 800d892:	b1e4      	cbz	r4, 800d8ce <__gethex+0x15a>
 800d894:	9b00      	ldr	r3, [sp, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	bf14      	ite	ne
 800d89a:	2700      	movne	r7, #0
 800d89c:	2706      	moveq	r7, #6
 800d89e:	4638      	mov	r0, r7
 800d8a0:	b009      	add	sp, #36	; 0x24
 800d8a2:	ecbd 8b02 	vpop	{d8}
 800d8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8aa:	463e      	mov	r6, r7
 800d8ac:	4625      	mov	r5, r4
 800d8ae:	2401      	movs	r4, #1
 800d8b0:	e7ca      	b.n	800d848 <__gethex+0xd4>
 800d8b2:	f04f 0900 	mov.w	r9, #0
 800d8b6:	1cb1      	adds	r1, r6, #2
 800d8b8:	e7d3      	b.n	800d862 <__gethex+0xee>
 800d8ba:	f04f 0901 	mov.w	r9, #1
 800d8be:	e7fa      	b.n	800d8b6 <__gethex+0x142>
 800d8c0:	230a      	movs	r3, #10
 800d8c2:	fb03 0202 	mla	r2, r3, r2, r0
 800d8c6:	3a10      	subs	r2, #16
 800d8c8:	e7d4      	b.n	800d874 <__gethex+0x100>
 800d8ca:	4631      	mov	r1, r6
 800d8cc:	e7df      	b.n	800d88e <__gethex+0x11a>
 800d8ce:	1bf3      	subs	r3, r6, r7
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	2b07      	cmp	r3, #7
 800d8d6:	dc0b      	bgt.n	800d8f0 <__gethex+0x17c>
 800d8d8:	ee18 0a10 	vmov	r0, s16
 800d8dc:	f000 fa70 	bl	800ddc0 <_Balloc>
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	b940      	cbnz	r0, 800d8f6 <__gethex+0x182>
 800d8e4:	4b5d      	ldr	r3, [pc, #372]	; (800da5c <__gethex+0x2e8>)
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	21de      	movs	r1, #222	; 0xde
 800d8ea:	485d      	ldr	r0, [pc, #372]	; (800da60 <__gethex+0x2ec>)
 800d8ec:	f000 ff70 	bl	800e7d0 <__assert_func>
 800d8f0:	3101      	adds	r1, #1
 800d8f2:	105b      	asrs	r3, r3, #1
 800d8f4:	e7ee      	b.n	800d8d4 <__gethex+0x160>
 800d8f6:	f100 0914 	add.w	r9, r0, #20
 800d8fa:	f04f 0b00 	mov.w	fp, #0
 800d8fe:	f1ca 0301 	rsb	r3, sl, #1
 800d902:	f8cd 9008 	str.w	r9, [sp, #8]
 800d906:	f8cd b000 	str.w	fp, [sp]
 800d90a:	9306      	str	r3, [sp, #24]
 800d90c:	42b7      	cmp	r7, r6
 800d90e:	d340      	bcc.n	800d992 <__gethex+0x21e>
 800d910:	9802      	ldr	r0, [sp, #8]
 800d912:	9b00      	ldr	r3, [sp, #0]
 800d914:	f840 3b04 	str.w	r3, [r0], #4
 800d918:	eba0 0009 	sub.w	r0, r0, r9
 800d91c:	1080      	asrs	r0, r0, #2
 800d91e:	0146      	lsls	r6, r0, #5
 800d920:	6120      	str	r0, [r4, #16]
 800d922:	4618      	mov	r0, r3
 800d924:	f000 fb3e 	bl	800dfa4 <__hi0bits>
 800d928:	1a30      	subs	r0, r6, r0
 800d92a:	f8d8 6000 	ldr.w	r6, [r8]
 800d92e:	42b0      	cmp	r0, r6
 800d930:	dd63      	ble.n	800d9fa <__gethex+0x286>
 800d932:	1b87      	subs	r7, r0, r6
 800d934:	4639      	mov	r1, r7
 800d936:	4620      	mov	r0, r4
 800d938:	f000 fee2 	bl	800e700 <__any_on>
 800d93c:	4682      	mov	sl, r0
 800d93e:	b1a8      	cbz	r0, 800d96c <__gethex+0x1f8>
 800d940:	1e7b      	subs	r3, r7, #1
 800d942:	1159      	asrs	r1, r3, #5
 800d944:	f003 021f 	and.w	r2, r3, #31
 800d948:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d94c:	f04f 0a01 	mov.w	sl, #1
 800d950:	fa0a f202 	lsl.w	r2, sl, r2
 800d954:	420a      	tst	r2, r1
 800d956:	d009      	beq.n	800d96c <__gethex+0x1f8>
 800d958:	4553      	cmp	r3, sl
 800d95a:	dd05      	ble.n	800d968 <__gethex+0x1f4>
 800d95c:	1eb9      	subs	r1, r7, #2
 800d95e:	4620      	mov	r0, r4
 800d960:	f000 fece 	bl	800e700 <__any_on>
 800d964:	2800      	cmp	r0, #0
 800d966:	d145      	bne.n	800d9f4 <__gethex+0x280>
 800d968:	f04f 0a02 	mov.w	sl, #2
 800d96c:	4639      	mov	r1, r7
 800d96e:	4620      	mov	r0, r4
 800d970:	f7ff fe98 	bl	800d6a4 <rshift>
 800d974:	443d      	add	r5, r7
 800d976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d97a:	42ab      	cmp	r3, r5
 800d97c:	da4c      	bge.n	800da18 <__gethex+0x2a4>
 800d97e:	ee18 0a10 	vmov	r0, s16
 800d982:	4621      	mov	r1, r4
 800d984:	f000 fa5c 	bl	800de40 <_Bfree>
 800d988:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d98a:	2300      	movs	r3, #0
 800d98c:	6013      	str	r3, [r2, #0]
 800d98e:	27a3      	movs	r7, #163	; 0xa3
 800d990:	e785      	b.n	800d89e <__gethex+0x12a>
 800d992:	1e73      	subs	r3, r6, #1
 800d994:	9a05      	ldr	r2, [sp, #20]
 800d996:	9303      	str	r3, [sp, #12]
 800d998:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d019      	beq.n	800d9d4 <__gethex+0x260>
 800d9a0:	f1bb 0f20 	cmp.w	fp, #32
 800d9a4:	d107      	bne.n	800d9b6 <__gethex+0x242>
 800d9a6:	9b02      	ldr	r3, [sp, #8]
 800d9a8:	9a00      	ldr	r2, [sp, #0]
 800d9aa:	f843 2b04 	str.w	r2, [r3], #4
 800d9ae:	9302      	str	r3, [sp, #8]
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	469b      	mov	fp, r3
 800d9b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d9ba:	f7ff fec5 	bl	800d748 <__hexdig_fun>
 800d9be:	9b00      	ldr	r3, [sp, #0]
 800d9c0:	f000 000f 	and.w	r0, r0, #15
 800d9c4:	fa00 f00b 	lsl.w	r0, r0, fp
 800d9c8:	4303      	orrs	r3, r0
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	f10b 0b04 	add.w	fp, fp, #4
 800d9d0:	9b03      	ldr	r3, [sp, #12]
 800d9d2:	e00d      	b.n	800d9f0 <__gethex+0x27c>
 800d9d4:	9b03      	ldr	r3, [sp, #12]
 800d9d6:	9a06      	ldr	r2, [sp, #24]
 800d9d8:	4413      	add	r3, r2
 800d9da:	42bb      	cmp	r3, r7
 800d9dc:	d3e0      	bcc.n	800d9a0 <__gethex+0x22c>
 800d9de:	4618      	mov	r0, r3
 800d9e0:	9901      	ldr	r1, [sp, #4]
 800d9e2:	9307      	str	r3, [sp, #28]
 800d9e4:	4652      	mov	r2, sl
 800d9e6:	f000 fed1 	bl	800e78c <strncmp>
 800d9ea:	9b07      	ldr	r3, [sp, #28]
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	d1d7      	bne.n	800d9a0 <__gethex+0x22c>
 800d9f0:	461e      	mov	r6, r3
 800d9f2:	e78b      	b.n	800d90c <__gethex+0x198>
 800d9f4:	f04f 0a03 	mov.w	sl, #3
 800d9f8:	e7b8      	b.n	800d96c <__gethex+0x1f8>
 800d9fa:	da0a      	bge.n	800da12 <__gethex+0x29e>
 800d9fc:	1a37      	subs	r7, r6, r0
 800d9fe:	4621      	mov	r1, r4
 800da00:	ee18 0a10 	vmov	r0, s16
 800da04:	463a      	mov	r2, r7
 800da06:	f000 fc37 	bl	800e278 <__lshift>
 800da0a:	1bed      	subs	r5, r5, r7
 800da0c:	4604      	mov	r4, r0
 800da0e:	f100 0914 	add.w	r9, r0, #20
 800da12:	f04f 0a00 	mov.w	sl, #0
 800da16:	e7ae      	b.n	800d976 <__gethex+0x202>
 800da18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800da1c:	42a8      	cmp	r0, r5
 800da1e:	dd72      	ble.n	800db06 <__gethex+0x392>
 800da20:	1b45      	subs	r5, r0, r5
 800da22:	42ae      	cmp	r6, r5
 800da24:	dc36      	bgt.n	800da94 <__gethex+0x320>
 800da26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	d02a      	beq.n	800da84 <__gethex+0x310>
 800da2e:	2b03      	cmp	r3, #3
 800da30:	d02c      	beq.n	800da8c <__gethex+0x318>
 800da32:	2b01      	cmp	r3, #1
 800da34:	d11c      	bne.n	800da70 <__gethex+0x2fc>
 800da36:	42ae      	cmp	r6, r5
 800da38:	d11a      	bne.n	800da70 <__gethex+0x2fc>
 800da3a:	2e01      	cmp	r6, #1
 800da3c:	d112      	bne.n	800da64 <__gethex+0x2f0>
 800da3e:	9a04      	ldr	r2, [sp, #16]
 800da40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da44:	6013      	str	r3, [r2, #0]
 800da46:	2301      	movs	r3, #1
 800da48:	6123      	str	r3, [r4, #16]
 800da4a:	f8c9 3000 	str.w	r3, [r9]
 800da4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da50:	2762      	movs	r7, #98	; 0x62
 800da52:	601c      	str	r4, [r3, #0]
 800da54:	e723      	b.n	800d89e <__gethex+0x12a>
 800da56:	bf00      	nop
 800da58:	0800fb08 	.word	0x0800fb08
 800da5c:	0800fa90 	.word	0x0800fa90
 800da60:	0800faa1 	.word	0x0800faa1
 800da64:	1e71      	subs	r1, r6, #1
 800da66:	4620      	mov	r0, r4
 800da68:	f000 fe4a 	bl	800e700 <__any_on>
 800da6c:	2800      	cmp	r0, #0
 800da6e:	d1e6      	bne.n	800da3e <__gethex+0x2ca>
 800da70:	ee18 0a10 	vmov	r0, s16
 800da74:	4621      	mov	r1, r4
 800da76:	f000 f9e3 	bl	800de40 <_Bfree>
 800da7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da7c:	2300      	movs	r3, #0
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	2750      	movs	r7, #80	; 0x50
 800da82:	e70c      	b.n	800d89e <__gethex+0x12a>
 800da84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1f2      	bne.n	800da70 <__gethex+0x2fc>
 800da8a:	e7d8      	b.n	800da3e <__gethex+0x2ca>
 800da8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1d5      	bne.n	800da3e <__gethex+0x2ca>
 800da92:	e7ed      	b.n	800da70 <__gethex+0x2fc>
 800da94:	1e6f      	subs	r7, r5, #1
 800da96:	f1ba 0f00 	cmp.w	sl, #0
 800da9a:	d131      	bne.n	800db00 <__gethex+0x38c>
 800da9c:	b127      	cbz	r7, 800daa8 <__gethex+0x334>
 800da9e:	4639      	mov	r1, r7
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 fe2d 	bl	800e700 <__any_on>
 800daa6:	4682      	mov	sl, r0
 800daa8:	117b      	asrs	r3, r7, #5
 800daaa:	2101      	movs	r1, #1
 800daac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dab0:	f007 071f 	and.w	r7, r7, #31
 800dab4:	fa01 f707 	lsl.w	r7, r1, r7
 800dab8:	421f      	tst	r7, r3
 800daba:	4629      	mov	r1, r5
 800dabc:	4620      	mov	r0, r4
 800dabe:	bf18      	it	ne
 800dac0:	f04a 0a02 	orrne.w	sl, sl, #2
 800dac4:	1b76      	subs	r6, r6, r5
 800dac6:	f7ff fded 	bl	800d6a4 <rshift>
 800daca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dace:	2702      	movs	r7, #2
 800dad0:	f1ba 0f00 	cmp.w	sl, #0
 800dad4:	d048      	beq.n	800db68 <__gethex+0x3f4>
 800dad6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d015      	beq.n	800db0a <__gethex+0x396>
 800dade:	2b03      	cmp	r3, #3
 800dae0:	d017      	beq.n	800db12 <__gethex+0x39e>
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d109      	bne.n	800dafa <__gethex+0x386>
 800dae6:	f01a 0f02 	tst.w	sl, #2
 800daea:	d006      	beq.n	800dafa <__gethex+0x386>
 800daec:	f8d9 0000 	ldr.w	r0, [r9]
 800daf0:	ea4a 0a00 	orr.w	sl, sl, r0
 800daf4:	f01a 0f01 	tst.w	sl, #1
 800daf8:	d10e      	bne.n	800db18 <__gethex+0x3a4>
 800dafa:	f047 0710 	orr.w	r7, r7, #16
 800dafe:	e033      	b.n	800db68 <__gethex+0x3f4>
 800db00:	f04f 0a01 	mov.w	sl, #1
 800db04:	e7d0      	b.n	800daa8 <__gethex+0x334>
 800db06:	2701      	movs	r7, #1
 800db08:	e7e2      	b.n	800dad0 <__gethex+0x35c>
 800db0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db0c:	f1c3 0301 	rsb	r3, r3, #1
 800db10:	9315      	str	r3, [sp, #84]	; 0x54
 800db12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db14:	2b00      	cmp	r3, #0
 800db16:	d0f0      	beq.n	800dafa <__gethex+0x386>
 800db18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800db1c:	f104 0314 	add.w	r3, r4, #20
 800db20:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800db24:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800db28:	f04f 0c00 	mov.w	ip, #0
 800db2c:	4618      	mov	r0, r3
 800db2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db32:	f1b2 3fff 	cmp.w	r2, #4294967295
 800db36:	d01c      	beq.n	800db72 <__gethex+0x3fe>
 800db38:	3201      	adds	r2, #1
 800db3a:	6002      	str	r2, [r0, #0]
 800db3c:	2f02      	cmp	r7, #2
 800db3e:	f104 0314 	add.w	r3, r4, #20
 800db42:	d13f      	bne.n	800dbc4 <__gethex+0x450>
 800db44:	f8d8 2000 	ldr.w	r2, [r8]
 800db48:	3a01      	subs	r2, #1
 800db4a:	42b2      	cmp	r2, r6
 800db4c:	d10a      	bne.n	800db64 <__gethex+0x3f0>
 800db4e:	1171      	asrs	r1, r6, #5
 800db50:	2201      	movs	r2, #1
 800db52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db56:	f006 061f 	and.w	r6, r6, #31
 800db5a:	fa02 f606 	lsl.w	r6, r2, r6
 800db5e:	421e      	tst	r6, r3
 800db60:	bf18      	it	ne
 800db62:	4617      	movne	r7, r2
 800db64:	f047 0720 	orr.w	r7, r7, #32
 800db68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db6a:	601c      	str	r4, [r3, #0]
 800db6c:	9b04      	ldr	r3, [sp, #16]
 800db6e:	601d      	str	r5, [r3, #0]
 800db70:	e695      	b.n	800d89e <__gethex+0x12a>
 800db72:	4299      	cmp	r1, r3
 800db74:	f843 cc04 	str.w	ip, [r3, #-4]
 800db78:	d8d8      	bhi.n	800db2c <__gethex+0x3b8>
 800db7a:	68a3      	ldr	r3, [r4, #8]
 800db7c:	459b      	cmp	fp, r3
 800db7e:	db19      	blt.n	800dbb4 <__gethex+0x440>
 800db80:	6861      	ldr	r1, [r4, #4]
 800db82:	ee18 0a10 	vmov	r0, s16
 800db86:	3101      	adds	r1, #1
 800db88:	f000 f91a 	bl	800ddc0 <_Balloc>
 800db8c:	4681      	mov	r9, r0
 800db8e:	b918      	cbnz	r0, 800db98 <__gethex+0x424>
 800db90:	4b1a      	ldr	r3, [pc, #104]	; (800dbfc <__gethex+0x488>)
 800db92:	4602      	mov	r2, r0
 800db94:	2184      	movs	r1, #132	; 0x84
 800db96:	e6a8      	b.n	800d8ea <__gethex+0x176>
 800db98:	6922      	ldr	r2, [r4, #16]
 800db9a:	3202      	adds	r2, #2
 800db9c:	f104 010c 	add.w	r1, r4, #12
 800dba0:	0092      	lsls	r2, r2, #2
 800dba2:	300c      	adds	r0, #12
 800dba4:	f7fe fd9c 	bl	800c6e0 <memcpy>
 800dba8:	4621      	mov	r1, r4
 800dbaa:	ee18 0a10 	vmov	r0, s16
 800dbae:	f000 f947 	bl	800de40 <_Bfree>
 800dbb2:	464c      	mov	r4, r9
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbbc:	6122      	str	r2, [r4, #16]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	615a      	str	r2, [r3, #20]
 800dbc2:	e7bb      	b.n	800db3c <__gethex+0x3c8>
 800dbc4:	6922      	ldr	r2, [r4, #16]
 800dbc6:	455a      	cmp	r2, fp
 800dbc8:	dd0b      	ble.n	800dbe2 <__gethex+0x46e>
 800dbca:	2101      	movs	r1, #1
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f7ff fd69 	bl	800d6a4 <rshift>
 800dbd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbd6:	3501      	adds	r5, #1
 800dbd8:	42ab      	cmp	r3, r5
 800dbda:	f6ff aed0 	blt.w	800d97e <__gethex+0x20a>
 800dbde:	2701      	movs	r7, #1
 800dbe0:	e7c0      	b.n	800db64 <__gethex+0x3f0>
 800dbe2:	f016 061f 	ands.w	r6, r6, #31
 800dbe6:	d0fa      	beq.n	800dbde <__gethex+0x46a>
 800dbe8:	4453      	add	r3, sl
 800dbea:	f1c6 0620 	rsb	r6, r6, #32
 800dbee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dbf2:	f000 f9d7 	bl	800dfa4 <__hi0bits>
 800dbf6:	42b0      	cmp	r0, r6
 800dbf8:	dbe7      	blt.n	800dbca <__gethex+0x456>
 800dbfa:	e7f0      	b.n	800dbde <__gethex+0x46a>
 800dbfc:	0800fa90 	.word	0x0800fa90

0800dc00 <L_shift>:
 800dc00:	f1c2 0208 	rsb	r2, r2, #8
 800dc04:	0092      	lsls	r2, r2, #2
 800dc06:	b570      	push	{r4, r5, r6, lr}
 800dc08:	f1c2 0620 	rsb	r6, r2, #32
 800dc0c:	6843      	ldr	r3, [r0, #4]
 800dc0e:	6804      	ldr	r4, [r0, #0]
 800dc10:	fa03 f506 	lsl.w	r5, r3, r6
 800dc14:	432c      	orrs	r4, r5
 800dc16:	40d3      	lsrs	r3, r2
 800dc18:	6004      	str	r4, [r0, #0]
 800dc1a:	f840 3f04 	str.w	r3, [r0, #4]!
 800dc1e:	4288      	cmp	r0, r1
 800dc20:	d3f4      	bcc.n	800dc0c <L_shift+0xc>
 800dc22:	bd70      	pop	{r4, r5, r6, pc}

0800dc24 <__match>:
 800dc24:	b530      	push	{r4, r5, lr}
 800dc26:	6803      	ldr	r3, [r0, #0]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc2e:	b914      	cbnz	r4, 800dc36 <__match+0x12>
 800dc30:	6003      	str	r3, [r0, #0]
 800dc32:	2001      	movs	r0, #1
 800dc34:	bd30      	pop	{r4, r5, pc}
 800dc36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dc3e:	2d19      	cmp	r5, #25
 800dc40:	bf98      	it	ls
 800dc42:	3220      	addls	r2, #32
 800dc44:	42a2      	cmp	r2, r4
 800dc46:	d0f0      	beq.n	800dc2a <__match+0x6>
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e7f3      	b.n	800dc34 <__match+0x10>

0800dc4c <__hexnan>:
 800dc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc50:	680b      	ldr	r3, [r1, #0]
 800dc52:	115e      	asrs	r6, r3, #5
 800dc54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc58:	f013 031f 	ands.w	r3, r3, #31
 800dc5c:	b087      	sub	sp, #28
 800dc5e:	bf18      	it	ne
 800dc60:	3604      	addne	r6, #4
 800dc62:	2500      	movs	r5, #0
 800dc64:	1f37      	subs	r7, r6, #4
 800dc66:	4690      	mov	r8, r2
 800dc68:	6802      	ldr	r2, [r0, #0]
 800dc6a:	9301      	str	r3, [sp, #4]
 800dc6c:	4682      	mov	sl, r0
 800dc6e:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc72:	46b9      	mov	r9, r7
 800dc74:	463c      	mov	r4, r7
 800dc76:	9502      	str	r5, [sp, #8]
 800dc78:	46ab      	mov	fp, r5
 800dc7a:	7851      	ldrb	r1, [r2, #1]
 800dc7c:	1c53      	adds	r3, r2, #1
 800dc7e:	9303      	str	r3, [sp, #12]
 800dc80:	b341      	cbz	r1, 800dcd4 <__hexnan+0x88>
 800dc82:	4608      	mov	r0, r1
 800dc84:	9205      	str	r2, [sp, #20]
 800dc86:	9104      	str	r1, [sp, #16]
 800dc88:	f7ff fd5e 	bl	800d748 <__hexdig_fun>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d14f      	bne.n	800dd30 <__hexnan+0xe4>
 800dc90:	9904      	ldr	r1, [sp, #16]
 800dc92:	9a05      	ldr	r2, [sp, #20]
 800dc94:	2920      	cmp	r1, #32
 800dc96:	d818      	bhi.n	800dcca <__hexnan+0x7e>
 800dc98:	9b02      	ldr	r3, [sp, #8]
 800dc9a:	459b      	cmp	fp, r3
 800dc9c:	dd13      	ble.n	800dcc6 <__hexnan+0x7a>
 800dc9e:	454c      	cmp	r4, r9
 800dca0:	d206      	bcs.n	800dcb0 <__hexnan+0x64>
 800dca2:	2d07      	cmp	r5, #7
 800dca4:	dc04      	bgt.n	800dcb0 <__hexnan+0x64>
 800dca6:	462a      	mov	r2, r5
 800dca8:	4649      	mov	r1, r9
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f7ff ffa8 	bl	800dc00 <L_shift>
 800dcb0:	4544      	cmp	r4, r8
 800dcb2:	d950      	bls.n	800dd56 <__hexnan+0x10a>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f1a4 0904 	sub.w	r9, r4, #4
 800dcba:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcbe:	f8cd b008 	str.w	fp, [sp, #8]
 800dcc2:	464c      	mov	r4, r9
 800dcc4:	461d      	mov	r5, r3
 800dcc6:	9a03      	ldr	r2, [sp, #12]
 800dcc8:	e7d7      	b.n	800dc7a <__hexnan+0x2e>
 800dcca:	2929      	cmp	r1, #41	; 0x29
 800dccc:	d156      	bne.n	800dd7c <__hexnan+0x130>
 800dcce:	3202      	adds	r2, #2
 800dcd0:	f8ca 2000 	str.w	r2, [sl]
 800dcd4:	f1bb 0f00 	cmp.w	fp, #0
 800dcd8:	d050      	beq.n	800dd7c <__hexnan+0x130>
 800dcda:	454c      	cmp	r4, r9
 800dcdc:	d206      	bcs.n	800dcec <__hexnan+0xa0>
 800dcde:	2d07      	cmp	r5, #7
 800dce0:	dc04      	bgt.n	800dcec <__hexnan+0xa0>
 800dce2:	462a      	mov	r2, r5
 800dce4:	4649      	mov	r1, r9
 800dce6:	4620      	mov	r0, r4
 800dce8:	f7ff ff8a 	bl	800dc00 <L_shift>
 800dcec:	4544      	cmp	r4, r8
 800dcee:	d934      	bls.n	800dd5a <__hexnan+0x10e>
 800dcf0:	f1a8 0204 	sub.w	r2, r8, #4
 800dcf4:	4623      	mov	r3, r4
 800dcf6:	f853 1b04 	ldr.w	r1, [r3], #4
 800dcfa:	f842 1f04 	str.w	r1, [r2, #4]!
 800dcfe:	429f      	cmp	r7, r3
 800dd00:	d2f9      	bcs.n	800dcf6 <__hexnan+0xaa>
 800dd02:	1b3b      	subs	r3, r7, r4
 800dd04:	f023 0303 	bic.w	r3, r3, #3
 800dd08:	3304      	adds	r3, #4
 800dd0a:	3401      	adds	r4, #1
 800dd0c:	3e03      	subs	r6, #3
 800dd0e:	42b4      	cmp	r4, r6
 800dd10:	bf88      	it	hi
 800dd12:	2304      	movhi	r3, #4
 800dd14:	4443      	add	r3, r8
 800dd16:	2200      	movs	r2, #0
 800dd18:	f843 2b04 	str.w	r2, [r3], #4
 800dd1c:	429f      	cmp	r7, r3
 800dd1e:	d2fb      	bcs.n	800dd18 <__hexnan+0xcc>
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	b91b      	cbnz	r3, 800dd2c <__hexnan+0xe0>
 800dd24:	4547      	cmp	r7, r8
 800dd26:	d127      	bne.n	800dd78 <__hexnan+0x12c>
 800dd28:	2301      	movs	r3, #1
 800dd2a:	603b      	str	r3, [r7, #0]
 800dd2c:	2005      	movs	r0, #5
 800dd2e:	e026      	b.n	800dd7e <__hexnan+0x132>
 800dd30:	3501      	adds	r5, #1
 800dd32:	2d08      	cmp	r5, #8
 800dd34:	f10b 0b01 	add.w	fp, fp, #1
 800dd38:	dd06      	ble.n	800dd48 <__hexnan+0xfc>
 800dd3a:	4544      	cmp	r4, r8
 800dd3c:	d9c3      	bls.n	800dcc6 <__hexnan+0x7a>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd44:	2501      	movs	r5, #1
 800dd46:	3c04      	subs	r4, #4
 800dd48:	6822      	ldr	r2, [r4, #0]
 800dd4a:	f000 000f 	and.w	r0, r0, #15
 800dd4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dd52:	6022      	str	r2, [r4, #0]
 800dd54:	e7b7      	b.n	800dcc6 <__hexnan+0x7a>
 800dd56:	2508      	movs	r5, #8
 800dd58:	e7b5      	b.n	800dcc6 <__hexnan+0x7a>
 800dd5a:	9b01      	ldr	r3, [sp, #4]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d0df      	beq.n	800dd20 <__hexnan+0xd4>
 800dd60:	f04f 32ff 	mov.w	r2, #4294967295
 800dd64:	f1c3 0320 	rsb	r3, r3, #32
 800dd68:	fa22 f303 	lsr.w	r3, r2, r3
 800dd6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dd70:	401a      	ands	r2, r3
 800dd72:	f846 2c04 	str.w	r2, [r6, #-4]
 800dd76:	e7d3      	b.n	800dd20 <__hexnan+0xd4>
 800dd78:	3f04      	subs	r7, #4
 800dd7a:	e7d1      	b.n	800dd20 <__hexnan+0xd4>
 800dd7c:	2004      	movs	r0, #4
 800dd7e:	b007      	add	sp, #28
 800dd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd84 <__ascii_mbtowc>:
 800dd84:	b082      	sub	sp, #8
 800dd86:	b901      	cbnz	r1, 800dd8a <__ascii_mbtowc+0x6>
 800dd88:	a901      	add	r1, sp, #4
 800dd8a:	b142      	cbz	r2, 800dd9e <__ascii_mbtowc+0x1a>
 800dd8c:	b14b      	cbz	r3, 800dda2 <__ascii_mbtowc+0x1e>
 800dd8e:	7813      	ldrb	r3, [r2, #0]
 800dd90:	600b      	str	r3, [r1, #0]
 800dd92:	7812      	ldrb	r2, [r2, #0]
 800dd94:	1e10      	subs	r0, r2, #0
 800dd96:	bf18      	it	ne
 800dd98:	2001      	movne	r0, #1
 800dd9a:	b002      	add	sp, #8
 800dd9c:	4770      	bx	lr
 800dd9e:	4610      	mov	r0, r2
 800dda0:	e7fb      	b.n	800dd9a <__ascii_mbtowc+0x16>
 800dda2:	f06f 0001 	mvn.w	r0, #1
 800dda6:	e7f8      	b.n	800dd9a <__ascii_mbtowc+0x16>

0800dda8 <__malloc_lock>:
 800dda8:	4801      	ldr	r0, [pc, #4]	; (800ddb0 <__malloc_lock+0x8>)
 800ddaa:	f000 bd42 	b.w	800e832 <__retarget_lock_acquire_recursive>
 800ddae:	bf00      	nop
 800ddb0:	20000a3c 	.word	0x20000a3c

0800ddb4 <__malloc_unlock>:
 800ddb4:	4801      	ldr	r0, [pc, #4]	; (800ddbc <__malloc_unlock+0x8>)
 800ddb6:	f000 bd3d 	b.w	800e834 <__retarget_lock_release_recursive>
 800ddba:	bf00      	nop
 800ddbc:	20000a3c 	.word	0x20000a3c

0800ddc0 <_Balloc>:
 800ddc0:	b570      	push	{r4, r5, r6, lr}
 800ddc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	460d      	mov	r5, r1
 800ddc8:	b976      	cbnz	r6, 800dde8 <_Balloc+0x28>
 800ddca:	2010      	movs	r0, #16
 800ddcc:	f7fe fc68 	bl	800c6a0 <malloc>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	6260      	str	r0, [r4, #36]	; 0x24
 800ddd4:	b920      	cbnz	r0, 800dde0 <_Balloc+0x20>
 800ddd6:	4b18      	ldr	r3, [pc, #96]	; (800de38 <_Balloc+0x78>)
 800ddd8:	4818      	ldr	r0, [pc, #96]	; (800de3c <_Balloc+0x7c>)
 800ddda:	2166      	movs	r1, #102	; 0x66
 800dddc:	f000 fcf8 	bl	800e7d0 <__assert_func>
 800dde0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dde4:	6006      	str	r6, [r0, #0]
 800dde6:	60c6      	str	r6, [r0, #12]
 800dde8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ddea:	68f3      	ldr	r3, [r6, #12]
 800ddec:	b183      	cbz	r3, 800de10 <_Balloc+0x50>
 800ddee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddf6:	b9b8      	cbnz	r0, 800de28 <_Balloc+0x68>
 800ddf8:	2101      	movs	r1, #1
 800ddfa:	fa01 f605 	lsl.w	r6, r1, r5
 800ddfe:	1d72      	adds	r2, r6, #5
 800de00:	0092      	lsls	r2, r2, #2
 800de02:	4620      	mov	r0, r4
 800de04:	f000 fc9d 	bl	800e742 <_calloc_r>
 800de08:	b160      	cbz	r0, 800de24 <_Balloc+0x64>
 800de0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de0e:	e00e      	b.n	800de2e <_Balloc+0x6e>
 800de10:	2221      	movs	r2, #33	; 0x21
 800de12:	2104      	movs	r1, #4
 800de14:	4620      	mov	r0, r4
 800de16:	f000 fc94 	bl	800e742 <_calloc_r>
 800de1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de1c:	60f0      	str	r0, [r6, #12]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1e4      	bne.n	800ddee <_Balloc+0x2e>
 800de24:	2000      	movs	r0, #0
 800de26:	bd70      	pop	{r4, r5, r6, pc}
 800de28:	6802      	ldr	r2, [r0, #0]
 800de2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de2e:	2300      	movs	r3, #0
 800de30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de34:	e7f7      	b.n	800de26 <_Balloc+0x66>
 800de36:	bf00      	nop
 800de38:	0800fb1c 	.word	0x0800fb1c
 800de3c:	0800fb33 	.word	0x0800fb33

0800de40 <_Bfree>:
 800de40:	b570      	push	{r4, r5, r6, lr}
 800de42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de44:	4605      	mov	r5, r0
 800de46:	460c      	mov	r4, r1
 800de48:	b976      	cbnz	r6, 800de68 <_Bfree+0x28>
 800de4a:	2010      	movs	r0, #16
 800de4c:	f7fe fc28 	bl	800c6a0 <malloc>
 800de50:	4602      	mov	r2, r0
 800de52:	6268      	str	r0, [r5, #36]	; 0x24
 800de54:	b920      	cbnz	r0, 800de60 <_Bfree+0x20>
 800de56:	4b09      	ldr	r3, [pc, #36]	; (800de7c <_Bfree+0x3c>)
 800de58:	4809      	ldr	r0, [pc, #36]	; (800de80 <_Bfree+0x40>)
 800de5a:	218a      	movs	r1, #138	; 0x8a
 800de5c:	f000 fcb8 	bl	800e7d0 <__assert_func>
 800de60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de64:	6006      	str	r6, [r0, #0]
 800de66:	60c6      	str	r6, [r0, #12]
 800de68:	b13c      	cbz	r4, 800de7a <_Bfree+0x3a>
 800de6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de6c:	6862      	ldr	r2, [r4, #4]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de74:	6021      	str	r1, [r4, #0]
 800de76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de7a:	bd70      	pop	{r4, r5, r6, pc}
 800de7c:	0800fb1c 	.word	0x0800fb1c
 800de80:	0800fb33 	.word	0x0800fb33

0800de84 <__multadd>:
 800de84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de88:	690d      	ldr	r5, [r1, #16]
 800de8a:	4607      	mov	r7, r0
 800de8c:	460c      	mov	r4, r1
 800de8e:	461e      	mov	r6, r3
 800de90:	f101 0c14 	add.w	ip, r1, #20
 800de94:	2000      	movs	r0, #0
 800de96:	f8dc 3000 	ldr.w	r3, [ip]
 800de9a:	b299      	uxth	r1, r3
 800de9c:	fb02 6101 	mla	r1, r2, r1, r6
 800dea0:	0c1e      	lsrs	r6, r3, #16
 800dea2:	0c0b      	lsrs	r3, r1, #16
 800dea4:	fb02 3306 	mla	r3, r2, r6, r3
 800dea8:	b289      	uxth	r1, r1
 800deaa:	3001      	adds	r0, #1
 800deac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800deb0:	4285      	cmp	r5, r0
 800deb2:	f84c 1b04 	str.w	r1, [ip], #4
 800deb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800deba:	dcec      	bgt.n	800de96 <__multadd+0x12>
 800debc:	b30e      	cbz	r6, 800df02 <__multadd+0x7e>
 800debe:	68a3      	ldr	r3, [r4, #8]
 800dec0:	42ab      	cmp	r3, r5
 800dec2:	dc19      	bgt.n	800def8 <__multadd+0x74>
 800dec4:	6861      	ldr	r1, [r4, #4]
 800dec6:	4638      	mov	r0, r7
 800dec8:	3101      	adds	r1, #1
 800deca:	f7ff ff79 	bl	800ddc0 <_Balloc>
 800dece:	4680      	mov	r8, r0
 800ded0:	b928      	cbnz	r0, 800dede <__multadd+0x5a>
 800ded2:	4602      	mov	r2, r0
 800ded4:	4b0c      	ldr	r3, [pc, #48]	; (800df08 <__multadd+0x84>)
 800ded6:	480d      	ldr	r0, [pc, #52]	; (800df0c <__multadd+0x88>)
 800ded8:	21b5      	movs	r1, #181	; 0xb5
 800deda:	f000 fc79 	bl	800e7d0 <__assert_func>
 800dede:	6922      	ldr	r2, [r4, #16]
 800dee0:	3202      	adds	r2, #2
 800dee2:	f104 010c 	add.w	r1, r4, #12
 800dee6:	0092      	lsls	r2, r2, #2
 800dee8:	300c      	adds	r0, #12
 800deea:	f7fe fbf9 	bl	800c6e0 <memcpy>
 800deee:	4621      	mov	r1, r4
 800def0:	4638      	mov	r0, r7
 800def2:	f7ff ffa5 	bl	800de40 <_Bfree>
 800def6:	4644      	mov	r4, r8
 800def8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800defc:	3501      	adds	r5, #1
 800defe:	615e      	str	r6, [r3, #20]
 800df00:	6125      	str	r5, [r4, #16]
 800df02:	4620      	mov	r0, r4
 800df04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df08:	0800fa90 	.word	0x0800fa90
 800df0c:	0800fb33 	.word	0x0800fb33

0800df10 <__s2b>:
 800df10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df14:	460c      	mov	r4, r1
 800df16:	4615      	mov	r5, r2
 800df18:	461f      	mov	r7, r3
 800df1a:	2209      	movs	r2, #9
 800df1c:	3308      	adds	r3, #8
 800df1e:	4606      	mov	r6, r0
 800df20:	fb93 f3f2 	sdiv	r3, r3, r2
 800df24:	2100      	movs	r1, #0
 800df26:	2201      	movs	r2, #1
 800df28:	429a      	cmp	r2, r3
 800df2a:	db09      	blt.n	800df40 <__s2b+0x30>
 800df2c:	4630      	mov	r0, r6
 800df2e:	f7ff ff47 	bl	800ddc0 <_Balloc>
 800df32:	b940      	cbnz	r0, 800df46 <__s2b+0x36>
 800df34:	4602      	mov	r2, r0
 800df36:	4b19      	ldr	r3, [pc, #100]	; (800df9c <__s2b+0x8c>)
 800df38:	4819      	ldr	r0, [pc, #100]	; (800dfa0 <__s2b+0x90>)
 800df3a:	21ce      	movs	r1, #206	; 0xce
 800df3c:	f000 fc48 	bl	800e7d0 <__assert_func>
 800df40:	0052      	lsls	r2, r2, #1
 800df42:	3101      	adds	r1, #1
 800df44:	e7f0      	b.n	800df28 <__s2b+0x18>
 800df46:	9b08      	ldr	r3, [sp, #32]
 800df48:	6143      	str	r3, [r0, #20]
 800df4a:	2d09      	cmp	r5, #9
 800df4c:	f04f 0301 	mov.w	r3, #1
 800df50:	6103      	str	r3, [r0, #16]
 800df52:	dd16      	ble.n	800df82 <__s2b+0x72>
 800df54:	f104 0909 	add.w	r9, r4, #9
 800df58:	46c8      	mov	r8, r9
 800df5a:	442c      	add	r4, r5
 800df5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df60:	4601      	mov	r1, r0
 800df62:	3b30      	subs	r3, #48	; 0x30
 800df64:	220a      	movs	r2, #10
 800df66:	4630      	mov	r0, r6
 800df68:	f7ff ff8c 	bl	800de84 <__multadd>
 800df6c:	45a0      	cmp	r8, r4
 800df6e:	d1f5      	bne.n	800df5c <__s2b+0x4c>
 800df70:	f1a5 0408 	sub.w	r4, r5, #8
 800df74:	444c      	add	r4, r9
 800df76:	1b2d      	subs	r5, r5, r4
 800df78:	1963      	adds	r3, r4, r5
 800df7a:	42bb      	cmp	r3, r7
 800df7c:	db04      	blt.n	800df88 <__s2b+0x78>
 800df7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df82:	340a      	adds	r4, #10
 800df84:	2509      	movs	r5, #9
 800df86:	e7f6      	b.n	800df76 <__s2b+0x66>
 800df88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df8c:	4601      	mov	r1, r0
 800df8e:	3b30      	subs	r3, #48	; 0x30
 800df90:	220a      	movs	r2, #10
 800df92:	4630      	mov	r0, r6
 800df94:	f7ff ff76 	bl	800de84 <__multadd>
 800df98:	e7ee      	b.n	800df78 <__s2b+0x68>
 800df9a:	bf00      	nop
 800df9c:	0800fa90 	.word	0x0800fa90
 800dfa0:	0800fb33 	.word	0x0800fb33

0800dfa4 <__hi0bits>:
 800dfa4:	0c03      	lsrs	r3, r0, #16
 800dfa6:	041b      	lsls	r3, r3, #16
 800dfa8:	b9d3      	cbnz	r3, 800dfe0 <__hi0bits+0x3c>
 800dfaa:	0400      	lsls	r0, r0, #16
 800dfac:	2310      	movs	r3, #16
 800dfae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dfb2:	bf04      	itt	eq
 800dfb4:	0200      	lsleq	r0, r0, #8
 800dfb6:	3308      	addeq	r3, #8
 800dfb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dfbc:	bf04      	itt	eq
 800dfbe:	0100      	lsleq	r0, r0, #4
 800dfc0:	3304      	addeq	r3, #4
 800dfc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dfc6:	bf04      	itt	eq
 800dfc8:	0080      	lsleq	r0, r0, #2
 800dfca:	3302      	addeq	r3, #2
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	db05      	blt.n	800dfdc <__hi0bits+0x38>
 800dfd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dfd4:	f103 0301 	add.w	r3, r3, #1
 800dfd8:	bf08      	it	eq
 800dfda:	2320      	moveq	r3, #32
 800dfdc:	4618      	mov	r0, r3
 800dfde:	4770      	bx	lr
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	e7e4      	b.n	800dfae <__hi0bits+0xa>

0800dfe4 <__lo0bits>:
 800dfe4:	6803      	ldr	r3, [r0, #0]
 800dfe6:	f013 0207 	ands.w	r2, r3, #7
 800dfea:	4601      	mov	r1, r0
 800dfec:	d00b      	beq.n	800e006 <__lo0bits+0x22>
 800dfee:	07da      	lsls	r2, r3, #31
 800dff0:	d423      	bmi.n	800e03a <__lo0bits+0x56>
 800dff2:	0798      	lsls	r0, r3, #30
 800dff4:	bf49      	itett	mi
 800dff6:	085b      	lsrmi	r3, r3, #1
 800dff8:	089b      	lsrpl	r3, r3, #2
 800dffa:	2001      	movmi	r0, #1
 800dffc:	600b      	strmi	r3, [r1, #0]
 800dffe:	bf5c      	itt	pl
 800e000:	600b      	strpl	r3, [r1, #0]
 800e002:	2002      	movpl	r0, #2
 800e004:	4770      	bx	lr
 800e006:	b298      	uxth	r0, r3
 800e008:	b9a8      	cbnz	r0, 800e036 <__lo0bits+0x52>
 800e00a:	0c1b      	lsrs	r3, r3, #16
 800e00c:	2010      	movs	r0, #16
 800e00e:	b2da      	uxtb	r2, r3
 800e010:	b90a      	cbnz	r2, 800e016 <__lo0bits+0x32>
 800e012:	3008      	adds	r0, #8
 800e014:	0a1b      	lsrs	r3, r3, #8
 800e016:	071a      	lsls	r2, r3, #28
 800e018:	bf04      	itt	eq
 800e01a:	091b      	lsreq	r3, r3, #4
 800e01c:	3004      	addeq	r0, #4
 800e01e:	079a      	lsls	r2, r3, #30
 800e020:	bf04      	itt	eq
 800e022:	089b      	lsreq	r3, r3, #2
 800e024:	3002      	addeq	r0, #2
 800e026:	07da      	lsls	r2, r3, #31
 800e028:	d403      	bmi.n	800e032 <__lo0bits+0x4e>
 800e02a:	085b      	lsrs	r3, r3, #1
 800e02c:	f100 0001 	add.w	r0, r0, #1
 800e030:	d005      	beq.n	800e03e <__lo0bits+0x5a>
 800e032:	600b      	str	r3, [r1, #0]
 800e034:	4770      	bx	lr
 800e036:	4610      	mov	r0, r2
 800e038:	e7e9      	b.n	800e00e <__lo0bits+0x2a>
 800e03a:	2000      	movs	r0, #0
 800e03c:	4770      	bx	lr
 800e03e:	2020      	movs	r0, #32
 800e040:	4770      	bx	lr
	...

0800e044 <__i2b>:
 800e044:	b510      	push	{r4, lr}
 800e046:	460c      	mov	r4, r1
 800e048:	2101      	movs	r1, #1
 800e04a:	f7ff feb9 	bl	800ddc0 <_Balloc>
 800e04e:	4602      	mov	r2, r0
 800e050:	b928      	cbnz	r0, 800e05e <__i2b+0x1a>
 800e052:	4b05      	ldr	r3, [pc, #20]	; (800e068 <__i2b+0x24>)
 800e054:	4805      	ldr	r0, [pc, #20]	; (800e06c <__i2b+0x28>)
 800e056:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e05a:	f000 fbb9 	bl	800e7d0 <__assert_func>
 800e05e:	2301      	movs	r3, #1
 800e060:	6144      	str	r4, [r0, #20]
 800e062:	6103      	str	r3, [r0, #16]
 800e064:	bd10      	pop	{r4, pc}
 800e066:	bf00      	nop
 800e068:	0800fa90 	.word	0x0800fa90
 800e06c:	0800fb33 	.word	0x0800fb33

0800e070 <__multiply>:
 800e070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e074:	4691      	mov	r9, r2
 800e076:	690a      	ldr	r2, [r1, #16]
 800e078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	bfb8      	it	lt
 800e080:	460b      	movlt	r3, r1
 800e082:	460c      	mov	r4, r1
 800e084:	bfbc      	itt	lt
 800e086:	464c      	movlt	r4, r9
 800e088:	4699      	movlt	r9, r3
 800e08a:	6927      	ldr	r7, [r4, #16]
 800e08c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e090:	68a3      	ldr	r3, [r4, #8]
 800e092:	6861      	ldr	r1, [r4, #4]
 800e094:	eb07 060a 	add.w	r6, r7, sl
 800e098:	42b3      	cmp	r3, r6
 800e09a:	b085      	sub	sp, #20
 800e09c:	bfb8      	it	lt
 800e09e:	3101      	addlt	r1, #1
 800e0a0:	f7ff fe8e 	bl	800ddc0 <_Balloc>
 800e0a4:	b930      	cbnz	r0, 800e0b4 <__multiply+0x44>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	4b44      	ldr	r3, [pc, #272]	; (800e1bc <__multiply+0x14c>)
 800e0aa:	4845      	ldr	r0, [pc, #276]	; (800e1c0 <__multiply+0x150>)
 800e0ac:	f240 115d 	movw	r1, #349	; 0x15d
 800e0b0:	f000 fb8e 	bl	800e7d0 <__assert_func>
 800e0b4:	f100 0514 	add.w	r5, r0, #20
 800e0b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e0bc:	462b      	mov	r3, r5
 800e0be:	2200      	movs	r2, #0
 800e0c0:	4543      	cmp	r3, r8
 800e0c2:	d321      	bcc.n	800e108 <__multiply+0x98>
 800e0c4:	f104 0314 	add.w	r3, r4, #20
 800e0c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e0cc:	f109 0314 	add.w	r3, r9, #20
 800e0d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e0d4:	9202      	str	r2, [sp, #8]
 800e0d6:	1b3a      	subs	r2, r7, r4
 800e0d8:	3a15      	subs	r2, #21
 800e0da:	f022 0203 	bic.w	r2, r2, #3
 800e0de:	3204      	adds	r2, #4
 800e0e0:	f104 0115 	add.w	r1, r4, #21
 800e0e4:	428f      	cmp	r7, r1
 800e0e6:	bf38      	it	cc
 800e0e8:	2204      	movcc	r2, #4
 800e0ea:	9201      	str	r2, [sp, #4]
 800e0ec:	9a02      	ldr	r2, [sp, #8]
 800e0ee:	9303      	str	r3, [sp, #12]
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d80c      	bhi.n	800e10e <__multiply+0x9e>
 800e0f4:	2e00      	cmp	r6, #0
 800e0f6:	dd03      	ble.n	800e100 <__multiply+0x90>
 800e0f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d05a      	beq.n	800e1b6 <__multiply+0x146>
 800e100:	6106      	str	r6, [r0, #16]
 800e102:	b005      	add	sp, #20
 800e104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e108:	f843 2b04 	str.w	r2, [r3], #4
 800e10c:	e7d8      	b.n	800e0c0 <__multiply+0x50>
 800e10e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e112:	f1ba 0f00 	cmp.w	sl, #0
 800e116:	d024      	beq.n	800e162 <__multiply+0xf2>
 800e118:	f104 0e14 	add.w	lr, r4, #20
 800e11c:	46a9      	mov	r9, r5
 800e11e:	f04f 0c00 	mov.w	ip, #0
 800e122:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e126:	f8d9 1000 	ldr.w	r1, [r9]
 800e12a:	fa1f fb82 	uxth.w	fp, r2
 800e12e:	b289      	uxth	r1, r1
 800e130:	fb0a 110b 	mla	r1, sl, fp, r1
 800e134:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e138:	f8d9 2000 	ldr.w	r2, [r9]
 800e13c:	4461      	add	r1, ip
 800e13e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e142:	fb0a c20b 	mla	r2, sl, fp, ip
 800e146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e14a:	b289      	uxth	r1, r1
 800e14c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e150:	4577      	cmp	r7, lr
 800e152:	f849 1b04 	str.w	r1, [r9], #4
 800e156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e15a:	d8e2      	bhi.n	800e122 <__multiply+0xb2>
 800e15c:	9a01      	ldr	r2, [sp, #4]
 800e15e:	f845 c002 	str.w	ip, [r5, r2]
 800e162:	9a03      	ldr	r2, [sp, #12]
 800e164:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e168:	3304      	adds	r3, #4
 800e16a:	f1b9 0f00 	cmp.w	r9, #0
 800e16e:	d020      	beq.n	800e1b2 <__multiply+0x142>
 800e170:	6829      	ldr	r1, [r5, #0]
 800e172:	f104 0c14 	add.w	ip, r4, #20
 800e176:	46ae      	mov	lr, r5
 800e178:	f04f 0a00 	mov.w	sl, #0
 800e17c:	f8bc b000 	ldrh.w	fp, [ip]
 800e180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e184:	fb09 220b 	mla	r2, r9, fp, r2
 800e188:	4492      	add	sl, r2
 800e18a:	b289      	uxth	r1, r1
 800e18c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e190:	f84e 1b04 	str.w	r1, [lr], #4
 800e194:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e198:	f8be 1000 	ldrh.w	r1, [lr]
 800e19c:	0c12      	lsrs	r2, r2, #16
 800e19e:	fb09 1102 	mla	r1, r9, r2, r1
 800e1a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e1a6:	4567      	cmp	r7, ip
 800e1a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e1ac:	d8e6      	bhi.n	800e17c <__multiply+0x10c>
 800e1ae:	9a01      	ldr	r2, [sp, #4]
 800e1b0:	50a9      	str	r1, [r5, r2]
 800e1b2:	3504      	adds	r5, #4
 800e1b4:	e79a      	b.n	800e0ec <__multiply+0x7c>
 800e1b6:	3e01      	subs	r6, #1
 800e1b8:	e79c      	b.n	800e0f4 <__multiply+0x84>
 800e1ba:	bf00      	nop
 800e1bc:	0800fa90 	.word	0x0800fa90
 800e1c0:	0800fb33 	.word	0x0800fb33

0800e1c4 <__pow5mult>:
 800e1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c8:	4615      	mov	r5, r2
 800e1ca:	f012 0203 	ands.w	r2, r2, #3
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	460f      	mov	r7, r1
 800e1d2:	d007      	beq.n	800e1e4 <__pow5mult+0x20>
 800e1d4:	4c25      	ldr	r4, [pc, #148]	; (800e26c <__pow5mult+0xa8>)
 800e1d6:	3a01      	subs	r2, #1
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1de:	f7ff fe51 	bl	800de84 <__multadd>
 800e1e2:	4607      	mov	r7, r0
 800e1e4:	10ad      	asrs	r5, r5, #2
 800e1e6:	d03d      	beq.n	800e264 <__pow5mult+0xa0>
 800e1e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e1ea:	b97c      	cbnz	r4, 800e20c <__pow5mult+0x48>
 800e1ec:	2010      	movs	r0, #16
 800e1ee:	f7fe fa57 	bl	800c6a0 <malloc>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	6270      	str	r0, [r6, #36]	; 0x24
 800e1f6:	b928      	cbnz	r0, 800e204 <__pow5mult+0x40>
 800e1f8:	4b1d      	ldr	r3, [pc, #116]	; (800e270 <__pow5mult+0xac>)
 800e1fa:	481e      	ldr	r0, [pc, #120]	; (800e274 <__pow5mult+0xb0>)
 800e1fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e200:	f000 fae6 	bl	800e7d0 <__assert_func>
 800e204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e208:	6004      	str	r4, [r0, #0]
 800e20a:	60c4      	str	r4, [r0, #12]
 800e20c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e214:	b94c      	cbnz	r4, 800e22a <__pow5mult+0x66>
 800e216:	f240 2171 	movw	r1, #625	; 0x271
 800e21a:	4630      	mov	r0, r6
 800e21c:	f7ff ff12 	bl	800e044 <__i2b>
 800e220:	2300      	movs	r3, #0
 800e222:	f8c8 0008 	str.w	r0, [r8, #8]
 800e226:	4604      	mov	r4, r0
 800e228:	6003      	str	r3, [r0, #0]
 800e22a:	f04f 0900 	mov.w	r9, #0
 800e22e:	07eb      	lsls	r3, r5, #31
 800e230:	d50a      	bpl.n	800e248 <__pow5mult+0x84>
 800e232:	4639      	mov	r1, r7
 800e234:	4622      	mov	r2, r4
 800e236:	4630      	mov	r0, r6
 800e238:	f7ff ff1a 	bl	800e070 <__multiply>
 800e23c:	4639      	mov	r1, r7
 800e23e:	4680      	mov	r8, r0
 800e240:	4630      	mov	r0, r6
 800e242:	f7ff fdfd 	bl	800de40 <_Bfree>
 800e246:	4647      	mov	r7, r8
 800e248:	106d      	asrs	r5, r5, #1
 800e24a:	d00b      	beq.n	800e264 <__pow5mult+0xa0>
 800e24c:	6820      	ldr	r0, [r4, #0]
 800e24e:	b938      	cbnz	r0, 800e260 <__pow5mult+0x9c>
 800e250:	4622      	mov	r2, r4
 800e252:	4621      	mov	r1, r4
 800e254:	4630      	mov	r0, r6
 800e256:	f7ff ff0b 	bl	800e070 <__multiply>
 800e25a:	6020      	str	r0, [r4, #0]
 800e25c:	f8c0 9000 	str.w	r9, [r0]
 800e260:	4604      	mov	r4, r0
 800e262:	e7e4      	b.n	800e22e <__pow5mult+0x6a>
 800e264:	4638      	mov	r0, r7
 800e266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e26a:	bf00      	nop
 800e26c:	0800fc80 	.word	0x0800fc80
 800e270:	0800fb1c 	.word	0x0800fb1c
 800e274:	0800fb33 	.word	0x0800fb33

0800e278 <__lshift>:
 800e278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e27c:	460c      	mov	r4, r1
 800e27e:	6849      	ldr	r1, [r1, #4]
 800e280:	6923      	ldr	r3, [r4, #16]
 800e282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e286:	68a3      	ldr	r3, [r4, #8]
 800e288:	4607      	mov	r7, r0
 800e28a:	4691      	mov	r9, r2
 800e28c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e290:	f108 0601 	add.w	r6, r8, #1
 800e294:	42b3      	cmp	r3, r6
 800e296:	db0b      	blt.n	800e2b0 <__lshift+0x38>
 800e298:	4638      	mov	r0, r7
 800e29a:	f7ff fd91 	bl	800ddc0 <_Balloc>
 800e29e:	4605      	mov	r5, r0
 800e2a0:	b948      	cbnz	r0, 800e2b6 <__lshift+0x3e>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	4b2a      	ldr	r3, [pc, #168]	; (800e350 <__lshift+0xd8>)
 800e2a6:	482b      	ldr	r0, [pc, #172]	; (800e354 <__lshift+0xdc>)
 800e2a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e2ac:	f000 fa90 	bl	800e7d0 <__assert_func>
 800e2b0:	3101      	adds	r1, #1
 800e2b2:	005b      	lsls	r3, r3, #1
 800e2b4:	e7ee      	b.n	800e294 <__lshift+0x1c>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	f100 0114 	add.w	r1, r0, #20
 800e2bc:	f100 0210 	add.w	r2, r0, #16
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	4553      	cmp	r3, sl
 800e2c4:	db37      	blt.n	800e336 <__lshift+0xbe>
 800e2c6:	6920      	ldr	r0, [r4, #16]
 800e2c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2cc:	f104 0314 	add.w	r3, r4, #20
 800e2d0:	f019 091f 	ands.w	r9, r9, #31
 800e2d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e2dc:	d02f      	beq.n	800e33e <__lshift+0xc6>
 800e2de:	f1c9 0e20 	rsb	lr, r9, #32
 800e2e2:	468a      	mov	sl, r1
 800e2e4:	f04f 0c00 	mov.w	ip, #0
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	fa02 f209 	lsl.w	r2, r2, r9
 800e2ee:	ea42 020c 	orr.w	r2, r2, ip
 800e2f2:	f84a 2b04 	str.w	r2, [sl], #4
 800e2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2fa:	4298      	cmp	r0, r3
 800e2fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e300:	d8f2      	bhi.n	800e2e8 <__lshift+0x70>
 800e302:	1b03      	subs	r3, r0, r4
 800e304:	3b15      	subs	r3, #21
 800e306:	f023 0303 	bic.w	r3, r3, #3
 800e30a:	3304      	adds	r3, #4
 800e30c:	f104 0215 	add.w	r2, r4, #21
 800e310:	4290      	cmp	r0, r2
 800e312:	bf38      	it	cc
 800e314:	2304      	movcc	r3, #4
 800e316:	f841 c003 	str.w	ip, [r1, r3]
 800e31a:	f1bc 0f00 	cmp.w	ip, #0
 800e31e:	d001      	beq.n	800e324 <__lshift+0xac>
 800e320:	f108 0602 	add.w	r6, r8, #2
 800e324:	3e01      	subs	r6, #1
 800e326:	4638      	mov	r0, r7
 800e328:	612e      	str	r6, [r5, #16]
 800e32a:	4621      	mov	r1, r4
 800e32c:	f7ff fd88 	bl	800de40 <_Bfree>
 800e330:	4628      	mov	r0, r5
 800e332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e336:	f842 0f04 	str.w	r0, [r2, #4]!
 800e33a:	3301      	adds	r3, #1
 800e33c:	e7c1      	b.n	800e2c2 <__lshift+0x4a>
 800e33e:	3904      	subs	r1, #4
 800e340:	f853 2b04 	ldr.w	r2, [r3], #4
 800e344:	f841 2f04 	str.w	r2, [r1, #4]!
 800e348:	4298      	cmp	r0, r3
 800e34a:	d8f9      	bhi.n	800e340 <__lshift+0xc8>
 800e34c:	e7ea      	b.n	800e324 <__lshift+0xac>
 800e34e:	bf00      	nop
 800e350:	0800fa90 	.word	0x0800fa90
 800e354:	0800fb33 	.word	0x0800fb33

0800e358 <__mcmp>:
 800e358:	b530      	push	{r4, r5, lr}
 800e35a:	6902      	ldr	r2, [r0, #16]
 800e35c:	690c      	ldr	r4, [r1, #16]
 800e35e:	1b12      	subs	r2, r2, r4
 800e360:	d10e      	bne.n	800e380 <__mcmp+0x28>
 800e362:	f100 0314 	add.w	r3, r0, #20
 800e366:	3114      	adds	r1, #20
 800e368:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e36c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e370:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e374:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e378:	42a5      	cmp	r5, r4
 800e37a:	d003      	beq.n	800e384 <__mcmp+0x2c>
 800e37c:	d305      	bcc.n	800e38a <__mcmp+0x32>
 800e37e:	2201      	movs	r2, #1
 800e380:	4610      	mov	r0, r2
 800e382:	bd30      	pop	{r4, r5, pc}
 800e384:	4283      	cmp	r3, r0
 800e386:	d3f3      	bcc.n	800e370 <__mcmp+0x18>
 800e388:	e7fa      	b.n	800e380 <__mcmp+0x28>
 800e38a:	f04f 32ff 	mov.w	r2, #4294967295
 800e38e:	e7f7      	b.n	800e380 <__mcmp+0x28>

0800e390 <__mdiff>:
 800e390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	460c      	mov	r4, r1
 800e396:	4606      	mov	r6, r0
 800e398:	4611      	mov	r1, r2
 800e39a:	4620      	mov	r0, r4
 800e39c:	4690      	mov	r8, r2
 800e39e:	f7ff ffdb 	bl	800e358 <__mcmp>
 800e3a2:	1e05      	subs	r5, r0, #0
 800e3a4:	d110      	bne.n	800e3c8 <__mdiff+0x38>
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	f7ff fd09 	bl	800ddc0 <_Balloc>
 800e3ae:	b930      	cbnz	r0, 800e3be <__mdiff+0x2e>
 800e3b0:	4b3a      	ldr	r3, [pc, #232]	; (800e49c <__mdiff+0x10c>)
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	f240 2132 	movw	r1, #562	; 0x232
 800e3b8:	4839      	ldr	r0, [pc, #228]	; (800e4a0 <__mdiff+0x110>)
 800e3ba:	f000 fa09 	bl	800e7d0 <__assert_func>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e3c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c8:	bfa4      	itt	ge
 800e3ca:	4643      	movge	r3, r8
 800e3cc:	46a0      	movge	r8, r4
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e3d4:	bfa6      	itte	ge
 800e3d6:	461c      	movge	r4, r3
 800e3d8:	2500      	movge	r5, #0
 800e3da:	2501      	movlt	r5, #1
 800e3dc:	f7ff fcf0 	bl	800ddc0 <_Balloc>
 800e3e0:	b920      	cbnz	r0, 800e3ec <__mdiff+0x5c>
 800e3e2:	4b2e      	ldr	r3, [pc, #184]	; (800e49c <__mdiff+0x10c>)
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e3ea:	e7e5      	b.n	800e3b8 <__mdiff+0x28>
 800e3ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e3f0:	6926      	ldr	r6, [r4, #16]
 800e3f2:	60c5      	str	r5, [r0, #12]
 800e3f4:	f104 0914 	add.w	r9, r4, #20
 800e3f8:	f108 0514 	add.w	r5, r8, #20
 800e3fc:	f100 0e14 	add.w	lr, r0, #20
 800e400:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e404:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e408:	f108 0210 	add.w	r2, r8, #16
 800e40c:	46f2      	mov	sl, lr
 800e40e:	2100      	movs	r1, #0
 800e410:	f859 3b04 	ldr.w	r3, [r9], #4
 800e414:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e418:	fa1f f883 	uxth.w	r8, r3
 800e41c:	fa11 f18b 	uxtah	r1, r1, fp
 800e420:	0c1b      	lsrs	r3, r3, #16
 800e422:	eba1 0808 	sub.w	r8, r1, r8
 800e426:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e42a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e42e:	fa1f f888 	uxth.w	r8, r8
 800e432:	1419      	asrs	r1, r3, #16
 800e434:	454e      	cmp	r6, r9
 800e436:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e43a:	f84a 3b04 	str.w	r3, [sl], #4
 800e43e:	d8e7      	bhi.n	800e410 <__mdiff+0x80>
 800e440:	1b33      	subs	r3, r6, r4
 800e442:	3b15      	subs	r3, #21
 800e444:	f023 0303 	bic.w	r3, r3, #3
 800e448:	3304      	adds	r3, #4
 800e44a:	3415      	adds	r4, #21
 800e44c:	42a6      	cmp	r6, r4
 800e44e:	bf38      	it	cc
 800e450:	2304      	movcc	r3, #4
 800e452:	441d      	add	r5, r3
 800e454:	4473      	add	r3, lr
 800e456:	469e      	mov	lr, r3
 800e458:	462e      	mov	r6, r5
 800e45a:	4566      	cmp	r6, ip
 800e45c:	d30e      	bcc.n	800e47c <__mdiff+0xec>
 800e45e:	f10c 0203 	add.w	r2, ip, #3
 800e462:	1b52      	subs	r2, r2, r5
 800e464:	f022 0203 	bic.w	r2, r2, #3
 800e468:	3d03      	subs	r5, #3
 800e46a:	45ac      	cmp	ip, r5
 800e46c:	bf38      	it	cc
 800e46e:	2200      	movcc	r2, #0
 800e470:	441a      	add	r2, r3
 800e472:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e476:	b17b      	cbz	r3, 800e498 <__mdiff+0x108>
 800e478:	6107      	str	r7, [r0, #16]
 800e47a:	e7a3      	b.n	800e3c4 <__mdiff+0x34>
 800e47c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e480:	fa11 f288 	uxtah	r2, r1, r8
 800e484:	1414      	asrs	r4, r2, #16
 800e486:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e48a:	b292      	uxth	r2, r2
 800e48c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e490:	f84e 2b04 	str.w	r2, [lr], #4
 800e494:	1421      	asrs	r1, r4, #16
 800e496:	e7e0      	b.n	800e45a <__mdiff+0xca>
 800e498:	3f01      	subs	r7, #1
 800e49a:	e7ea      	b.n	800e472 <__mdiff+0xe2>
 800e49c:	0800fa90 	.word	0x0800fa90
 800e4a0:	0800fb33 	.word	0x0800fb33

0800e4a4 <__ulp>:
 800e4a4:	b082      	sub	sp, #8
 800e4a6:	ed8d 0b00 	vstr	d0, [sp]
 800e4aa:	9b01      	ldr	r3, [sp, #4]
 800e4ac:	4912      	ldr	r1, [pc, #72]	; (800e4f8 <__ulp+0x54>)
 800e4ae:	4019      	ands	r1, r3
 800e4b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e4b4:	2900      	cmp	r1, #0
 800e4b6:	dd05      	ble.n	800e4c4 <__ulp+0x20>
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	ec43 2b10 	vmov	d0, r2, r3
 800e4c0:	b002      	add	sp, #8
 800e4c2:	4770      	bx	lr
 800e4c4:	4249      	negs	r1, r1
 800e4c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e4ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e4ce:	f04f 0200 	mov.w	r2, #0
 800e4d2:	f04f 0300 	mov.w	r3, #0
 800e4d6:	da04      	bge.n	800e4e2 <__ulp+0x3e>
 800e4d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e4dc:	fa41 f300 	asr.w	r3, r1, r0
 800e4e0:	e7ec      	b.n	800e4bc <__ulp+0x18>
 800e4e2:	f1a0 0114 	sub.w	r1, r0, #20
 800e4e6:	291e      	cmp	r1, #30
 800e4e8:	bfda      	itte	le
 800e4ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e4ee:	fa20 f101 	lsrle.w	r1, r0, r1
 800e4f2:	2101      	movgt	r1, #1
 800e4f4:	460a      	mov	r2, r1
 800e4f6:	e7e1      	b.n	800e4bc <__ulp+0x18>
 800e4f8:	7ff00000 	.word	0x7ff00000

0800e4fc <__b2d>:
 800e4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fe:	6905      	ldr	r5, [r0, #16]
 800e500:	f100 0714 	add.w	r7, r0, #20
 800e504:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e508:	1f2e      	subs	r6, r5, #4
 800e50a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e50e:	4620      	mov	r0, r4
 800e510:	f7ff fd48 	bl	800dfa4 <__hi0bits>
 800e514:	f1c0 0320 	rsb	r3, r0, #32
 800e518:	280a      	cmp	r0, #10
 800e51a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e598 <__b2d+0x9c>
 800e51e:	600b      	str	r3, [r1, #0]
 800e520:	dc14      	bgt.n	800e54c <__b2d+0x50>
 800e522:	f1c0 0e0b 	rsb	lr, r0, #11
 800e526:	fa24 f10e 	lsr.w	r1, r4, lr
 800e52a:	42b7      	cmp	r7, r6
 800e52c:	ea41 030c 	orr.w	r3, r1, ip
 800e530:	bf34      	ite	cc
 800e532:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e536:	2100      	movcs	r1, #0
 800e538:	3015      	adds	r0, #21
 800e53a:	fa04 f000 	lsl.w	r0, r4, r0
 800e53e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e542:	ea40 0201 	orr.w	r2, r0, r1
 800e546:	ec43 2b10 	vmov	d0, r2, r3
 800e54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e54c:	42b7      	cmp	r7, r6
 800e54e:	bf3a      	itte	cc
 800e550:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e554:	f1a5 0608 	subcc.w	r6, r5, #8
 800e558:	2100      	movcs	r1, #0
 800e55a:	380b      	subs	r0, #11
 800e55c:	d017      	beq.n	800e58e <__b2d+0x92>
 800e55e:	f1c0 0c20 	rsb	ip, r0, #32
 800e562:	fa04 f500 	lsl.w	r5, r4, r0
 800e566:	42be      	cmp	r6, r7
 800e568:	fa21 f40c 	lsr.w	r4, r1, ip
 800e56c:	ea45 0504 	orr.w	r5, r5, r4
 800e570:	bf8c      	ite	hi
 800e572:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e576:	2400      	movls	r4, #0
 800e578:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e57c:	fa01 f000 	lsl.w	r0, r1, r0
 800e580:	fa24 f40c 	lsr.w	r4, r4, ip
 800e584:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e588:	ea40 0204 	orr.w	r2, r0, r4
 800e58c:	e7db      	b.n	800e546 <__b2d+0x4a>
 800e58e:	ea44 030c 	orr.w	r3, r4, ip
 800e592:	460a      	mov	r2, r1
 800e594:	e7d7      	b.n	800e546 <__b2d+0x4a>
 800e596:	bf00      	nop
 800e598:	3ff00000 	.word	0x3ff00000

0800e59c <__d2b>:
 800e59c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5a0:	4689      	mov	r9, r1
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	ec57 6b10 	vmov	r6, r7, d0
 800e5a8:	4690      	mov	r8, r2
 800e5aa:	f7ff fc09 	bl	800ddc0 <_Balloc>
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	b930      	cbnz	r0, 800e5c0 <__d2b+0x24>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	4b25      	ldr	r3, [pc, #148]	; (800e64c <__d2b+0xb0>)
 800e5b6:	4826      	ldr	r0, [pc, #152]	; (800e650 <__d2b+0xb4>)
 800e5b8:	f240 310a 	movw	r1, #778	; 0x30a
 800e5bc:	f000 f908 	bl	800e7d0 <__assert_func>
 800e5c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e5c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e5c8:	bb35      	cbnz	r5, 800e618 <__d2b+0x7c>
 800e5ca:	2e00      	cmp	r6, #0
 800e5cc:	9301      	str	r3, [sp, #4]
 800e5ce:	d028      	beq.n	800e622 <__d2b+0x86>
 800e5d0:	4668      	mov	r0, sp
 800e5d2:	9600      	str	r6, [sp, #0]
 800e5d4:	f7ff fd06 	bl	800dfe4 <__lo0bits>
 800e5d8:	9900      	ldr	r1, [sp, #0]
 800e5da:	b300      	cbz	r0, 800e61e <__d2b+0x82>
 800e5dc:	9a01      	ldr	r2, [sp, #4]
 800e5de:	f1c0 0320 	rsb	r3, r0, #32
 800e5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e6:	430b      	orrs	r3, r1
 800e5e8:	40c2      	lsrs	r2, r0
 800e5ea:	6163      	str	r3, [r4, #20]
 800e5ec:	9201      	str	r2, [sp, #4]
 800e5ee:	9b01      	ldr	r3, [sp, #4]
 800e5f0:	61a3      	str	r3, [r4, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	bf14      	ite	ne
 800e5f6:	2202      	movne	r2, #2
 800e5f8:	2201      	moveq	r2, #1
 800e5fa:	6122      	str	r2, [r4, #16]
 800e5fc:	b1d5      	cbz	r5, 800e634 <__d2b+0x98>
 800e5fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e602:	4405      	add	r5, r0
 800e604:	f8c9 5000 	str.w	r5, [r9]
 800e608:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e60c:	f8c8 0000 	str.w	r0, [r8]
 800e610:	4620      	mov	r0, r4
 800e612:	b003      	add	sp, #12
 800e614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e61c:	e7d5      	b.n	800e5ca <__d2b+0x2e>
 800e61e:	6161      	str	r1, [r4, #20]
 800e620:	e7e5      	b.n	800e5ee <__d2b+0x52>
 800e622:	a801      	add	r0, sp, #4
 800e624:	f7ff fcde 	bl	800dfe4 <__lo0bits>
 800e628:	9b01      	ldr	r3, [sp, #4]
 800e62a:	6163      	str	r3, [r4, #20]
 800e62c:	2201      	movs	r2, #1
 800e62e:	6122      	str	r2, [r4, #16]
 800e630:	3020      	adds	r0, #32
 800e632:	e7e3      	b.n	800e5fc <__d2b+0x60>
 800e634:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e63c:	f8c9 0000 	str.w	r0, [r9]
 800e640:	6918      	ldr	r0, [r3, #16]
 800e642:	f7ff fcaf 	bl	800dfa4 <__hi0bits>
 800e646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e64a:	e7df      	b.n	800e60c <__d2b+0x70>
 800e64c:	0800fa90 	.word	0x0800fa90
 800e650:	0800fb33 	.word	0x0800fb33

0800e654 <__ratio>:
 800e654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e658:	4688      	mov	r8, r1
 800e65a:	4669      	mov	r1, sp
 800e65c:	4681      	mov	r9, r0
 800e65e:	f7ff ff4d 	bl	800e4fc <__b2d>
 800e662:	a901      	add	r1, sp, #4
 800e664:	4640      	mov	r0, r8
 800e666:	ec55 4b10 	vmov	r4, r5, d0
 800e66a:	f7ff ff47 	bl	800e4fc <__b2d>
 800e66e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e672:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e676:	eba3 0c02 	sub.w	ip, r3, r2
 800e67a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e67e:	1a9b      	subs	r3, r3, r2
 800e680:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e684:	ec51 0b10 	vmov	r0, r1, d0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	bfd6      	itet	le
 800e68c:	460a      	movle	r2, r1
 800e68e:	462a      	movgt	r2, r5
 800e690:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e694:	468b      	mov	fp, r1
 800e696:	462f      	mov	r7, r5
 800e698:	bfd4      	ite	le
 800e69a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e69e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	ee10 2a10 	vmov	r2, s0
 800e6a8:	465b      	mov	r3, fp
 800e6aa:	4639      	mov	r1, r7
 800e6ac:	f7f2 f8ee 	bl	800088c <__aeabi_ddiv>
 800e6b0:	ec41 0b10 	vmov	d0, r0, r1
 800e6b4:	b003      	add	sp, #12
 800e6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6ba <__copybits>:
 800e6ba:	3901      	subs	r1, #1
 800e6bc:	b570      	push	{r4, r5, r6, lr}
 800e6be:	1149      	asrs	r1, r1, #5
 800e6c0:	6914      	ldr	r4, [r2, #16]
 800e6c2:	3101      	adds	r1, #1
 800e6c4:	f102 0314 	add.w	r3, r2, #20
 800e6c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e6cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e6d0:	1f05      	subs	r5, r0, #4
 800e6d2:	42a3      	cmp	r3, r4
 800e6d4:	d30c      	bcc.n	800e6f0 <__copybits+0x36>
 800e6d6:	1aa3      	subs	r3, r4, r2
 800e6d8:	3b11      	subs	r3, #17
 800e6da:	f023 0303 	bic.w	r3, r3, #3
 800e6de:	3211      	adds	r2, #17
 800e6e0:	42a2      	cmp	r2, r4
 800e6e2:	bf88      	it	hi
 800e6e4:	2300      	movhi	r3, #0
 800e6e6:	4418      	add	r0, r3
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	4288      	cmp	r0, r1
 800e6ec:	d305      	bcc.n	800e6fa <__copybits+0x40>
 800e6ee:	bd70      	pop	{r4, r5, r6, pc}
 800e6f0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e6f4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e6f8:	e7eb      	b.n	800e6d2 <__copybits+0x18>
 800e6fa:	f840 3b04 	str.w	r3, [r0], #4
 800e6fe:	e7f4      	b.n	800e6ea <__copybits+0x30>

0800e700 <__any_on>:
 800e700:	f100 0214 	add.w	r2, r0, #20
 800e704:	6900      	ldr	r0, [r0, #16]
 800e706:	114b      	asrs	r3, r1, #5
 800e708:	4298      	cmp	r0, r3
 800e70a:	b510      	push	{r4, lr}
 800e70c:	db11      	blt.n	800e732 <__any_on+0x32>
 800e70e:	dd0a      	ble.n	800e726 <__any_on+0x26>
 800e710:	f011 011f 	ands.w	r1, r1, #31
 800e714:	d007      	beq.n	800e726 <__any_on+0x26>
 800e716:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e71a:	fa24 f001 	lsr.w	r0, r4, r1
 800e71e:	fa00 f101 	lsl.w	r1, r0, r1
 800e722:	428c      	cmp	r4, r1
 800e724:	d10b      	bne.n	800e73e <__any_on+0x3e>
 800e726:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d803      	bhi.n	800e736 <__any_on+0x36>
 800e72e:	2000      	movs	r0, #0
 800e730:	bd10      	pop	{r4, pc}
 800e732:	4603      	mov	r3, r0
 800e734:	e7f7      	b.n	800e726 <__any_on+0x26>
 800e736:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e73a:	2900      	cmp	r1, #0
 800e73c:	d0f5      	beq.n	800e72a <__any_on+0x2a>
 800e73e:	2001      	movs	r0, #1
 800e740:	e7f6      	b.n	800e730 <__any_on+0x30>

0800e742 <_calloc_r>:
 800e742:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e744:	fba1 2402 	umull	r2, r4, r1, r2
 800e748:	b94c      	cbnz	r4, 800e75e <_calloc_r+0x1c>
 800e74a:	4611      	mov	r1, r2
 800e74c:	9201      	str	r2, [sp, #4]
 800e74e:	f7fe f863 	bl	800c818 <_malloc_r>
 800e752:	9a01      	ldr	r2, [sp, #4]
 800e754:	4605      	mov	r5, r0
 800e756:	b930      	cbnz	r0, 800e766 <_calloc_r+0x24>
 800e758:	4628      	mov	r0, r5
 800e75a:	b003      	add	sp, #12
 800e75c:	bd30      	pop	{r4, r5, pc}
 800e75e:	220c      	movs	r2, #12
 800e760:	6002      	str	r2, [r0, #0]
 800e762:	2500      	movs	r5, #0
 800e764:	e7f8      	b.n	800e758 <_calloc_r+0x16>
 800e766:	4621      	mov	r1, r4
 800e768:	f7fd ffe2 	bl	800c730 <memset>
 800e76c:	e7f4      	b.n	800e758 <_calloc_r+0x16>
	...

0800e770 <nan>:
 800e770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e778 <nan+0x8>
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	00000000 	.word	0x00000000
 800e77c:	7ff80000 	.word	0x7ff80000

0800e780 <nanf>:
 800e780:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e788 <nanf+0x8>
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	7fc00000 	.word	0x7fc00000

0800e78c <strncmp>:
 800e78c:	b510      	push	{r4, lr}
 800e78e:	b17a      	cbz	r2, 800e7b0 <strncmp+0x24>
 800e790:	4603      	mov	r3, r0
 800e792:	3901      	subs	r1, #1
 800e794:	1884      	adds	r4, r0, r2
 800e796:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e79a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e79e:	4290      	cmp	r0, r2
 800e7a0:	d101      	bne.n	800e7a6 <strncmp+0x1a>
 800e7a2:	42a3      	cmp	r3, r4
 800e7a4:	d101      	bne.n	800e7aa <strncmp+0x1e>
 800e7a6:	1a80      	subs	r0, r0, r2
 800e7a8:	bd10      	pop	{r4, pc}
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d1f3      	bne.n	800e796 <strncmp+0xa>
 800e7ae:	e7fa      	b.n	800e7a6 <strncmp+0x1a>
 800e7b0:	4610      	mov	r0, r2
 800e7b2:	e7f9      	b.n	800e7a8 <strncmp+0x1c>

0800e7b4 <__ascii_wctomb>:
 800e7b4:	b149      	cbz	r1, 800e7ca <__ascii_wctomb+0x16>
 800e7b6:	2aff      	cmp	r2, #255	; 0xff
 800e7b8:	bf85      	ittet	hi
 800e7ba:	238a      	movhi	r3, #138	; 0x8a
 800e7bc:	6003      	strhi	r3, [r0, #0]
 800e7be:	700a      	strbls	r2, [r1, #0]
 800e7c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e7c4:	bf98      	it	ls
 800e7c6:	2001      	movls	r0, #1
 800e7c8:	4770      	bx	lr
 800e7ca:	4608      	mov	r0, r1
 800e7cc:	4770      	bx	lr
	...

0800e7d0 <__assert_func>:
 800e7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7d2:	4614      	mov	r4, r2
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	4b09      	ldr	r3, [pc, #36]	; (800e7fc <__assert_func+0x2c>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4605      	mov	r5, r0
 800e7dc:	68d8      	ldr	r0, [r3, #12]
 800e7de:	b14c      	cbz	r4, 800e7f4 <__assert_func+0x24>
 800e7e0:	4b07      	ldr	r3, [pc, #28]	; (800e800 <__assert_func+0x30>)
 800e7e2:	9100      	str	r1, [sp, #0]
 800e7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7e8:	4906      	ldr	r1, [pc, #24]	; (800e804 <__assert_func+0x34>)
 800e7ea:	462b      	mov	r3, r5
 800e7ec:	f000 f80e 	bl	800e80c <fiprintf>
 800e7f0:	f7fd ff24 	bl	800c63c <abort>
 800e7f4:	4b04      	ldr	r3, [pc, #16]	; (800e808 <__assert_func+0x38>)
 800e7f6:	461c      	mov	r4, r3
 800e7f8:	e7f3      	b.n	800e7e2 <__assert_func+0x12>
 800e7fa:	bf00      	nop
 800e7fc:	200000ec 	.word	0x200000ec
 800e800:	0800fc8c 	.word	0x0800fc8c
 800e804:	0800fc99 	.word	0x0800fc99
 800e808:	0800fcc7 	.word	0x0800fcc7

0800e80c <fiprintf>:
 800e80c:	b40e      	push	{r1, r2, r3}
 800e80e:	b503      	push	{r0, r1, lr}
 800e810:	4601      	mov	r1, r0
 800e812:	ab03      	add	r3, sp, #12
 800e814:	4805      	ldr	r0, [pc, #20]	; (800e82c <fiprintf+0x20>)
 800e816:	f853 2b04 	ldr.w	r2, [r3], #4
 800e81a:	6800      	ldr	r0, [r0, #0]
 800e81c:	9301      	str	r3, [sp, #4]
 800e81e:	f000 f833 	bl	800e888 <_vfiprintf_r>
 800e822:	b002      	add	sp, #8
 800e824:	f85d eb04 	ldr.w	lr, [sp], #4
 800e828:	b003      	add	sp, #12
 800e82a:	4770      	bx	lr
 800e82c:	200000ec 	.word	0x200000ec

0800e830 <__retarget_lock_init_recursive>:
 800e830:	4770      	bx	lr

0800e832 <__retarget_lock_acquire_recursive>:
 800e832:	4770      	bx	lr

0800e834 <__retarget_lock_release_recursive>:
 800e834:	4770      	bx	lr

0800e836 <__sfputc_r>:
 800e836:	6893      	ldr	r3, [r2, #8]
 800e838:	3b01      	subs	r3, #1
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	b410      	push	{r4}
 800e83e:	6093      	str	r3, [r2, #8]
 800e840:	da08      	bge.n	800e854 <__sfputc_r+0x1e>
 800e842:	6994      	ldr	r4, [r2, #24]
 800e844:	42a3      	cmp	r3, r4
 800e846:	db01      	blt.n	800e84c <__sfputc_r+0x16>
 800e848:	290a      	cmp	r1, #10
 800e84a:	d103      	bne.n	800e854 <__sfputc_r+0x1e>
 800e84c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e850:	f000 bade 	b.w	800ee10 <__swbuf_r>
 800e854:	6813      	ldr	r3, [r2, #0]
 800e856:	1c58      	adds	r0, r3, #1
 800e858:	6010      	str	r0, [r2, #0]
 800e85a:	7019      	strb	r1, [r3, #0]
 800e85c:	4608      	mov	r0, r1
 800e85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <__sfputs_r>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	4606      	mov	r6, r0
 800e868:	460f      	mov	r7, r1
 800e86a:	4614      	mov	r4, r2
 800e86c:	18d5      	adds	r5, r2, r3
 800e86e:	42ac      	cmp	r4, r5
 800e870:	d101      	bne.n	800e876 <__sfputs_r+0x12>
 800e872:	2000      	movs	r0, #0
 800e874:	e007      	b.n	800e886 <__sfputs_r+0x22>
 800e876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e87a:	463a      	mov	r2, r7
 800e87c:	4630      	mov	r0, r6
 800e87e:	f7ff ffda 	bl	800e836 <__sfputc_r>
 800e882:	1c43      	adds	r3, r0, #1
 800e884:	d1f3      	bne.n	800e86e <__sfputs_r+0xa>
 800e886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e888 <_vfiprintf_r>:
 800e888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e88c:	460d      	mov	r5, r1
 800e88e:	b09d      	sub	sp, #116	; 0x74
 800e890:	4614      	mov	r4, r2
 800e892:	4698      	mov	r8, r3
 800e894:	4606      	mov	r6, r0
 800e896:	b118      	cbz	r0, 800e8a0 <_vfiprintf_r+0x18>
 800e898:	6983      	ldr	r3, [r0, #24]
 800e89a:	b90b      	cbnz	r3, 800e8a0 <_vfiprintf_r+0x18>
 800e89c:	f000 fc92 	bl	800f1c4 <__sinit>
 800e8a0:	4b89      	ldr	r3, [pc, #548]	; (800eac8 <_vfiprintf_r+0x240>)
 800e8a2:	429d      	cmp	r5, r3
 800e8a4:	d11b      	bne.n	800e8de <_vfiprintf_r+0x56>
 800e8a6:	6875      	ldr	r5, [r6, #4]
 800e8a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8aa:	07d9      	lsls	r1, r3, #31
 800e8ac:	d405      	bmi.n	800e8ba <_vfiprintf_r+0x32>
 800e8ae:	89ab      	ldrh	r3, [r5, #12]
 800e8b0:	059a      	lsls	r2, r3, #22
 800e8b2:	d402      	bmi.n	800e8ba <_vfiprintf_r+0x32>
 800e8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8b6:	f7ff ffbc 	bl	800e832 <__retarget_lock_acquire_recursive>
 800e8ba:	89ab      	ldrh	r3, [r5, #12]
 800e8bc:	071b      	lsls	r3, r3, #28
 800e8be:	d501      	bpl.n	800e8c4 <_vfiprintf_r+0x3c>
 800e8c0:	692b      	ldr	r3, [r5, #16]
 800e8c2:	b9eb      	cbnz	r3, 800e900 <_vfiprintf_r+0x78>
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	f000 faf4 	bl	800eeb4 <__swsetup_r>
 800e8cc:	b1c0      	cbz	r0, 800e900 <_vfiprintf_r+0x78>
 800e8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8d0:	07dc      	lsls	r4, r3, #31
 800e8d2:	d50e      	bpl.n	800e8f2 <_vfiprintf_r+0x6a>
 800e8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d8:	b01d      	add	sp, #116	; 0x74
 800e8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8de:	4b7b      	ldr	r3, [pc, #492]	; (800eacc <_vfiprintf_r+0x244>)
 800e8e0:	429d      	cmp	r5, r3
 800e8e2:	d101      	bne.n	800e8e8 <_vfiprintf_r+0x60>
 800e8e4:	68b5      	ldr	r5, [r6, #8]
 800e8e6:	e7df      	b.n	800e8a8 <_vfiprintf_r+0x20>
 800e8e8:	4b79      	ldr	r3, [pc, #484]	; (800ead0 <_vfiprintf_r+0x248>)
 800e8ea:	429d      	cmp	r5, r3
 800e8ec:	bf08      	it	eq
 800e8ee:	68f5      	ldreq	r5, [r6, #12]
 800e8f0:	e7da      	b.n	800e8a8 <_vfiprintf_r+0x20>
 800e8f2:	89ab      	ldrh	r3, [r5, #12]
 800e8f4:	0598      	lsls	r0, r3, #22
 800e8f6:	d4ed      	bmi.n	800e8d4 <_vfiprintf_r+0x4c>
 800e8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8fa:	f7ff ff9b 	bl	800e834 <__retarget_lock_release_recursive>
 800e8fe:	e7e9      	b.n	800e8d4 <_vfiprintf_r+0x4c>
 800e900:	2300      	movs	r3, #0
 800e902:	9309      	str	r3, [sp, #36]	; 0x24
 800e904:	2320      	movs	r3, #32
 800e906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e90e:	2330      	movs	r3, #48	; 0x30
 800e910:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ead4 <_vfiprintf_r+0x24c>
 800e914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e918:	f04f 0901 	mov.w	r9, #1
 800e91c:	4623      	mov	r3, r4
 800e91e:	469a      	mov	sl, r3
 800e920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e924:	b10a      	cbz	r2, 800e92a <_vfiprintf_r+0xa2>
 800e926:	2a25      	cmp	r2, #37	; 0x25
 800e928:	d1f9      	bne.n	800e91e <_vfiprintf_r+0x96>
 800e92a:	ebba 0b04 	subs.w	fp, sl, r4
 800e92e:	d00b      	beq.n	800e948 <_vfiprintf_r+0xc0>
 800e930:	465b      	mov	r3, fp
 800e932:	4622      	mov	r2, r4
 800e934:	4629      	mov	r1, r5
 800e936:	4630      	mov	r0, r6
 800e938:	f7ff ff94 	bl	800e864 <__sfputs_r>
 800e93c:	3001      	adds	r0, #1
 800e93e:	f000 80aa 	beq.w	800ea96 <_vfiprintf_r+0x20e>
 800e942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e944:	445a      	add	r2, fp
 800e946:	9209      	str	r2, [sp, #36]	; 0x24
 800e948:	f89a 3000 	ldrb.w	r3, [sl]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f000 80a2 	beq.w	800ea96 <_vfiprintf_r+0x20e>
 800e952:	2300      	movs	r3, #0
 800e954:	f04f 32ff 	mov.w	r2, #4294967295
 800e958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e95c:	f10a 0a01 	add.w	sl, sl, #1
 800e960:	9304      	str	r3, [sp, #16]
 800e962:	9307      	str	r3, [sp, #28]
 800e964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e968:	931a      	str	r3, [sp, #104]	; 0x68
 800e96a:	4654      	mov	r4, sl
 800e96c:	2205      	movs	r2, #5
 800e96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e972:	4858      	ldr	r0, [pc, #352]	; (800ead4 <_vfiprintf_r+0x24c>)
 800e974:	f7f1 fc4c 	bl	8000210 <memchr>
 800e978:	9a04      	ldr	r2, [sp, #16]
 800e97a:	b9d8      	cbnz	r0, 800e9b4 <_vfiprintf_r+0x12c>
 800e97c:	06d1      	lsls	r1, r2, #27
 800e97e:	bf44      	itt	mi
 800e980:	2320      	movmi	r3, #32
 800e982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e986:	0713      	lsls	r3, r2, #28
 800e988:	bf44      	itt	mi
 800e98a:	232b      	movmi	r3, #43	; 0x2b
 800e98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e990:	f89a 3000 	ldrb.w	r3, [sl]
 800e994:	2b2a      	cmp	r3, #42	; 0x2a
 800e996:	d015      	beq.n	800e9c4 <_vfiprintf_r+0x13c>
 800e998:	9a07      	ldr	r2, [sp, #28]
 800e99a:	4654      	mov	r4, sl
 800e99c:	2000      	movs	r0, #0
 800e99e:	f04f 0c0a 	mov.w	ip, #10
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9a8:	3b30      	subs	r3, #48	; 0x30
 800e9aa:	2b09      	cmp	r3, #9
 800e9ac:	d94e      	bls.n	800ea4c <_vfiprintf_r+0x1c4>
 800e9ae:	b1b0      	cbz	r0, 800e9de <_vfiprintf_r+0x156>
 800e9b0:	9207      	str	r2, [sp, #28]
 800e9b2:	e014      	b.n	800e9de <_vfiprintf_r+0x156>
 800e9b4:	eba0 0308 	sub.w	r3, r0, r8
 800e9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	9304      	str	r3, [sp, #16]
 800e9c0:	46a2      	mov	sl, r4
 800e9c2:	e7d2      	b.n	800e96a <_vfiprintf_r+0xe2>
 800e9c4:	9b03      	ldr	r3, [sp, #12]
 800e9c6:	1d19      	adds	r1, r3, #4
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	9103      	str	r1, [sp, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	bfbb      	ittet	lt
 800e9d0:	425b      	neglt	r3, r3
 800e9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800e9d6:	9307      	strge	r3, [sp, #28]
 800e9d8:	9307      	strlt	r3, [sp, #28]
 800e9da:	bfb8      	it	lt
 800e9dc:	9204      	strlt	r2, [sp, #16]
 800e9de:	7823      	ldrb	r3, [r4, #0]
 800e9e0:	2b2e      	cmp	r3, #46	; 0x2e
 800e9e2:	d10c      	bne.n	800e9fe <_vfiprintf_r+0x176>
 800e9e4:	7863      	ldrb	r3, [r4, #1]
 800e9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e9e8:	d135      	bne.n	800ea56 <_vfiprintf_r+0x1ce>
 800e9ea:	9b03      	ldr	r3, [sp, #12]
 800e9ec:	1d1a      	adds	r2, r3, #4
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	9203      	str	r2, [sp, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	bfb8      	it	lt
 800e9f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9fa:	3402      	adds	r4, #2
 800e9fc:	9305      	str	r3, [sp, #20]
 800e9fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eae4 <_vfiprintf_r+0x25c>
 800ea02:	7821      	ldrb	r1, [r4, #0]
 800ea04:	2203      	movs	r2, #3
 800ea06:	4650      	mov	r0, sl
 800ea08:	f7f1 fc02 	bl	8000210 <memchr>
 800ea0c:	b140      	cbz	r0, 800ea20 <_vfiprintf_r+0x198>
 800ea0e:	2340      	movs	r3, #64	; 0x40
 800ea10:	eba0 000a 	sub.w	r0, r0, sl
 800ea14:	fa03 f000 	lsl.w	r0, r3, r0
 800ea18:	9b04      	ldr	r3, [sp, #16]
 800ea1a:	4303      	orrs	r3, r0
 800ea1c:	3401      	adds	r4, #1
 800ea1e:	9304      	str	r3, [sp, #16]
 800ea20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea24:	482c      	ldr	r0, [pc, #176]	; (800ead8 <_vfiprintf_r+0x250>)
 800ea26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea2a:	2206      	movs	r2, #6
 800ea2c:	f7f1 fbf0 	bl	8000210 <memchr>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	d03f      	beq.n	800eab4 <_vfiprintf_r+0x22c>
 800ea34:	4b29      	ldr	r3, [pc, #164]	; (800eadc <_vfiprintf_r+0x254>)
 800ea36:	bb1b      	cbnz	r3, 800ea80 <_vfiprintf_r+0x1f8>
 800ea38:	9b03      	ldr	r3, [sp, #12]
 800ea3a:	3307      	adds	r3, #7
 800ea3c:	f023 0307 	bic.w	r3, r3, #7
 800ea40:	3308      	adds	r3, #8
 800ea42:	9303      	str	r3, [sp, #12]
 800ea44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea46:	443b      	add	r3, r7
 800ea48:	9309      	str	r3, [sp, #36]	; 0x24
 800ea4a:	e767      	b.n	800e91c <_vfiprintf_r+0x94>
 800ea4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea50:	460c      	mov	r4, r1
 800ea52:	2001      	movs	r0, #1
 800ea54:	e7a5      	b.n	800e9a2 <_vfiprintf_r+0x11a>
 800ea56:	2300      	movs	r3, #0
 800ea58:	3401      	adds	r4, #1
 800ea5a:	9305      	str	r3, [sp, #20]
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	f04f 0c0a 	mov.w	ip, #10
 800ea62:	4620      	mov	r0, r4
 800ea64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea68:	3a30      	subs	r2, #48	; 0x30
 800ea6a:	2a09      	cmp	r2, #9
 800ea6c:	d903      	bls.n	800ea76 <_vfiprintf_r+0x1ee>
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d0c5      	beq.n	800e9fe <_vfiprintf_r+0x176>
 800ea72:	9105      	str	r1, [sp, #20]
 800ea74:	e7c3      	b.n	800e9fe <_vfiprintf_r+0x176>
 800ea76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e7f0      	b.n	800ea62 <_vfiprintf_r+0x1da>
 800ea80:	ab03      	add	r3, sp, #12
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	462a      	mov	r2, r5
 800ea86:	4b16      	ldr	r3, [pc, #88]	; (800eae0 <_vfiprintf_r+0x258>)
 800ea88:	a904      	add	r1, sp, #16
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	f3af 8000 	nop.w
 800ea90:	4607      	mov	r7, r0
 800ea92:	1c78      	adds	r0, r7, #1
 800ea94:	d1d6      	bne.n	800ea44 <_vfiprintf_r+0x1bc>
 800ea96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea98:	07d9      	lsls	r1, r3, #31
 800ea9a:	d405      	bmi.n	800eaa8 <_vfiprintf_r+0x220>
 800ea9c:	89ab      	ldrh	r3, [r5, #12]
 800ea9e:	059a      	lsls	r2, r3, #22
 800eaa0:	d402      	bmi.n	800eaa8 <_vfiprintf_r+0x220>
 800eaa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eaa4:	f7ff fec6 	bl	800e834 <__retarget_lock_release_recursive>
 800eaa8:	89ab      	ldrh	r3, [r5, #12]
 800eaaa:	065b      	lsls	r3, r3, #25
 800eaac:	f53f af12 	bmi.w	800e8d4 <_vfiprintf_r+0x4c>
 800eab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eab2:	e711      	b.n	800e8d8 <_vfiprintf_r+0x50>
 800eab4:	ab03      	add	r3, sp, #12
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	462a      	mov	r2, r5
 800eaba:	4b09      	ldr	r3, [pc, #36]	; (800eae0 <_vfiprintf_r+0x258>)
 800eabc:	a904      	add	r1, sp, #16
 800eabe:	4630      	mov	r0, r6
 800eac0:	f000 f880 	bl	800ebc4 <_printf_i>
 800eac4:	e7e4      	b.n	800ea90 <_vfiprintf_r+0x208>
 800eac6:	bf00      	nop
 800eac8:	0800fe1c 	.word	0x0800fe1c
 800eacc:	0800fe3c 	.word	0x0800fe3c
 800ead0:	0800fdfc 	.word	0x0800fdfc
 800ead4:	0800fdc9 	.word	0x0800fdc9
 800ead8:	0800fdd3 	.word	0x0800fdd3
 800eadc:	00000000 	.word	0x00000000
 800eae0:	0800e865 	.word	0x0800e865
 800eae4:	0800fdcf 	.word	0x0800fdcf

0800eae8 <_printf_common>:
 800eae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaec:	4616      	mov	r6, r2
 800eaee:	4699      	mov	r9, r3
 800eaf0:	688a      	ldr	r2, [r1, #8]
 800eaf2:	690b      	ldr	r3, [r1, #16]
 800eaf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	bfb8      	it	lt
 800eafc:	4613      	movlt	r3, r2
 800eafe:	6033      	str	r3, [r6, #0]
 800eb00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb04:	4607      	mov	r7, r0
 800eb06:	460c      	mov	r4, r1
 800eb08:	b10a      	cbz	r2, 800eb0e <_printf_common+0x26>
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	6033      	str	r3, [r6, #0]
 800eb0e:	6823      	ldr	r3, [r4, #0]
 800eb10:	0699      	lsls	r1, r3, #26
 800eb12:	bf42      	ittt	mi
 800eb14:	6833      	ldrmi	r3, [r6, #0]
 800eb16:	3302      	addmi	r3, #2
 800eb18:	6033      	strmi	r3, [r6, #0]
 800eb1a:	6825      	ldr	r5, [r4, #0]
 800eb1c:	f015 0506 	ands.w	r5, r5, #6
 800eb20:	d106      	bne.n	800eb30 <_printf_common+0x48>
 800eb22:	f104 0a19 	add.w	sl, r4, #25
 800eb26:	68e3      	ldr	r3, [r4, #12]
 800eb28:	6832      	ldr	r2, [r6, #0]
 800eb2a:	1a9b      	subs	r3, r3, r2
 800eb2c:	42ab      	cmp	r3, r5
 800eb2e:	dc26      	bgt.n	800eb7e <_printf_common+0x96>
 800eb30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb34:	1e13      	subs	r3, r2, #0
 800eb36:	6822      	ldr	r2, [r4, #0]
 800eb38:	bf18      	it	ne
 800eb3a:	2301      	movne	r3, #1
 800eb3c:	0692      	lsls	r2, r2, #26
 800eb3e:	d42b      	bmi.n	800eb98 <_printf_common+0xb0>
 800eb40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb44:	4649      	mov	r1, r9
 800eb46:	4638      	mov	r0, r7
 800eb48:	47c0      	blx	r8
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	d01e      	beq.n	800eb8c <_printf_common+0xa4>
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	68e5      	ldr	r5, [r4, #12]
 800eb52:	6832      	ldr	r2, [r6, #0]
 800eb54:	f003 0306 	and.w	r3, r3, #6
 800eb58:	2b04      	cmp	r3, #4
 800eb5a:	bf08      	it	eq
 800eb5c:	1aad      	subeq	r5, r5, r2
 800eb5e:	68a3      	ldr	r3, [r4, #8]
 800eb60:	6922      	ldr	r2, [r4, #16]
 800eb62:	bf0c      	ite	eq
 800eb64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb68:	2500      	movne	r5, #0
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	bfc4      	itt	gt
 800eb6e:	1a9b      	subgt	r3, r3, r2
 800eb70:	18ed      	addgt	r5, r5, r3
 800eb72:	2600      	movs	r6, #0
 800eb74:	341a      	adds	r4, #26
 800eb76:	42b5      	cmp	r5, r6
 800eb78:	d11a      	bne.n	800ebb0 <_printf_common+0xc8>
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	e008      	b.n	800eb90 <_printf_common+0xa8>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	4652      	mov	r2, sl
 800eb82:	4649      	mov	r1, r9
 800eb84:	4638      	mov	r0, r7
 800eb86:	47c0      	blx	r8
 800eb88:	3001      	adds	r0, #1
 800eb8a:	d103      	bne.n	800eb94 <_printf_common+0xac>
 800eb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb94:	3501      	adds	r5, #1
 800eb96:	e7c6      	b.n	800eb26 <_printf_common+0x3e>
 800eb98:	18e1      	adds	r1, r4, r3
 800eb9a:	1c5a      	adds	r2, r3, #1
 800eb9c:	2030      	movs	r0, #48	; 0x30
 800eb9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eba2:	4422      	add	r2, r4
 800eba4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebac:	3302      	adds	r3, #2
 800ebae:	e7c7      	b.n	800eb40 <_printf_common+0x58>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	4622      	mov	r2, r4
 800ebb4:	4649      	mov	r1, r9
 800ebb6:	4638      	mov	r0, r7
 800ebb8:	47c0      	blx	r8
 800ebba:	3001      	adds	r0, #1
 800ebbc:	d0e6      	beq.n	800eb8c <_printf_common+0xa4>
 800ebbe:	3601      	adds	r6, #1
 800ebc0:	e7d9      	b.n	800eb76 <_printf_common+0x8e>
	...

0800ebc4 <_printf_i>:
 800ebc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebc8:	7e0f      	ldrb	r7, [r1, #24]
 800ebca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ebcc:	2f78      	cmp	r7, #120	; 0x78
 800ebce:	4691      	mov	r9, r2
 800ebd0:	4680      	mov	r8, r0
 800ebd2:	460c      	mov	r4, r1
 800ebd4:	469a      	mov	sl, r3
 800ebd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ebda:	d807      	bhi.n	800ebec <_printf_i+0x28>
 800ebdc:	2f62      	cmp	r7, #98	; 0x62
 800ebde:	d80a      	bhi.n	800ebf6 <_printf_i+0x32>
 800ebe0:	2f00      	cmp	r7, #0
 800ebe2:	f000 80d8 	beq.w	800ed96 <_printf_i+0x1d2>
 800ebe6:	2f58      	cmp	r7, #88	; 0x58
 800ebe8:	f000 80a3 	beq.w	800ed32 <_printf_i+0x16e>
 800ebec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ebf4:	e03a      	b.n	800ec6c <_printf_i+0xa8>
 800ebf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ebfa:	2b15      	cmp	r3, #21
 800ebfc:	d8f6      	bhi.n	800ebec <_printf_i+0x28>
 800ebfe:	a101      	add	r1, pc, #4	; (adr r1, 800ec04 <_printf_i+0x40>)
 800ec00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec04:	0800ec5d 	.word	0x0800ec5d
 800ec08:	0800ec71 	.word	0x0800ec71
 800ec0c:	0800ebed 	.word	0x0800ebed
 800ec10:	0800ebed 	.word	0x0800ebed
 800ec14:	0800ebed 	.word	0x0800ebed
 800ec18:	0800ebed 	.word	0x0800ebed
 800ec1c:	0800ec71 	.word	0x0800ec71
 800ec20:	0800ebed 	.word	0x0800ebed
 800ec24:	0800ebed 	.word	0x0800ebed
 800ec28:	0800ebed 	.word	0x0800ebed
 800ec2c:	0800ebed 	.word	0x0800ebed
 800ec30:	0800ed7d 	.word	0x0800ed7d
 800ec34:	0800eca1 	.word	0x0800eca1
 800ec38:	0800ed5f 	.word	0x0800ed5f
 800ec3c:	0800ebed 	.word	0x0800ebed
 800ec40:	0800ebed 	.word	0x0800ebed
 800ec44:	0800ed9f 	.word	0x0800ed9f
 800ec48:	0800ebed 	.word	0x0800ebed
 800ec4c:	0800eca1 	.word	0x0800eca1
 800ec50:	0800ebed 	.word	0x0800ebed
 800ec54:	0800ebed 	.word	0x0800ebed
 800ec58:	0800ed67 	.word	0x0800ed67
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	1d1a      	adds	r2, r3, #4
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	602a      	str	r2, [r5, #0]
 800ec64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	e0a3      	b.n	800edb8 <_printf_i+0x1f4>
 800ec70:	6820      	ldr	r0, [r4, #0]
 800ec72:	6829      	ldr	r1, [r5, #0]
 800ec74:	0606      	lsls	r6, r0, #24
 800ec76:	f101 0304 	add.w	r3, r1, #4
 800ec7a:	d50a      	bpl.n	800ec92 <_printf_i+0xce>
 800ec7c:	680e      	ldr	r6, [r1, #0]
 800ec7e:	602b      	str	r3, [r5, #0]
 800ec80:	2e00      	cmp	r6, #0
 800ec82:	da03      	bge.n	800ec8c <_printf_i+0xc8>
 800ec84:	232d      	movs	r3, #45	; 0x2d
 800ec86:	4276      	negs	r6, r6
 800ec88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec8c:	485e      	ldr	r0, [pc, #376]	; (800ee08 <_printf_i+0x244>)
 800ec8e:	230a      	movs	r3, #10
 800ec90:	e019      	b.n	800ecc6 <_printf_i+0x102>
 800ec92:	680e      	ldr	r6, [r1, #0]
 800ec94:	602b      	str	r3, [r5, #0]
 800ec96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec9a:	bf18      	it	ne
 800ec9c:	b236      	sxthne	r6, r6
 800ec9e:	e7ef      	b.n	800ec80 <_printf_i+0xbc>
 800eca0:	682b      	ldr	r3, [r5, #0]
 800eca2:	6820      	ldr	r0, [r4, #0]
 800eca4:	1d19      	adds	r1, r3, #4
 800eca6:	6029      	str	r1, [r5, #0]
 800eca8:	0601      	lsls	r1, r0, #24
 800ecaa:	d501      	bpl.n	800ecb0 <_printf_i+0xec>
 800ecac:	681e      	ldr	r6, [r3, #0]
 800ecae:	e002      	b.n	800ecb6 <_printf_i+0xf2>
 800ecb0:	0646      	lsls	r6, r0, #25
 800ecb2:	d5fb      	bpl.n	800ecac <_printf_i+0xe8>
 800ecb4:	881e      	ldrh	r6, [r3, #0]
 800ecb6:	4854      	ldr	r0, [pc, #336]	; (800ee08 <_printf_i+0x244>)
 800ecb8:	2f6f      	cmp	r7, #111	; 0x6f
 800ecba:	bf0c      	ite	eq
 800ecbc:	2308      	moveq	r3, #8
 800ecbe:	230a      	movne	r3, #10
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ecc6:	6865      	ldr	r5, [r4, #4]
 800ecc8:	60a5      	str	r5, [r4, #8]
 800ecca:	2d00      	cmp	r5, #0
 800eccc:	bfa2      	ittt	ge
 800ecce:	6821      	ldrge	r1, [r4, #0]
 800ecd0:	f021 0104 	bicge.w	r1, r1, #4
 800ecd4:	6021      	strge	r1, [r4, #0]
 800ecd6:	b90e      	cbnz	r6, 800ecdc <_printf_i+0x118>
 800ecd8:	2d00      	cmp	r5, #0
 800ecda:	d04d      	beq.n	800ed78 <_printf_i+0x1b4>
 800ecdc:	4615      	mov	r5, r2
 800ecde:	fbb6 f1f3 	udiv	r1, r6, r3
 800ece2:	fb03 6711 	mls	r7, r3, r1, r6
 800ece6:	5dc7      	ldrb	r7, [r0, r7]
 800ece8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ecec:	4637      	mov	r7, r6
 800ecee:	42bb      	cmp	r3, r7
 800ecf0:	460e      	mov	r6, r1
 800ecf2:	d9f4      	bls.n	800ecde <_printf_i+0x11a>
 800ecf4:	2b08      	cmp	r3, #8
 800ecf6:	d10b      	bne.n	800ed10 <_printf_i+0x14c>
 800ecf8:	6823      	ldr	r3, [r4, #0]
 800ecfa:	07de      	lsls	r6, r3, #31
 800ecfc:	d508      	bpl.n	800ed10 <_printf_i+0x14c>
 800ecfe:	6923      	ldr	r3, [r4, #16]
 800ed00:	6861      	ldr	r1, [r4, #4]
 800ed02:	4299      	cmp	r1, r3
 800ed04:	bfde      	ittt	le
 800ed06:	2330      	movle	r3, #48	; 0x30
 800ed08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed10:	1b52      	subs	r2, r2, r5
 800ed12:	6122      	str	r2, [r4, #16]
 800ed14:	f8cd a000 	str.w	sl, [sp]
 800ed18:	464b      	mov	r3, r9
 800ed1a:	aa03      	add	r2, sp, #12
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	4640      	mov	r0, r8
 800ed20:	f7ff fee2 	bl	800eae8 <_printf_common>
 800ed24:	3001      	adds	r0, #1
 800ed26:	d14c      	bne.n	800edc2 <_printf_i+0x1fe>
 800ed28:	f04f 30ff 	mov.w	r0, #4294967295
 800ed2c:	b004      	add	sp, #16
 800ed2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed32:	4835      	ldr	r0, [pc, #212]	; (800ee08 <_printf_i+0x244>)
 800ed34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ed38:	6829      	ldr	r1, [r5, #0]
 800ed3a:	6823      	ldr	r3, [r4, #0]
 800ed3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ed40:	6029      	str	r1, [r5, #0]
 800ed42:	061d      	lsls	r5, r3, #24
 800ed44:	d514      	bpl.n	800ed70 <_printf_i+0x1ac>
 800ed46:	07df      	lsls	r7, r3, #31
 800ed48:	bf44      	itt	mi
 800ed4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ed4e:	6023      	strmi	r3, [r4, #0]
 800ed50:	b91e      	cbnz	r6, 800ed5a <_printf_i+0x196>
 800ed52:	6823      	ldr	r3, [r4, #0]
 800ed54:	f023 0320 	bic.w	r3, r3, #32
 800ed58:	6023      	str	r3, [r4, #0]
 800ed5a:	2310      	movs	r3, #16
 800ed5c:	e7b0      	b.n	800ecc0 <_printf_i+0xfc>
 800ed5e:	6823      	ldr	r3, [r4, #0]
 800ed60:	f043 0320 	orr.w	r3, r3, #32
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	2378      	movs	r3, #120	; 0x78
 800ed68:	4828      	ldr	r0, [pc, #160]	; (800ee0c <_printf_i+0x248>)
 800ed6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed6e:	e7e3      	b.n	800ed38 <_printf_i+0x174>
 800ed70:	0659      	lsls	r1, r3, #25
 800ed72:	bf48      	it	mi
 800ed74:	b2b6      	uxthmi	r6, r6
 800ed76:	e7e6      	b.n	800ed46 <_printf_i+0x182>
 800ed78:	4615      	mov	r5, r2
 800ed7a:	e7bb      	b.n	800ecf4 <_printf_i+0x130>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	6826      	ldr	r6, [r4, #0]
 800ed80:	6961      	ldr	r1, [r4, #20]
 800ed82:	1d18      	adds	r0, r3, #4
 800ed84:	6028      	str	r0, [r5, #0]
 800ed86:	0635      	lsls	r5, r6, #24
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	d501      	bpl.n	800ed90 <_printf_i+0x1cc>
 800ed8c:	6019      	str	r1, [r3, #0]
 800ed8e:	e002      	b.n	800ed96 <_printf_i+0x1d2>
 800ed90:	0670      	lsls	r0, r6, #25
 800ed92:	d5fb      	bpl.n	800ed8c <_printf_i+0x1c8>
 800ed94:	8019      	strh	r1, [r3, #0]
 800ed96:	2300      	movs	r3, #0
 800ed98:	6123      	str	r3, [r4, #16]
 800ed9a:	4615      	mov	r5, r2
 800ed9c:	e7ba      	b.n	800ed14 <_printf_i+0x150>
 800ed9e:	682b      	ldr	r3, [r5, #0]
 800eda0:	1d1a      	adds	r2, r3, #4
 800eda2:	602a      	str	r2, [r5, #0]
 800eda4:	681d      	ldr	r5, [r3, #0]
 800eda6:	6862      	ldr	r2, [r4, #4]
 800eda8:	2100      	movs	r1, #0
 800edaa:	4628      	mov	r0, r5
 800edac:	f7f1 fa30 	bl	8000210 <memchr>
 800edb0:	b108      	cbz	r0, 800edb6 <_printf_i+0x1f2>
 800edb2:	1b40      	subs	r0, r0, r5
 800edb4:	6060      	str	r0, [r4, #4]
 800edb6:	6863      	ldr	r3, [r4, #4]
 800edb8:	6123      	str	r3, [r4, #16]
 800edba:	2300      	movs	r3, #0
 800edbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edc0:	e7a8      	b.n	800ed14 <_printf_i+0x150>
 800edc2:	6923      	ldr	r3, [r4, #16]
 800edc4:	462a      	mov	r2, r5
 800edc6:	4649      	mov	r1, r9
 800edc8:	4640      	mov	r0, r8
 800edca:	47d0      	blx	sl
 800edcc:	3001      	adds	r0, #1
 800edce:	d0ab      	beq.n	800ed28 <_printf_i+0x164>
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	079b      	lsls	r3, r3, #30
 800edd4:	d413      	bmi.n	800edfe <_printf_i+0x23a>
 800edd6:	68e0      	ldr	r0, [r4, #12]
 800edd8:	9b03      	ldr	r3, [sp, #12]
 800edda:	4298      	cmp	r0, r3
 800eddc:	bfb8      	it	lt
 800edde:	4618      	movlt	r0, r3
 800ede0:	e7a4      	b.n	800ed2c <_printf_i+0x168>
 800ede2:	2301      	movs	r3, #1
 800ede4:	4632      	mov	r2, r6
 800ede6:	4649      	mov	r1, r9
 800ede8:	4640      	mov	r0, r8
 800edea:	47d0      	blx	sl
 800edec:	3001      	adds	r0, #1
 800edee:	d09b      	beq.n	800ed28 <_printf_i+0x164>
 800edf0:	3501      	adds	r5, #1
 800edf2:	68e3      	ldr	r3, [r4, #12]
 800edf4:	9903      	ldr	r1, [sp, #12]
 800edf6:	1a5b      	subs	r3, r3, r1
 800edf8:	42ab      	cmp	r3, r5
 800edfa:	dcf2      	bgt.n	800ede2 <_printf_i+0x21e>
 800edfc:	e7eb      	b.n	800edd6 <_printf_i+0x212>
 800edfe:	2500      	movs	r5, #0
 800ee00:	f104 0619 	add.w	r6, r4, #25
 800ee04:	e7f5      	b.n	800edf2 <_printf_i+0x22e>
 800ee06:	bf00      	nop
 800ee08:	0800fdda 	.word	0x0800fdda
 800ee0c:	0800fdeb 	.word	0x0800fdeb

0800ee10 <__swbuf_r>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	460e      	mov	r6, r1
 800ee14:	4614      	mov	r4, r2
 800ee16:	4605      	mov	r5, r0
 800ee18:	b118      	cbz	r0, 800ee22 <__swbuf_r+0x12>
 800ee1a:	6983      	ldr	r3, [r0, #24]
 800ee1c:	b90b      	cbnz	r3, 800ee22 <__swbuf_r+0x12>
 800ee1e:	f000 f9d1 	bl	800f1c4 <__sinit>
 800ee22:	4b21      	ldr	r3, [pc, #132]	; (800eea8 <__swbuf_r+0x98>)
 800ee24:	429c      	cmp	r4, r3
 800ee26:	d12b      	bne.n	800ee80 <__swbuf_r+0x70>
 800ee28:	686c      	ldr	r4, [r5, #4]
 800ee2a:	69a3      	ldr	r3, [r4, #24]
 800ee2c:	60a3      	str	r3, [r4, #8]
 800ee2e:	89a3      	ldrh	r3, [r4, #12]
 800ee30:	071a      	lsls	r2, r3, #28
 800ee32:	d52f      	bpl.n	800ee94 <__swbuf_r+0x84>
 800ee34:	6923      	ldr	r3, [r4, #16]
 800ee36:	b36b      	cbz	r3, 800ee94 <__swbuf_r+0x84>
 800ee38:	6923      	ldr	r3, [r4, #16]
 800ee3a:	6820      	ldr	r0, [r4, #0]
 800ee3c:	1ac0      	subs	r0, r0, r3
 800ee3e:	6963      	ldr	r3, [r4, #20]
 800ee40:	b2f6      	uxtb	r6, r6
 800ee42:	4283      	cmp	r3, r0
 800ee44:	4637      	mov	r7, r6
 800ee46:	dc04      	bgt.n	800ee52 <__swbuf_r+0x42>
 800ee48:	4621      	mov	r1, r4
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f000 f926 	bl	800f09c <_fflush_r>
 800ee50:	bb30      	cbnz	r0, 800eea0 <__swbuf_r+0x90>
 800ee52:	68a3      	ldr	r3, [r4, #8]
 800ee54:	3b01      	subs	r3, #1
 800ee56:	60a3      	str	r3, [r4, #8]
 800ee58:	6823      	ldr	r3, [r4, #0]
 800ee5a:	1c5a      	adds	r2, r3, #1
 800ee5c:	6022      	str	r2, [r4, #0]
 800ee5e:	701e      	strb	r6, [r3, #0]
 800ee60:	6963      	ldr	r3, [r4, #20]
 800ee62:	3001      	adds	r0, #1
 800ee64:	4283      	cmp	r3, r0
 800ee66:	d004      	beq.n	800ee72 <__swbuf_r+0x62>
 800ee68:	89a3      	ldrh	r3, [r4, #12]
 800ee6a:	07db      	lsls	r3, r3, #31
 800ee6c:	d506      	bpl.n	800ee7c <__swbuf_r+0x6c>
 800ee6e:	2e0a      	cmp	r6, #10
 800ee70:	d104      	bne.n	800ee7c <__swbuf_r+0x6c>
 800ee72:	4621      	mov	r1, r4
 800ee74:	4628      	mov	r0, r5
 800ee76:	f000 f911 	bl	800f09c <_fflush_r>
 800ee7a:	b988      	cbnz	r0, 800eea0 <__swbuf_r+0x90>
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee80:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <__swbuf_r+0x9c>)
 800ee82:	429c      	cmp	r4, r3
 800ee84:	d101      	bne.n	800ee8a <__swbuf_r+0x7a>
 800ee86:	68ac      	ldr	r4, [r5, #8]
 800ee88:	e7cf      	b.n	800ee2a <__swbuf_r+0x1a>
 800ee8a:	4b09      	ldr	r3, [pc, #36]	; (800eeb0 <__swbuf_r+0xa0>)
 800ee8c:	429c      	cmp	r4, r3
 800ee8e:	bf08      	it	eq
 800ee90:	68ec      	ldreq	r4, [r5, #12]
 800ee92:	e7ca      	b.n	800ee2a <__swbuf_r+0x1a>
 800ee94:	4621      	mov	r1, r4
 800ee96:	4628      	mov	r0, r5
 800ee98:	f000 f80c 	bl	800eeb4 <__swsetup_r>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d0cb      	beq.n	800ee38 <__swbuf_r+0x28>
 800eea0:	f04f 37ff 	mov.w	r7, #4294967295
 800eea4:	e7ea      	b.n	800ee7c <__swbuf_r+0x6c>
 800eea6:	bf00      	nop
 800eea8:	0800fe1c 	.word	0x0800fe1c
 800eeac:	0800fe3c 	.word	0x0800fe3c
 800eeb0:	0800fdfc 	.word	0x0800fdfc

0800eeb4 <__swsetup_r>:
 800eeb4:	4b32      	ldr	r3, [pc, #200]	; (800ef80 <__swsetup_r+0xcc>)
 800eeb6:	b570      	push	{r4, r5, r6, lr}
 800eeb8:	681d      	ldr	r5, [r3, #0]
 800eeba:	4606      	mov	r6, r0
 800eebc:	460c      	mov	r4, r1
 800eebe:	b125      	cbz	r5, 800eeca <__swsetup_r+0x16>
 800eec0:	69ab      	ldr	r3, [r5, #24]
 800eec2:	b913      	cbnz	r3, 800eeca <__swsetup_r+0x16>
 800eec4:	4628      	mov	r0, r5
 800eec6:	f000 f97d 	bl	800f1c4 <__sinit>
 800eeca:	4b2e      	ldr	r3, [pc, #184]	; (800ef84 <__swsetup_r+0xd0>)
 800eecc:	429c      	cmp	r4, r3
 800eece:	d10f      	bne.n	800eef0 <__swsetup_r+0x3c>
 800eed0:	686c      	ldr	r4, [r5, #4]
 800eed2:	89a3      	ldrh	r3, [r4, #12]
 800eed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eed8:	0719      	lsls	r1, r3, #28
 800eeda:	d42c      	bmi.n	800ef36 <__swsetup_r+0x82>
 800eedc:	06dd      	lsls	r5, r3, #27
 800eede:	d411      	bmi.n	800ef04 <__swsetup_r+0x50>
 800eee0:	2309      	movs	r3, #9
 800eee2:	6033      	str	r3, [r6, #0]
 800eee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eee8:	81a3      	strh	r3, [r4, #12]
 800eeea:	f04f 30ff 	mov.w	r0, #4294967295
 800eeee:	e03e      	b.n	800ef6e <__swsetup_r+0xba>
 800eef0:	4b25      	ldr	r3, [pc, #148]	; (800ef88 <__swsetup_r+0xd4>)
 800eef2:	429c      	cmp	r4, r3
 800eef4:	d101      	bne.n	800eefa <__swsetup_r+0x46>
 800eef6:	68ac      	ldr	r4, [r5, #8]
 800eef8:	e7eb      	b.n	800eed2 <__swsetup_r+0x1e>
 800eefa:	4b24      	ldr	r3, [pc, #144]	; (800ef8c <__swsetup_r+0xd8>)
 800eefc:	429c      	cmp	r4, r3
 800eefe:	bf08      	it	eq
 800ef00:	68ec      	ldreq	r4, [r5, #12]
 800ef02:	e7e6      	b.n	800eed2 <__swsetup_r+0x1e>
 800ef04:	0758      	lsls	r0, r3, #29
 800ef06:	d512      	bpl.n	800ef2e <__swsetup_r+0x7a>
 800ef08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef0a:	b141      	cbz	r1, 800ef1e <__swsetup_r+0x6a>
 800ef0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef10:	4299      	cmp	r1, r3
 800ef12:	d002      	beq.n	800ef1a <__swsetup_r+0x66>
 800ef14:	4630      	mov	r0, r6
 800ef16:	f7fd fc13 	bl	800c740 <_free_r>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	6363      	str	r3, [r4, #52]	; 0x34
 800ef1e:	89a3      	ldrh	r3, [r4, #12]
 800ef20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef24:	81a3      	strh	r3, [r4, #12]
 800ef26:	2300      	movs	r3, #0
 800ef28:	6063      	str	r3, [r4, #4]
 800ef2a:	6923      	ldr	r3, [r4, #16]
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	89a3      	ldrh	r3, [r4, #12]
 800ef30:	f043 0308 	orr.w	r3, r3, #8
 800ef34:	81a3      	strh	r3, [r4, #12]
 800ef36:	6923      	ldr	r3, [r4, #16]
 800ef38:	b94b      	cbnz	r3, 800ef4e <__swsetup_r+0x9a>
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef44:	d003      	beq.n	800ef4e <__swsetup_r+0x9a>
 800ef46:	4621      	mov	r1, r4
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f000 f9fd 	bl	800f348 <__smakebuf_r>
 800ef4e:	89a0      	ldrh	r0, [r4, #12]
 800ef50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef54:	f010 0301 	ands.w	r3, r0, #1
 800ef58:	d00a      	beq.n	800ef70 <__swsetup_r+0xbc>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	60a3      	str	r3, [r4, #8]
 800ef5e:	6963      	ldr	r3, [r4, #20]
 800ef60:	425b      	negs	r3, r3
 800ef62:	61a3      	str	r3, [r4, #24]
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	b943      	cbnz	r3, 800ef7a <__swsetup_r+0xc6>
 800ef68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef6c:	d1ba      	bne.n	800eee4 <__swsetup_r+0x30>
 800ef6e:	bd70      	pop	{r4, r5, r6, pc}
 800ef70:	0781      	lsls	r1, r0, #30
 800ef72:	bf58      	it	pl
 800ef74:	6963      	ldrpl	r3, [r4, #20]
 800ef76:	60a3      	str	r3, [r4, #8]
 800ef78:	e7f4      	b.n	800ef64 <__swsetup_r+0xb0>
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	e7f7      	b.n	800ef6e <__swsetup_r+0xba>
 800ef7e:	bf00      	nop
 800ef80:	200000ec 	.word	0x200000ec
 800ef84:	0800fe1c 	.word	0x0800fe1c
 800ef88:	0800fe3c 	.word	0x0800fe3c
 800ef8c:	0800fdfc 	.word	0x0800fdfc

0800ef90 <__sflush_r>:
 800ef90:	898a      	ldrh	r2, [r1, #12]
 800ef92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef96:	4605      	mov	r5, r0
 800ef98:	0710      	lsls	r0, r2, #28
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	d458      	bmi.n	800f050 <__sflush_r+0xc0>
 800ef9e:	684b      	ldr	r3, [r1, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	dc05      	bgt.n	800efb0 <__sflush_r+0x20>
 800efa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	dc02      	bgt.n	800efb0 <__sflush_r+0x20>
 800efaa:	2000      	movs	r0, #0
 800efac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efb2:	2e00      	cmp	r6, #0
 800efb4:	d0f9      	beq.n	800efaa <__sflush_r+0x1a>
 800efb6:	2300      	movs	r3, #0
 800efb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efbc:	682f      	ldr	r7, [r5, #0]
 800efbe:	602b      	str	r3, [r5, #0]
 800efc0:	d032      	beq.n	800f028 <__sflush_r+0x98>
 800efc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efc4:	89a3      	ldrh	r3, [r4, #12]
 800efc6:	075a      	lsls	r2, r3, #29
 800efc8:	d505      	bpl.n	800efd6 <__sflush_r+0x46>
 800efca:	6863      	ldr	r3, [r4, #4]
 800efcc:	1ac0      	subs	r0, r0, r3
 800efce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efd0:	b10b      	cbz	r3, 800efd6 <__sflush_r+0x46>
 800efd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efd4:	1ac0      	subs	r0, r0, r3
 800efd6:	2300      	movs	r3, #0
 800efd8:	4602      	mov	r2, r0
 800efda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efdc:	6a21      	ldr	r1, [r4, #32]
 800efde:	4628      	mov	r0, r5
 800efe0:	47b0      	blx	r6
 800efe2:	1c43      	adds	r3, r0, #1
 800efe4:	89a3      	ldrh	r3, [r4, #12]
 800efe6:	d106      	bne.n	800eff6 <__sflush_r+0x66>
 800efe8:	6829      	ldr	r1, [r5, #0]
 800efea:	291d      	cmp	r1, #29
 800efec:	d82c      	bhi.n	800f048 <__sflush_r+0xb8>
 800efee:	4a2a      	ldr	r2, [pc, #168]	; (800f098 <__sflush_r+0x108>)
 800eff0:	40ca      	lsrs	r2, r1
 800eff2:	07d6      	lsls	r6, r2, #31
 800eff4:	d528      	bpl.n	800f048 <__sflush_r+0xb8>
 800eff6:	2200      	movs	r2, #0
 800eff8:	6062      	str	r2, [r4, #4]
 800effa:	04d9      	lsls	r1, r3, #19
 800effc:	6922      	ldr	r2, [r4, #16]
 800effe:	6022      	str	r2, [r4, #0]
 800f000:	d504      	bpl.n	800f00c <__sflush_r+0x7c>
 800f002:	1c42      	adds	r2, r0, #1
 800f004:	d101      	bne.n	800f00a <__sflush_r+0x7a>
 800f006:	682b      	ldr	r3, [r5, #0]
 800f008:	b903      	cbnz	r3, 800f00c <__sflush_r+0x7c>
 800f00a:	6560      	str	r0, [r4, #84]	; 0x54
 800f00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f00e:	602f      	str	r7, [r5, #0]
 800f010:	2900      	cmp	r1, #0
 800f012:	d0ca      	beq.n	800efaa <__sflush_r+0x1a>
 800f014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f018:	4299      	cmp	r1, r3
 800f01a:	d002      	beq.n	800f022 <__sflush_r+0x92>
 800f01c:	4628      	mov	r0, r5
 800f01e:	f7fd fb8f 	bl	800c740 <_free_r>
 800f022:	2000      	movs	r0, #0
 800f024:	6360      	str	r0, [r4, #52]	; 0x34
 800f026:	e7c1      	b.n	800efac <__sflush_r+0x1c>
 800f028:	6a21      	ldr	r1, [r4, #32]
 800f02a:	2301      	movs	r3, #1
 800f02c:	4628      	mov	r0, r5
 800f02e:	47b0      	blx	r6
 800f030:	1c41      	adds	r1, r0, #1
 800f032:	d1c7      	bne.n	800efc4 <__sflush_r+0x34>
 800f034:	682b      	ldr	r3, [r5, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d0c4      	beq.n	800efc4 <__sflush_r+0x34>
 800f03a:	2b1d      	cmp	r3, #29
 800f03c:	d001      	beq.n	800f042 <__sflush_r+0xb2>
 800f03e:	2b16      	cmp	r3, #22
 800f040:	d101      	bne.n	800f046 <__sflush_r+0xb6>
 800f042:	602f      	str	r7, [r5, #0]
 800f044:	e7b1      	b.n	800efaa <__sflush_r+0x1a>
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f04c:	81a3      	strh	r3, [r4, #12]
 800f04e:	e7ad      	b.n	800efac <__sflush_r+0x1c>
 800f050:	690f      	ldr	r7, [r1, #16]
 800f052:	2f00      	cmp	r7, #0
 800f054:	d0a9      	beq.n	800efaa <__sflush_r+0x1a>
 800f056:	0793      	lsls	r3, r2, #30
 800f058:	680e      	ldr	r6, [r1, #0]
 800f05a:	bf08      	it	eq
 800f05c:	694b      	ldreq	r3, [r1, #20]
 800f05e:	600f      	str	r7, [r1, #0]
 800f060:	bf18      	it	ne
 800f062:	2300      	movne	r3, #0
 800f064:	eba6 0807 	sub.w	r8, r6, r7
 800f068:	608b      	str	r3, [r1, #8]
 800f06a:	f1b8 0f00 	cmp.w	r8, #0
 800f06e:	dd9c      	ble.n	800efaa <__sflush_r+0x1a>
 800f070:	6a21      	ldr	r1, [r4, #32]
 800f072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f074:	4643      	mov	r3, r8
 800f076:	463a      	mov	r2, r7
 800f078:	4628      	mov	r0, r5
 800f07a:	47b0      	blx	r6
 800f07c:	2800      	cmp	r0, #0
 800f07e:	dc06      	bgt.n	800f08e <__sflush_r+0xfe>
 800f080:	89a3      	ldrh	r3, [r4, #12]
 800f082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f086:	81a3      	strh	r3, [r4, #12]
 800f088:	f04f 30ff 	mov.w	r0, #4294967295
 800f08c:	e78e      	b.n	800efac <__sflush_r+0x1c>
 800f08e:	4407      	add	r7, r0
 800f090:	eba8 0800 	sub.w	r8, r8, r0
 800f094:	e7e9      	b.n	800f06a <__sflush_r+0xda>
 800f096:	bf00      	nop
 800f098:	20400001 	.word	0x20400001

0800f09c <_fflush_r>:
 800f09c:	b538      	push	{r3, r4, r5, lr}
 800f09e:	690b      	ldr	r3, [r1, #16]
 800f0a0:	4605      	mov	r5, r0
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	b913      	cbnz	r3, 800f0ac <_fflush_r+0x10>
 800f0a6:	2500      	movs	r5, #0
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	bd38      	pop	{r3, r4, r5, pc}
 800f0ac:	b118      	cbz	r0, 800f0b6 <_fflush_r+0x1a>
 800f0ae:	6983      	ldr	r3, [r0, #24]
 800f0b0:	b90b      	cbnz	r3, 800f0b6 <_fflush_r+0x1a>
 800f0b2:	f000 f887 	bl	800f1c4 <__sinit>
 800f0b6:	4b14      	ldr	r3, [pc, #80]	; (800f108 <_fflush_r+0x6c>)
 800f0b8:	429c      	cmp	r4, r3
 800f0ba:	d11b      	bne.n	800f0f4 <_fflush_r+0x58>
 800f0bc:	686c      	ldr	r4, [r5, #4]
 800f0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d0ef      	beq.n	800f0a6 <_fflush_r+0xa>
 800f0c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0c8:	07d0      	lsls	r0, r2, #31
 800f0ca:	d404      	bmi.n	800f0d6 <_fflush_r+0x3a>
 800f0cc:	0599      	lsls	r1, r3, #22
 800f0ce:	d402      	bmi.n	800f0d6 <_fflush_r+0x3a>
 800f0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0d2:	f7ff fbae 	bl	800e832 <__retarget_lock_acquire_recursive>
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	4621      	mov	r1, r4
 800f0da:	f7ff ff59 	bl	800ef90 <__sflush_r>
 800f0de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0e0:	07da      	lsls	r2, r3, #31
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	d4e0      	bmi.n	800f0a8 <_fflush_r+0xc>
 800f0e6:	89a3      	ldrh	r3, [r4, #12]
 800f0e8:	059b      	lsls	r3, r3, #22
 800f0ea:	d4dd      	bmi.n	800f0a8 <_fflush_r+0xc>
 800f0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0ee:	f7ff fba1 	bl	800e834 <__retarget_lock_release_recursive>
 800f0f2:	e7d9      	b.n	800f0a8 <_fflush_r+0xc>
 800f0f4:	4b05      	ldr	r3, [pc, #20]	; (800f10c <_fflush_r+0x70>)
 800f0f6:	429c      	cmp	r4, r3
 800f0f8:	d101      	bne.n	800f0fe <_fflush_r+0x62>
 800f0fa:	68ac      	ldr	r4, [r5, #8]
 800f0fc:	e7df      	b.n	800f0be <_fflush_r+0x22>
 800f0fe:	4b04      	ldr	r3, [pc, #16]	; (800f110 <_fflush_r+0x74>)
 800f100:	429c      	cmp	r4, r3
 800f102:	bf08      	it	eq
 800f104:	68ec      	ldreq	r4, [r5, #12]
 800f106:	e7da      	b.n	800f0be <_fflush_r+0x22>
 800f108:	0800fe1c 	.word	0x0800fe1c
 800f10c:	0800fe3c 	.word	0x0800fe3c
 800f110:	0800fdfc 	.word	0x0800fdfc

0800f114 <std>:
 800f114:	2300      	movs	r3, #0
 800f116:	b510      	push	{r4, lr}
 800f118:	4604      	mov	r4, r0
 800f11a:	e9c0 3300 	strd	r3, r3, [r0]
 800f11e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f122:	6083      	str	r3, [r0, #8]
 800f124:	8181      	strh	r1, [r0, #12]
 800f126:	6643      	str	r3, [r0, #100]	; 0x64
 800f128:	81c2      	strh	r2, [r0, #14]
 800f12a:	6183      	str	r3, [r0, #24]
 800f12c:	4619      	mov	r1, r3
 800f12e:	2208      	movs	r2, #8
 800f130:	305c      	adds	r0, #92	; 0x5c
 800f132:	f7fd fafd 	bl	800c730 <memset>
 800f136:	4b05      	ldr	r3, [pc, #20]	; (800f14c <std+0x38>)
 800f138:	6263      	str	r3, [r4, #36]	; 0x24
 800f13a:	4b05      	ldr	r3, [pc, #20]	; (800f150 <std+0x3c>)
 800f13c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f13e:	4b05      	ldr	r3, [pc, #20]	; (800f154 <std+0x40>)
 800f140:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f142:	4b05      	ldr	r3, [pc, #20]	; (800f158 <std+0x44>)
 800f144:	6224      	str	r4, [r4, #32]
 800f146:	6323      	str	r3, [r4, #48]	; 0x30
 800f148:	bd10      	pop	{r4, pc}
 800f14a:	bf00      	nop
 800f14c:	0800f3c9 	.word	0x0800f3c9
 800f150:	0800f3eb 	.word	0x0800f3eb
 800f154:	0800f423 	.word	0x0800f423
 800f158:	0800f447 	.word	0x0800f447

0800f15c <_cleanup_r>:
 800f15c:	4901      	ldr	r1, [pc, #4]	; (800f164 <_cleanup_r+0x8>)
 800f15e:	f000 b8af 	b.w	800f2c0 <_fwalk_reent>
 800f162:	bf00      	nop
 800f164:	0800f09d 	.word	0x0800f09d

0800f168 <__sfmoreglue>:
 800f168:	b570      	push	{r4, r5, r6, lr}
 800f16a:	2268      	movs	r2, #104	; 0x68
 800f16c:	1e4d      	subs	r5, r1, #1
 800f16e:	4355      	muls	r5, r2
 800f170:	460e      	mov	r6, r1
 800f172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f176:	f7fd fb4f 	bl	800c818 <_malloc_r>
 800f17a:	4604      	mov	r4, r0
 800f17c:	b140      	cbz	r0, 800f190 <__sfmoreglue+0x28>
 800f17e:	2100      	movs	r1, #0
 800f180:	e9c0 1600 	strd	r1, r6, [r0]
 800f184:	300c      	adds	r0, #12
 800f186:	60a0      	str	r0, [r4, #8]
 800f188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f18c:	f7fd fad0 	bl	800c730 <memset>
 800f190:	4620      	mov	r0, r4
 800f192:	bd70      	pop	{r4, r5, r6, pc}

0800f194 <__sfp_lock_acquire>:
 800f194:	4801      	ldr	r0, [pc, #4]	; (800f19c <__sfp_lock_acquire+0x8>)
 800f196:	f7ff bb4c 	b.w	800e832 <__retarget_lock_acquire_recursive>
 800f19a:	bf00      	nop
 800f19c:	20000a3d 	.word	0x20000a3d

0800f1a0 <__sfp_lock_release>:
 800f1a0:	4801      	ldr	r0, [pc, #4]	; (800f1a8 <__sfp_lock_release+0x8>)
 800f1a2:	f7ff bb47 	b.w	800e834 <__retarget_lock_release_recursive>
 800f1a6:	bf00      	nop
 800f1a8:	20000a3d 	.word	0x20000a3d

0800f1ac <__sinit_lock_acquire>:
 800f1ac:	4801      	ldr	r0, [pc, #4]	; (800f1b4 <__sinit_lock_acquire+0x8>)
 800f1ae:	f7ff bb40 	b.w	800e832 <__retarget_lock_acquire_recursive>
 800f1b2:	bf00      	nop
 800f1b4:	20000a3e 	.word	0x20000a3e

0800f1b8 <__sinit_lock_release>:
 800f1b8:	4801      	ldr	r0, [pc, #4]	; (800f1c0 <__sinit_lock_release+0x8>)
 800f1ba:	f7ff bb3b 	b.w	800e834 <__retarget_lock_release_recursive>
 800f1be:	bf00      	nop
 800f1c0:	20000a3e 	.word	0x20000a3e

0800f1c4 <__sinit>:
 800f1c4:	b510      	push	{r4, lr}
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	f7ff fff0 	bl	800f1ac <__sinit_lock_acquire>
 800f1cc:	69a3      	ldr	r3, [r4, #24]
 800f1ce:	b11b      	cbz	r3, 800f1d8 <__sinit+0x14>
 800f1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1d4:	f7ff bff0 	b.w	800f1b8 <__sinit_lock_release>
 800f1d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f1dc:	6523      	str	r3, [r4, #80]	; 0x50
 800f1de:	4b13      	ldr	r3, [pc, #76]	; (800f22c <__sinit+0x68>)
 800f1e0:	4a13      	ldr	r2, [pc, #76]	; (800f230 <__sinit+0x6c>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1e6:	42a3      	cmp	r3, r4
 800f1e8:	bf04      	itt	eq
 800f1ea:	2301      	moveq	r3, #1
 800f1ec:	61a3      	streq	r3, [r4, #24]
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f000 f820 	bl	800f234 <__sfp>
 800f1f4:	6060      	str	r0, [r4, #4]
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f000 f81c 	bl	800f234 <__sfp>
 800f1fc:	60a0      	str	r0, [r4, #8]
 800f1fe:	4620      	mov	r0, r4
 800f200:	f000 f818 	bl	800f234 <__sfp>
 800f204:	2200      	movs	r2, #0
 800f206:	60e0      	str	r0, [r4, #12]
 800f208:	2104      	movs	r1, #4
 800f20a:	6860      	ldr	r0, [r4, #4]
 800f20c:	f7ff ff82 	bl	800f114 <std>
 800f210:	68a0      	ldr	r0, [r4, #8]
 800f212:	2201      	movs	r2, #1
 800f214:	2109      	movs	r1, #9
 800f216:	f7ff ff7d 	bl	800f114 <std>
 800f21a:	68e0      	ldr	r0, [r4, #12]
 800f21c:	2202      	movs	r2, #2
 800f21e:	2112      	movs	r1, #18
 800f220:	f7ff ff78 	bl	800f114 <std>
 800f224:	2301      	movs	r3, #1
 800f226:	61a3      	str	r3, [r4, #24]
 800f228:	e7d2      	b.n	800f1d0 <__sinit+0xc>
 800f22a:	bf00      	nop
 800f22c:	0800fa30 	.word	0x0800fa30
 800f230:	0800f15d 	.word	0x0800f15d

0800f234 <__sfp>:
 800f234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f236:	4607      	mov	r7, r0
 800f238:	f7ff ffac 	bl	800f194 <__sfp_lock_acquire>
 800f23c:	4b1e      	ldr	r3, [pc, #120]	; (800f2b8 <__sfp+0x84>)
 800f23e:	681e      	ldr	r6, [r3, #0]
 800f240:	69b3      	ldr	r3, [r6, #24]
 800f242:	b913      	cbnz	r3, 800f24a <__sfp+0x16>
 800f244:	4630      	mov	r0, r6
 800f246:	f7ff ffbd 	bl	800f1c4 <__sinit>
 800f24a:	3648      	adds	r6, #72	; 0x48
 800f24c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f250:	3b01      	subs	r3, #1
 800f252:	d503      	bpl.n	800f25c <__sfp+0x28>
 800f254:	6833      	ldr	r3, [r6, #0]
 800f256:	b30b      	cbz	r3, 800f29c <__sfp+0x68>
 800f258:	6836      	ldr	r6, [r6, #0]
 800f25a:	e7f7      	b.n	800f24c <__sfp+0x18>
 800f25c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f260:	b9d5      	cbnz	r5, 800f298 <__sfp+0x64>
 800f262:	4b16      	ldr	r3, [pc, #88]	; (800f2bc <__sfp+0x88>)
 800f264:	60e3      	str	r3, [r4, #12]
 800f266:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f26a:	6665      	str	r5, [r4, #100]	; 0x64
 800f26c:	f7ff fae0 	bl	800e830 <__retarget_lock_init_recursive>
 800f270:	f7ff ff96 	bl	800f1a0 <__sfp_lock_release>
 800f274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f27c:	6025      	str	r5, [r4, #0]
 800f27e:	61a5      	str	r5, [r4, #24]
 800f280:	2208      	movs	r2, #8
 800f282:	4629      	mov	r1, r5
 800f284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f288:	f7fd fa52 	bl	800c730 <memset>
 800f28c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f294:	4620      	mov	r0, r4
 800f296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f298:	3468      	adds	r4, #104	; 0x68
 800f29a:	e7d9      	b.n	800f250 <__sfp+0x1c>
 800f29c:	2104      	movs	r1, #4
 800f29e:	4638      	mov	r0, r7
 800f2a0:	f7ff ff62 	bl	800f168 <__sfmoreglue>
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	6030      	str	r0, [r6, #0]
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d1d5      	bne.n	800f258 <__sfp+0x24>
 800f2ac:	f7ff ff78 	bl	800f1a0 <__sfp_lock_release>
 800f2b0:	230c      	movs	r3, #12
 800f2b2:	603b      	str	r3, [r7, #0]
 800f2b4:	e7ee      	b.n	800f294 <__sfp+0x60>
 800f2b6:	bf00      	nop
 800f2b8:	0800fa30 	.word	0x0800fa30
 800f2bc:	ffff0001 	.word	0xffff0001

0800f2c0 <_fwalk_reent>:
 800f2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2c4:	4606      	mov	r6, r0
 800f2c6:	4688      	mov	r8, r1
 800f2c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2cc:	2700      	movs	r7, #0
 800f2ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2d2:	f1b9 0901 	subs.w	r9, r9, #1
 800f2d6:	d505      	bpl.n	800f2e4 <_fwalk_reent+0x24>
 800f2d8:	6824      	ldr	r4, [r4, #0]
 800f2da:	2c00      	cmp	r4, #0
 800f2dc:	d1f7      	bne.n	800f2ce <_fwalk_reent+0xe>
 800f2de:	4638      	mov	r0, r7
 800f2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2e4:	89ab      	ldrh	r3, [r5, #12]
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d907      	bls.n	800f2fa <_fwalk_reent+0x3a>
 800f2ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	d003      	beq.n	800f2fa <_fwalk_reent+0x3a>
 800f2f2:	4629      	mov	r1, r5
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	47c0      	blx	r8
 800f2f8:	4307      	orrs	r7, r0
 800f2fa:	3568      	adds	r5, #104	; 0x68
 800f2fc:	e7e9      	b.n	800f2d2 <_fwalk_reent+0x12>

0800f2fe <__swhatbuf_r>:
 800f2fe:	b570      	push	{r4, r5, r6, lr}
 800f300:	460e      	mov	r6, r1
 800f302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f306:	2900      	cmp	r1, #0
 800f308:	b096      	sub	sp, #88	; 0x58
 800f30a:	4614      	mov	r4, r2
 800f30c:	461d      	mov	r5, r3
 800f30e:	da08      	bge.n	800f322 <__swhatbuf_r+0x24>
 800f310:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	602a      	str	r2, [r5, #0]
 800f318:	061a      	lsls	r2, r3, #24
 800f31a:	d410      	bmi.n	800f33e <__swhatbuf_r+0x40>
 800f31c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f320:	e00e      	b.n	800f340 <__swhatbuf_r+0x42>
 800f322:	466a      	mov	r2, sp
 800f324:	f000 f8b6 	bl	800f494 <_fstat_r>
 800f328:	2800      	cmp	r0, #0
 800f32a:	dbf1      	blt.n	800f310 <__swhatbuf_r+0x12>
 800f32c:	9a01      	ldr	r2, [sp, #4]
 800f32e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f332:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f336:	425a      	negs	r2, r3
 800f338:	415a      	adcs	r2, r3
 800f33a:	602a      	str	r2, [r5, #0]
 800f33c:	e7ee      	b.n	800f31c <__swhatbuf_r+0x1e>
 800f33e:	2340      	movs	r3, #64	; 0x40
 800f340:	2000      	movs	r0, #0
 800f342:	6023      	str	r3, [r4, #0]
 800f344:	b016      	add	sp, #88	; 0x58
 800f346:	bd70      	pop	{r4, r5, r6, pc}

0800f348 <__smakebuf_r>:
 800f348:	898b      	ldrh	r3, [r1, #12]
 800f34a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f34c:	079d      	lsls	r5, r3, #30
 800f34e:	4606      	mov	r6, r0
 800f350:	460c      	mov	r4, r1
 800f352:	d507      	bpl.n	800f364 <__smakebuf_r+0x1c>
 800f354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	6123      	str	r3, [r4, #16]
 800f35c:	2301      	movs	r3, #1
 800f35e:	6163      	str	r3, [r4, #20]
 800f360:	b002      	add	sp, #8
 800f362:	bd70      	pop	{r4, r5, r6, pc}
 800f364:	ab01      	add	r3, sp, #4
 800f366:	466a      	mov	r2, sp
 800f368:	f7ff ffc9 	bl	800f2fe <__swhatbuf_r>
 800f36c:	9900      	ldr	r1, [sp, #0]
 800f36e:	4605      	mov	r5, r0
 800f370:	4630      	mov	r0, r6
 800f372:	f7fd fa51 	bl	800c818 <_malloc_r>
 800f376:	b948      	cbnz	r0, 800f38c <__smakebuf_r+0x44>
 800f378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f37c:	059a      	lsls	r2, r3, #22
 800f37e:	d4ef      	bmi.n	800f360 <__smakebuf_r+0x18>
 800f380:	f023 0303 	bic.w	r3, r3, #3
 800f384:	f043 0302 	orr.w	r3, r3, #2
 800f388:	81a3      	strh	r3, [r4, #12]
 800f38a:	e7e3      	b.n	800f354 <__smakebuf_r+0xc>
 800f38c:	4b0d      	ldr	r3, [pc, #52]	; (800f3c4 <__smakebuf_r+0x7c>)
 800f38e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	6020      	str	r0, [r4, #0]
 800f394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f398:	81a3      	strh	r3, [r4, #12]
 800f39a:	9b00      	ldr	r3, [sp, #0]
 800f39c:	6163      	str	r3, [r4, #20]
 800f39e:	9b01      	ldr	r3, [sp, #4]
 800f3a0:	6120      	str	r0, [r4, #16]
 800f3a2:	b15b      	cbz	r3, 800f3bc <__smakebuf_r+0x74>
 800f3a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f000 f885 	bl	800f4b8 <_isatty_r>
 800f3ae:	b128      	cbz	r0, 800f3bc <__smakebuf_r+0x74>
 800f3b0:	89a3      	ldrh	r3, [r4, #12]
 800f3b2:	f023 0303 	bic.w	r3, r3, #3
 800f3b6:	f043 0301 	orr.w	r3, r3, #1
 800f3ba:	81a3      	strh	r3, [r4, #12]
 800f3bc:	89a0      	ldrh	r0, [r4, #12]
 800f3be:	4305      	orrs	r5, r0
 800f3c0:	81a5      	strh	r5, [r4, #12]
 800f3c2:	e7cd      	b.n	800f360 <__smakebuf_r+0x18>
 800f3c4:	0800f15d 	.word	0x0800f15d

0800f3c8 <__sread>:
 800f3c8:	b510      	push	{r4, lr}
 800f3ca:	460c      	mov	r4, r1
 800f3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3d0:	f000 f894 	bl	800f4fc <_read_r>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	bfab      	itete	ge
 800f3d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3da:	89a3      	ldrhlt	r3, [r4, #12]
 800f3dc:	181b      	addge	r3, r3, r0
 800f3de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3e2:	bfac      	ite	ge
 800f3e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3e6:	81a3      	strhlt	r3, [r4, #12]
 800f3e8:	bd10      	pop	{r4, pc}

0800f3ea <__swrite>:
 800f3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ee:	461f      	mov	r7, r3
 800f3f0:	898b      	ldrh	r3, [r1, #12]
 800f3f2:	05db      	lsls	r3, r3, #23
 800f3f4:	4605      	mov	r5, r0
 800f3f6:	460c      	mov	r4, r1
 800f3f8:	4616      	mov	r6, r2
 800f3fa:	d505      	bpl.n	800f408 <__swrite+0x1e>
 800f3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f400:	2302      	movs	r3, #2
 800f402:	2200      	movs	r2, #0
 800f404:	f000 f868 	bl	800f4d8 <_lseek_r>
 800f408:	89a3      	ldrh	r3, [r4, #12]
 800f40a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f40e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f412:	81a3      	strh	r3, [r4, #12]
 800f414:	4632      	mov	r2, r6
 800f416:	463b      	mov	r3, r7
 800f418:	4628      	mov	r0, r5
 800f41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f41e:	f000 b817 	b.w	800f450 <_write_r>

0800f422 <__sseek>:
 800f422:	b510      	push	{r4, lr}
 800f424:	460c      	mov	r4, r1
 800f426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f42a:	f000 f855 	bl	800f4d8 <_lseek_r>
 800f42e:	1c43      	adds	r3, r0, #1
 800f430:	89a3      	ldrh	r3, [r4, #12]
 800f432:	bf15      	itete	ne
 800f434:	6560      	strne	r0, [r4, #84]	; 0x54
 800f436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f43a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f43e:	81a3      	strheq	r3, [r4, #12]
 800f440:	bf18      	it	ne
 800f442:	81a3      	strhne	r3, [r4, #12]
 800f444:	bd10      	pop	{r4, pc}

0800f446 <__sclose>:
 800f446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f44a:	f000 b813 	b.w	800f474 <_close_r>
	...

0800f450 <_write_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4d07      	ldr	r5, [pc, #28]	; (800f470 <_write_r+0x20>)
 800f454:	4604      	mov	r4, r0
 800f456:	4608      	mov	r0, r1
 800f458:	4611      	mov	r1, r2
 800f45a:	2200      	movs	r2, #0
 800f45c:	602a      	str	r2, [r5, #0]
 800f45e:	461a      	mov	r2, r3
 800f460:	f7f6 fad9 	bl	8005a16 <_write>
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	d102      	bne.n	800f46e <_write_r+0x1e>
 800f468:	682b      	ldr	r3, [r5, #0]
 800f46a:	b103      	cbz	r3, 800f46e <_write_r+0x1e>
 800f46c:	6023      	str	r3, [r4, #0]
 800f46e:	bd38      	pop	{r3, r4, r5, pc}
 800f470:	20000a38 	.word	0x20000a38

0800f474 <_close_r>:
 800f474:	b538      	push	{r3, r4, r5, lr}
 800f476:	4d06      	ldr	r5, [pc, #24]	; (800f490 <_close_r+0x1c>)
 800f478:	2300      	movs	r3, #0
 800f47a:	4604      	mov	r4, r0
 800f47c:	4608      	mov	r0, r1
 800f47e:	602b      	str	r3, [r5, #0]
 800f480:	f7f6 fae5 	bl	8005a4e <_close>
 800f484:	1c43      	adds	r3, r0, #1
 800f486:	d102      	bne.n	800f48e <_close_r+0x1a>
 800f488:	682b      	ldr	r3, [r5, #0]
 800f48a:	b103      	cbz	r3, 800f48e <_close_r+0x1a>
 800f48c:	6023      	str	r3, [r4, #0]
 800f48e:	bd38      	pop	{r3, r4, r5, pc}
 800f490:	20000a38 	.word	0x20000a38

0800f494 <_fstat_r>:
 800f494:	b538      	push	{r3, r4, r5, lr}
 800f496:	4d07      	ldr	r5, [pc, #28]	; (800f4b4 <_fstat_r+0x20>)
 800f498:	2300      	movs	r3, #0
 800f49a:	4604      	mov	r4, r0
 800f49c:	4608      	mov	r0, r1
 800f49e:	4611      	mov	r1, r2
 800f4a0:	602b      	str	r3, [r5, #0]
 800f4a2:	f7f6 fae0 	bl	8005a66 <_fstat>
 800f4a6:	1c43      	adds	r3, r0, #1
 800f4a8:	d102      	bne.n	800f4b0 <_fstat_r+0x1c>
 800f4aa:	682b      	ldr	r3, [r5, #0]
 800f4ac:	b103      	cbz	r3, 800f4b0 <_fstat_r+0x1c>
 800f4ae:	6023      	str	r3, [r4, #0]
 800f4b0:	bd38      	pop	{r3, r4, r5, pc}
 800f4b2:	bf00      	nop
 800f4b4:	20000a38 	.word	0x20000a38

0800f4b8 <_isatty_r>:
 800f4b8:	b538      	push	{r3, r4, r5, lr}
 800f4ba:	4d06      	ldr	r5, [pc, #24]	; (800f4d4 <_isatty_r+0x1c>)
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4604      	mov	r4, r0
 800f4c0:	4608      	mov	r0, r1
 800f4c2:	602b      	str	r3, [r5, #0]
 800f4c4:	f7f6 fadf 	bl	8005a86 <_isatty>
 800f4c8:	1c43      	adds	r3, r0, #1
 800f4ca:	d102      	bne.n	800f4d2 <_isatty_r+0x1a>
 800f4cc:	682b      	ldr	r3, [r5, #0]
 800f4ce:	b103      	cbz	r3, 800f4d2 <_isatty_r+0x1a>
 800f4d0:	6023      	str	r3, [r4, #0]
 800f4d2:	bd38      	pop	{r3, r4, r5, pc}
 800f4d4:	20000a38 	.word	0x20000a38

0800f4d8 <_lseek_r>:
 800f4d8:	b538      	push	{r3, r4, r5, lr}
 800f4da:	4d07      	ldr	r5, [pc, #28]	; (800f4f8 <_lseek_r+0x20>)
 800f4dc:	4604      	mov	r4, r0
 800f4de:	4608      	mov	r0, r1
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	602a      	str	r2, [r5, #0]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	f7f6 fad8 	bl	8005a9c <_lseek>
 800f4ec:	1c43      	adds	r3, r0, #1
 800f4ee:	d102      	bne.n	800f4f6 <_lseek_r+0x1e>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	b103      	cbz	r3, 800f4f6 <_lseek_r+0x1e>
 800f4f4:	6023      	str	r3, [r4, #0]
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	20000a38 	.word	0x20000a38

0800f4fc <_read_r>:
 800f4fc:	b538      	push	{r3, r4, r5, lr}
 800f4fe:	4d07      	ldr	r5, [pc, #28]	; (800f51c <_read_r+0x20>)
 800f500:	4604      	mov	r4, r0
 800f502:	4608      	mov	r0, r1
 800f504:	4611      	mov	r1, r2
 800f506:	2200      	movs	r2, #0
 800f508:	602a      	str	r2, [r5, #0]
 800f50a:	461a      	mov	r2, r3
 800f50c:	f7f6 fa66 	bl	80059dc <_read>
 800f510:	1c43      	adds	r3, r0, #1
 800f512:	d102      	bne.n	800f51a <_read_r+0x1e>
 800f514:	682b      	ldr	r3, [r5, #0]
 800f516:	b103      	cbz	r3, 800f51a <_read_r+0x1e>
 800f518:	6023      	str	r3, [r4, #0]
 800f51a:	bd38      	pop	{r3, r4, r5, pc}
 800f51c:	20000a38 	.word	0x20000a38

0800f520 <_init>:
 800f520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f522:	bf00      	nop
 800f524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f526:	bc08      	pop	{r3}
 800f528:	469e      	mov	lr, r3
 800f52a:	4770      	bx	lr

0800f52c <_fini>:
 800f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52e:	bf00      	nop
 800f530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f532:	bc08      	pop	{r3}
 800f534:	469e      	mov	lr, r3
 800f536:	4770      	bx	lr
